name: Build dev container feature image

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        baseImage:
          [
            "ubuntu:focal",
            "ubuntu:jammy",
            "ubuntu:bionic",
            "debian:11",
            "debian:10",
            "mcr.microsoft.com/devcontainers/base:ubuntu",
            "mcr.microsoft.com/devcontainers/base:debian",
          ]
    steps:
      - uses: actions/checkout@v3

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for 'azd' against '${{ matrix.baseImage }}'"
        run: devcontainer features test -f azd -i ${{ matrix.baseImage }} .
        working-directory: ./ext/devcontainer

  test-scenarios:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing 'azd' scenarios"
        run: devcontainer features test -f azd --skip-autogenerated .
        working-directory: ./ext/devcontainer

  test-global:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing global scenarios"
        run: devcontainer features test --global-scenarios-only .
        working-directory: ./ext/devcontainer

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [test, test-global, test-scenarios]
    environment:
      name: deploy-devcontainer-feature
    steps:
      - uses: actions/checkout@v3

      - name: "Publish Features"
        uses: devcontainers/action@v1
        with:
          publish-features: "true"
          base-path-to-features: "./ext/devcontainer"
          generate-docs: "true"

      - name: Create PR for Documentation
        id: push_image_info
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e
          echo "Start."
          # Configure git and Push updates
          git config --global user.email github-actions@github.com
          git config --global user.name github-actions
          git config pull.rebase false
          branch=automated-documentation-update-$GITHUB_RUN_ID
          git checkout -b $branch
          message='Automated documentation update'
          # Add / update and commit
          git add */**/README.md
          git commit -m 'Automated documentation update [skip ci]' || export NO_UPDATES=true
          # Push
          if [ "$NO_UPDATES" != "true" ] ; then
              git push origin "$branch"
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                /repos/${GITHUB_REPOSITORY}/pulls \
                -f title="$message" \
              -f body="$message" \
              -f head="$branch" \
              -f base='main'
          fi