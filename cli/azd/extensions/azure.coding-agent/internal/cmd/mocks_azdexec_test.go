// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azure/azure-dev/cli/azd/pkg/exec (interfaces: CommandRunner)
//
// Generated by this command:
//
//	mockgen -destination mocks_azdexec_test.go -copyright_file ./testdata/mock_copyright.txt -package cmd github.com/azure/azure-dev/cli/azd/pkg/exec CommandRunner
//

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	reflect "reflect"

	exec "github.com/azure/azure-dev/cli/azd/pkg/exec"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandRunner is a mock of CommandRunner interface.
type MockCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRunnerMockRecorder
	isgomock struct{}
}

// MockCommandRunnerMockRecorder is the mock recorder for MockCommandRunner.
type MockCommandRunnerMockRecorder struct {
	mock *MockCommandRunner
}

// NewMockCommandRunner creates a new mock instance.
func NewMockCommandRunner(ctrl *gomock.Controller) *MockCommandRunner {
	mock := &MockCommandRunner{ctrl: ctrl}
	mock.recorder = &MockCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRunner) EXPECT() *MockCommandRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCommandRunner) Run(ctx context.Context, args exec.RunArgs) (exec.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, args)
	ret0, _ := ret[0].(exec.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockCommandRunnerMockRecorder) Run(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandRunner)(nil).Run), ctx, args)
}

// RunList mocks base method.
func (m *MockCommandRunner) RunList(ctx context.Context, commands []string, args exec.RunArgs) (exec.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunList", ctx, commands, args)
	ret0, _ := ret[0].(exec.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunList indicates an expected call of RunList.
func (mr *MockCommandRunnerMockRecorder) RunList(ctx, commands, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunList", reflect.TypeOf((*MockCommandRunner)(nil).RunList), ctx, commands, args)
}

// ToolInPath mocks base method.
func (m *MockCommandRunner) ToolInPath(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolInPath", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToolInPath indicates an expected call of ToolInPath.
func (mr *MockCommandRunnerMockRecorder) ToolInPath(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolInPath", reflect.TypeOf((*MockCommandRunner)(nil).ToolInPath), name)
}
