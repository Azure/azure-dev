// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azure/azure-dev/cli/azd/pkg/azdext (interfaces: PromptServiceClient)
//
// Generated by this command:
//
//	mockgen -destination mocks_azdext_test.go -copyright_file ./testdata/mock_copyright.txt -package cmd github.com/azure/azure-dev/cli/azd/pkg/azdext PromptServiceClient
//

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	reflect "reflect"

	azdext "github.com/azure/azure-dev/cli/azd/pkg/azdext"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPromptServiceClient is a mock of PromptServiceClient interface.
type MockPromptServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPromptServiceClientMockRecorder
	isgomock struct{}
}

// MockPromptServiceClientMockRecorder is the mock recorder for MockPromptServiceClient.
type MockPromptServiceClientMockRecorder struct {
	mock *MockPromptServiceClient
}

// NewMockPromptServiceClient creates a new mock instance.
func NewMockPromptServiceClient(ctrl *gomock.Controller) *MockPromptServiceClient {
	mock := &MockPromptServiceClient{ctrl: ctrl}
	mock.recorder = &MockPromptServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptServiceClient) EXPECT() *MockPromptServiceClientMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockPromptServiceClient) Confirm(ctx context.Context, in *azdext.ConfirmRequest, opts ...grpc.CallOption) (*azdext.ConfirmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Confirm", varargs...)
	ret0, _ := ret[0].(*azdext.ConfirmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockPromptServiceClientMockRecorder) Confirm(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockPromptServiceClient)(nil).Confirm), varargs...)
}

// MultiSelect mocks base method.
func (m *MockPromptServiceClient) MultiSelect(ctx context.Context, in *azdext.MultiSelectRequest, opts ...grpc.CallOption) (*azdext.MultiSelectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiSelect", varargs...)
	ret0, _ := ret[0].(*azdext.MultiSelectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSelect indicates an expected call of MultiSelect.
func (mr *MockPromptServiceClientMockRecorder) MultiSelect(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSelect", reflect.TypeOf((*MockPromptServiceClient)(nil).MultiSelect), varargs...)
}

// Prompt mocks base method.
func (m *MockPromptServiceClient) Prompt(ctx context.Context, in *azdext.PromptRequest, opts ...grpc.CallOption) (*azdext.PromptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prompt", varargs...)
	ret0, _ := ret[0].(*azdext.PromptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockPromptServiceClientMockRecorder) Prompt(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockPromptServiceClient)(nil).Prompt), varargs...)
}

// PromptLocation mocks base method.
func (m *MockPromptServiceClient) PromptLocation(ctx context.Context, in *azdext.PromptLocationRequest, opts ...grpc.CallOption) (*azdext.PromptLocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromptLocation", varargs...)
	ret0, _ := ret[0].(*azdext.PromptLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptLocation indicates an expected call of PromptLocation.
func (mr *MockPromptServiceClientMockRecorder) PromptLocation(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptLocation", reflect.TypeOf((*MockPromptServiceClient)(nil).PromptLocation), varargs...)
}

// PromptResourceGroup mocks base method.
func (m *MockPromptServiceClient) PromptResourceGroup(ctx context.Context, in *azdext.PromptResourceGroupRequest, opts ...grpc.CallOption) (*azdext.PromptResourceGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromptResourceGroup", varargs...)
	ret0, _ := ret[0].(*azdext.PromptResourceGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptResourceGroup indicates an expected call of PromptResourceGroup.
func (mr *MockPromptServiceClientMockRecorder) PromptResourceGroup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptResourceGroup", reflect.TypeOf((*MockPromptServiceClient)(nil).PromptResourceGroup), varargs...)
}

// PromptResourceGroupResource mocks base method.
func (m *MockPromptServiceClient) PromptResourceGroupResource(ctx context.Context, in *azdext.PromptResourceGroupResourceRequest, opts ...grpc.CallOption) (*azdext.PromptResourceGroupResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromptResourceGroupResource", varargs...)
	ret0, _ := ret[0].(*azdext.PromptResourceGroupResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptResourceGroupResource indicates an expected call of PromptResourceGroupResource.
func (mr *MockPromptServiceClientMockRecorder) PromptResourceGroupResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptResourceGroupResource", reflect.TypeOf((*MockPromptServiceClient)(nil).PromptResourceGroupResource), varargs...)
}

// PromptSubscription mocks base method.
func (m *MockPromptServiceClient) PromptSubscription(ctx context.Context, in *azdext.PromptSubscriptionRequest, opts ...grpc.CallOption) (*azdext.PromptSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromptSubscription", varargs...)
	ret0, _ := ret[0].(*azdext.PromptSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptSubscription indicates an expected call of PromptSubscription.
func (mr *MockPromptServiceClientMockRecorder) PromptSubscription(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptSubscription", reflect.TypeOf((*MockPromptServiceClient)(nil).PromptSubscription), varargs...)
}

// PromptSubscriptionResource mocks base method.
func (m *MockPromptServiceClient) PromptSubscriptionResource(ctx context.Context, in *azdext.PromptSubscriptionResourceRequest, opts ...grpc.CallOption) (*azdext.PromptSubscriptionResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromptSubscriptionResource", varargs...)
	ret0, _ := ret[0].(*azdext.PromptSubscriptionResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptSubscriptionResource indicates an expected call of PromptSubscriptionResource.
func (mr *MockPromptServiceClientMockRecorder) PromptSubscriptionResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptSubscriptionResource", reflect.TypeOf((*MockPromptServiceClient)(nil).PromptSubscriptionResource), varargs...)
}

// Select mocks base method.
func (m *MockPromptServiceClient) Select(ctx context.Context, in *azdext.SelectRequest, opts ...grpc.CallOption) (*azdext.SelectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(*azdext.SelectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockPromptServiceClientMockRecorder) Select(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPromptServiceClient)(nil).Select), varargs...)
}
