// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/azure/azure-dev/cli/azd/pkg/input (interfaces: Console)
//
// Generated by this command:
//
//	mockgen -destination mocks_azdinput_test.go -copyright_file ./testdata/mock_copyright.txt -package cmd github.com/azure/azure-dev/cli/azd/pkg/input Console
//

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	io "io"
	reflect "reflect"

	alpha "github.com/azure/azure-dev/cli/azd/pkg/alpha"
	input "github.com/azure/azure-dev/cli/azd/pkg/input"
	output "github.com/azure/azure-dev/cli/azd/pkg/output"
	ux "github.com/azure/azure-dev/cli/azd/pkg/output/ux"
	gomock "go.uber.org/mock/gomock"
)

// MockConsole is a mock of Console interface.
type MockConsole struct {
	ctrl     *gomock.Controller
	recorder *MockConsoleMockRecorder
	isgomock struct{}
}

// MockConsoleMockRecorder is the mock recorder for MockConsole.
type MockConsoleMockRecorder struct {
	mock *MockConsole
}

// NewMockConsole creates a new mock instance.
func NewMockConsole(ctrl *gomock.Controller) *MockConsole {
	mock := &MockConsole{ctrl: ctrl}
	mock.recorder = &MockConsoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsole) EXPECT() *MockConsoleMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockConsole) Confirm(ctx context.Context, options input.ConsoleOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockConsoleMockRecorder) Confirm(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockConsole)(nil).Confirm), ctx, options)
}

// DoInteraction mocks base method.
func (m *MockConsole) DoInteraction(action func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInteraction", action)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInteraction indicates an expected call of DoInteraction.
func (mr *MockConsoleMockRecorder) DoInteraction(action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInteraction", reflect.TypeOf((*MockConsole)(nil).DoInteraction), action)
}

// EnsureBlankLine mocks base method.
func (m *MockConsole) EnsureBlankLine(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnsureBlankLine", ctx)
}

// EnsureBlankLine indicates an expected call of EnsureBlankLine.
func (mr *MockConsoleMockRecorder) EnsureBlankLine(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureBlankLine", reflect.TypeOf((*MockConsole)(nil).EnsureBlankLine), ctx)
}

// GetFormatter mocks base method.
func (m *MockConsole) GetFormatter() output.Formatter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormatter")
	ret0, _ := ret[0].(output.Formatter)
	return ret0
}

// GetFormatter indicates an expected call of GetFormatter.
func (mr *MockConsoleMockRecorder) GetFormatter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormatter", reflect.TypeOf((*MockConsole)(nil).GetFormatter))
}

// GetWriter mocks base method.
func (m *MockConsole) GetWriter() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriter")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// GetWriter indicates an expected call of GetWriter.
func (mr *MockConsoleMockRecorder) GetWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriter", reflect.TypeOf((*MockConsole)(nil).GetWriter))
}

// Handles mocks base method.
func (m *MockConsole) Handles() input.ConsoleHandles {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handles")
	ret0, _ := ret[0].(input.ConsoleHandles)
	return ret0
}

// Handles indicates an expected call of Handles.
func (mr *MockConsoleMockRecorder) Handles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handles", reflect.TypeOf((*MockConsole)(nil).Handles))
}

// IsSpinnerInteractive mocks base method.
func (m *MockConsole) IsSpinnerInteractive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSpinnerInteractive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSpinnerInteractive indicates an expected call of IsSpinnerInteractive.
func (mr *MockConsoleMockRecorder) IsSpinnerInteractive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSpinnerInteractive", reflect.TypeOf((*MockConsole)(nil).IsSpinnerInteractive))
}

// IsSpinnerRunning mocks base method.
func (m *MockConsole) IsSpinnerRunning(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSpinnerRunning", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSpinnerRunning indicates an expected call of IsSpinnerRunning.
func (mr *MockConsoleMockRecorder) IsSpinnerRunning(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSpinnerRunning", reflect.TypeOf((*MockConsole)(nil).IsSpinnerRunning), ctx)
}

// IsUnformatted mocks base method.
func (m *MockConsole) IsUnformatted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnformatted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnformatted indicates an expected call of IsUnformatted.
func (mr *MockConsoleMockRecorder) IsUnformatted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnformatted", reflect.TypeOf((*MockConsole)(nil).IsUnformatted))
}

// Message mocks base method.
func (m *MockConsole) Message(ctx context.Context, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", ctx, message)
}

// Message indicates an expected call of Message.
func (mr *MockConsoleMockRecorder) Message(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockConsole)(nil).Message), ctx, message)
}

// MessageUxItem mocks base method.
func (m *MockConsole) MessageUxItem(ctx context.Context, item ux.UxItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageUxItem", ctx, item)
}

// MessageUxItem indicates an expected call of MessageUxItem.
func (mr *MockConsoleMockRecorder) MessageUxItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageUxItem", reflect.TypeOf((*MockConsole)(nil).MessageUxItem), ctx, item)
}

// MultiSelect mocks base method.
func (m *MockConsole) MultiSelect(ctx context.Context, options input.ConsoleOptions) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSelect", ctx, options)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSelect indicates an expected call of MultiSelect.
func (mr *MockConsoleMockRecorder) MultiSelect(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSelect", reflect.TypeOf((*MockConsole)(nil).MultiSelect), ctx, options)
}

// Prompt mocks base method.
func (m *MockConsole) Prompt(ctx context.Context, options input.ConsoleOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt", ctx, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockConsoleMockRecorder) Prompt(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockConsole)(nil).Prompt), ctx, options)
}

// PromptDialog mocks base method.
func (m *MockConsole) PromptDialog(ctx context.Context, dialog input.PromptDialog) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptDialog", ctx, dialog)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptDialog indicates an expected call of PromptDialog.
func (mr *MockConsoleMockRecorder) PromptDialog(ctx, dialog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptDialog", reflect.TypeOf((*MockConsole)(nil).PromptDialog), ctx, dialog)
}

// PromptFs mocks base method.
func (m *MockConsole) PromptFs(ctx context.Context, options input.ConsoleOptions, fsOptions input.FsOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptFs", ctx, options, fsOptions)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptFs indicates an expected call of PromptFs.
func (mr *MockConsoleMockRecorder) PromptFs(ctx, options, fsOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptFs", reflect.TypeOf((*MockConsole)(nil).PromptFs), ctx, options, fsOptions)
}

// Select mocks base method.
func (m *MockConsole) Select(ctx context.Context, options input.ConsoleOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, options)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockConsoleMockRecorder) Select(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockConsole)(nil).Select), ctx, options)
}

// SetWriter mocks base method.
func (m *MockConsole) SetWriter(writer io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWriter", writer)
}

// SetWriter indicates an expected call of SetWriter.
func (mr *MockConsoleMockRecorder) SetWriter(writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriter", reflect.TypeOf((*MockConsole)(nil).SetWriter), writer)
}

// ShowPreviewer mocks base method.
func (m *MockConsole) ShowPreviewer(ctx context.Context, options *input.ShowPreviewerOptions) io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowPreviewer", ctx, options)
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// ShowPreviewer indicates an expected call of ShowPreviewer.
func (mr *MockConsoleMockRecorder) ShowPreviewer(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowPreviewer", reflect.TypeOf((*MockConsole)(nil).ShowPreviewer), ctx, options)
}

// ShowSpinner mocks base method.
func (m *MockConsole) ShowSpinner(ctx context.Context, title string, format input.SpinnerUxType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowSpinner", ctx, title, format)
}

// ShowSpinner indicates an expected call of ShowSpinner.
func (mr *MockConsoleMockRecorder) ShowSpinner(ctx, title, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSpinner", reflect.TypeOf((*MockConsole)(nil).ShowSpinner), ctx, title, format)
}

// StopPreviewer mocks base method.
func (m *MockConsole) StopPreviewer(ctx context.Context, keepLogs bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopPreviewer", ctx, keepLogs)
}

// StopPreviewer indicates an expected call of StopPreviewer.
func (mr *MockConsoleMockRecorder) StopPreviewer(ctx, keepLogs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPreviewer", reflect.TypeOf((*MockConsole)(nil).StopPreviewer), ctx, keepLogs)
}

// StopSpinner mocks base method.
func (m *MockConsole) StopSpinner(ctx context.Context, lastMessage string, format input.SpinnerUxType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSpinner", ctx, lastMessage, format)
}

// StopSpinner indicates an expected call of StopSpinner.
func (mr *MockConsoleMockRecorder) StopSpinner(ctx, lastMessage, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSpinner", reflect.TypeOf((*MockConsole)(nil).StopSpinner), ctx, lastMessage, format)
}

// SupportsPromptDialog mocks base method.
func (m *MockConsole) SupportsPromptDialog() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsPromptDialog")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsPromptDialog indicates an expected call of SupportsPromptDialog.
func (mr *MockConsoleMockRecorder) SupportsPromptDialog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsPromptDialog", reflect.TypeOf((*MockConsole)(nil).SupportsPromptDialog))
}

// WaitForEnter mocks base method.
func (m *MockConsole) WaitForEnter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForEnter")
}

// WaitForEnter indicates an expected call of WaitForEnter.
func (mr *MockConsoleMockRecorder) WaitForEnter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForEnter", reflect.TypeOf((*MockConsole)(nil).WaitForEnter))
}

// WarnForFeature mocks base method.
func (m *MockConsole) WarnForFeature(ctx context.Context, id alpha.FeatureId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WarnForFeature", ctx, id)
}

// WarnForFeature indicates an expected call of WarnForFeature.
func (mr *MockConsoleMockRecorder) WarnForFeature(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnForFeature", reflect.TypeOf((*MockConsole)(nil).WarnForFeature), ctx, id)
}
