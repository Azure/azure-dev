// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: Azure.CodingAgent/internal/cmd (interfaces: githubCLI,resourceService,azdMSIService)
//
// Generated by this command:
//
//	mockgen -destination mocks_internal_test.go -copyright_file ./testdata/mock_copyright.txt -package cmd . githubCLI,resourceService,azdMSIService
//

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	reflect "reflect"

	armmsi "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/msi/armmsi"
	armresources "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	github "github.com/azure/azure-dev/cli/azd/pkg/tools/github"
	gomock "go.uber.org/mock/gomock"
)

// MockgithubCLI is a mock of githubCLI interface.
type MockgithubCLI struct {
	ctrl     *gomock.Controller
	recorder *MockgithubCLIMockRecorder
	isgomock struct{}
}

// MockgithubCLIMockRecorder is the mock recorder for MockgithubCLI.
type MockgithubCLIMockRecorder struct {
	mock *MockgithubCLI
}

// NewMockgithubCLI creates a new mock instance.
func NewMockgithubCLI(ctrl *gomock.Controller) *MockgithubCLI {
	mock := &MockgithubCLI{ctrl: ctrl}
	mock.recorder = &MockgithubCLIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgithubCLI) EXPECT() *MockgithubCLIMockRecorder {
	return m.recorder
}

// CreateEnvironmentIfNotExist mocks base method.
func (m *MockgithubCLI) CreateEnvironmentIfNotExist(ctx context.Context, repoName, envName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentIfNotExist", ctx, repoName, envName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironmentIfNotExist indicates an expected call of CreateEnvironmentIfNotExist.
func (mr *MockgithubCLIMockRecorder) CreateEnvironmentIfNotExist(ctx, repoName, envName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentIfNotExist", reflect.TypeOf((*MockgithubCLI)(nil).CreateEnvironmentIfNotExist), ctx, repoName, envName)
}

// GetAuthStatus mocks base method.
func (m *MockgithubCLI) GetAuthStatus(ctx context.Context, hostname string) (github.AuthStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthStatus", ctx, hostname)
	ret0, _ := ret[0].(github.AuthStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthStatus indicates an expected call of GetAuthStatus.
func (mr *MockgithubCLIMockRecorder) GetAuthStatus(ctx, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthStatus", reflect.TypeOf((*MockgithubCLI)(nil).GetAuthStatus), ctx, hostname)
}

// Login mocks base method.
func (m *MockgithubCLI) Login(ctx context.Context, hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockgithubCLIMockRecorder) Login(ctx, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockgithubCLI)(nil).Login), ctx, hostname)
}

// SetVariable mocks base method.
func (m *MockgithubCLI) SetVariable(ctx context.Context, repoSlug, name, value string, options *github.SetVariableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVariable", ctx, repoSlug, name, value, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVariable indicates an expected call of SetVariable.
func (mr *MockgithubCLIMockRecorder) SetVariable(ctx, repoSlug, name, value, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVariable", reflect.TypeOf((*MockgithubCLI)(nil).SetVariable), ctx, repoSlug, name, value, options)
}

// MockresourceService is a mock of resourceService interface.
type MockresourceService struct {
	ctrl     *gomock.Controller
	recorder *MockresourceServiceMockRecorder
	isgomock struct{}
}

// MockresourceServiceMockRecorder is the mock recorder for MockresourceService.
type MockresourceServiceMockRecorder struct {
	mock *MockresourceService
}

// NewMockresourceService creates a new mock instance.
func NewMockresourceService(ctrl *gomock.Controller) *MockresourceService {
	mock := &MockresourceService{ctrl: ctrl}
	mock.recorder = &MockresourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourceService) EXPECT() *MockresourceServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockresourceService) CreateOrUpdate(ctx context.Context, resourceGroupName string, parameters armresources.ResourceGroup, options *armresources.ResourceGroupsClientCreateOrUpdateOptions) (armresources.ResourceGroupsClientCreateOrUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, parameters, options)
	ret0, _ := ret[0].(armresources.ResourceGroupsClientCreateOrUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockresourceServiceMockRecorder) CreateOrUpdate(ctx, resourceGroupName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockresourceService)(nil).CreateOrUpdate), ctx, resourceGroupName, parameters, options)
}

// MockazdMSIService is a mock of azdMSIService interface.
type MockazdMSIService struct {
	ctrl     *gomock.Controller
	recorder *MockazdMSIServiceMockRecorder
	isgomock struct{}
}

// MockazdMSIServiceMockRecorder is the mock recorder for MockazdMSIService.
type MockazdMSIServiceMockRecorder struct {
	mock *MockazdMSIService
}

// NewMockazdMSIService creates a new mock instance.
func NewMockazdMSIService(ctrl *gomock.Controller) *MockazdMSIService {
	mock := &MockazdMSIService{ctrl: ctrl}
	mock.recorder = &MockazdMSIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazdMSIService) EXPECT() *MockazdMSIServiceMockRecorder {
	return m.recorder
}

// ApplyFederatedCredentials mocks base method.
func (m *MockazdMSIService) ApplyFederatedCredentials(ctx context.Context, subscriptionId, msiResourceId string, federatedCredentials []armmsi.FederatedIdentityCredential) ([]armmsi.FederatedIdentityCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyFederatedCredentials", ctx, subscriptionId, msiResourceId, federatedCredentials)
	ret0, _ := ret[0].([]armmsi.FederatedIdentityCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyFederatedCredentials indicates an expected call of ApplyFederatedCredentials.
func (mr *MockazdMSIServiceMockRecorder) ApplyFederatedCredentials(ctx, subscriptionId, msiResourceId, federatedCredentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyFederatedCredentials", reflect.TypeOf((*MockazdMSIService)(nil).ApplyFederatedCredentials), ctx, subscriptionId, msiResourceId, federatedCredentials)
}

// CreateUserIdentity mocks base method.
func (m *MockazdMSIService) CreateUserIdentity(ctx context.Context, subscriptionId, resourceGroup, location, name string) (armmsi.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserIdentity", ctx, subscriptionId, resourceGroup, location, name)
	ret0, _ := ret[0].(armmsi.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserIdentity indicates an expected call of CreateUserIdentity.
func (mr *MockazdMSIServiceMockRecorder) CreateUserIdentity(ctx, subscriptionId, resourceGroup, location, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserIdentity", reflect.TypeOf((*MockazdMSIService)(nil).CreateUserIdentity), ctx, subscriptionId, resourceGroup, location, name)
}

// ListUserIdentities mocks base method.
func (m *MockazdMSIService) ListUserIdentities(ctx context.Context, subscriptionId string) ([]armmsi.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserIdentities", ctx, subscriptionId)
	ret0, _ := ret[0].([]armmsi.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserIdentities indicates an expected call of ListUserIdentities.
func (mr *MockazdMSIServiceMockRecorder) ListUserIdentities(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserIdentities", reflect.TypeOf((*MockazdMSIService)(nil).ListUserIdentities), ctx, subscriptionId)
}
