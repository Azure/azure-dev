// source: event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var models_pb = require('./models_pb.js');
goog.object.extend(proto, models_pb);
goog.exportSymbol('proto.azdext.EventMessage', null, global);
goog.exportSymbol('proto.azdext.EventMessage.MessageTypeCase', null, global);
goog.exportSymbol('proto.azdext.ExtensionReadyEvent', null, global);
goog.exportSymbol('proto.azdext.InvokeProjectHandler', null, global);
goog.exportSymbol('proto.azdext.InvokeServiceHandler', null, global);
goog.exportSymbol('proto.azdext.ProjectHandlerStatus', null, global);
goog.exportSymbol('proto.azdext.ServiceHandlerStatus', null, global);
goog.exportSymbol('proto.azdext.SubscribeProjectEvent', null, global);
goog.exportSymbol('proto.azdext.SubscribeServiceEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.EventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.azdext.EventMessage.oneofGroups_);
};
goog.inherits(proto.azdext.EventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.EventMessage.displayName = 'proto.azdext.EventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.ExtensionReadyEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.azdext.ExtensionReadyEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.ExtensionReadyEvent.displayName = 'proto.azdext.ExtensionReadyEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.SubscribeProjectEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.azdext.SubscribeProjectEvent.repeatedFields_, null);
};
goog.inherits(proto.azdext.SubscribeProjectEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.SubscribeProjectEvent.displayName = 'proto.azdext.SubscribeProjectEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.SubscribeServiceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.azdext.SubscribeServiceEvent.repeatedFields_, null);
};
goog.inherits(proto.azdext.SubscribeServiceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.SubscribeServiceEvent.displayName = 'proto.azdext.SubscribeServiceEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.InvokeProjectHandler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.azdext.InvokeProjectHandler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.InvokeProjectHandler.displayName = 'proto.azdext.InvokeProjectHandler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.InvokeServiceHandler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.azdext.InvokeServiceHandler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.InvokeServiceHandler.displayName = 'proto.azdext.InvokeServiceHandler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.ProjectHandlerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.azdext.ProjectHandlerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.ProjectHandlerStatus.displayName = 'proto.azdext.ProjectHandlerStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.azdext.ServiceHandlerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.azdext.ServiceHandlerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.azdext.ServiceHandlerStatus.displayName = 'proto.azdext.ServiceHandlerStatus';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.azdext.EventMessage.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.azdext.EventMessage.MessageTypeCase = {
  MESSAGE_TYPE_NOT_SET: 0,
  SUBSCRIBE_PROJECT_EVENT: 1,
  INVOKE_PROJECT_HANDLER: 2,
  PROJECT_HANDLER_STATUS: 3,
  SUBSCRIBE_SERVICE_EVENT: 4,
  INVOKE_SERVICE_HANDLER: 5,
  SERVICE_HANDLER_STATUS: 6,
  EXTENSION_READY_EVENT: 7
};

/**
 * @return {proto.azdext.EventMessage.MessageTypeCase}
 */
proto.azdext.EventMessage.prototype.getMessageTypeCase = function() {
  return /** @type {proto.azdext.EventMessage.MessageTypeCase} */(jspb.Message.computeOneofCase(this, proto.azdext.EventMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.EventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.EventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.EventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.EventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
subscribeProjectEvent: (f = msg.getSubscribeProjectEvent()) && proto.azdext.SubscribeProjectEvent.toObject(includeInstance, f),
invokeProjectHandler: (f = msg.getInvokeProjectHandler()) && proto.azdext.InvokeProjectHandler.toObject(includeInstance, f),
projectHandlerStatus: (f = msg.getProjectHandlerStatus()) && proto.azdext.ProjectHandlerStatus.toObject(includeInstance, f),
subscribeServiceEvent: (f = msg.getSubscribeServiceEvent()) && proto.azdext.SubscribeServiceEvent.toObject(includeInstance, f),
invokeServiceHandler: (f = msg.getInvokeServiceHandler()) && proto.azdext.InvokeServiceHandler.toObject(includeInstance, f),
serviceHandlerStatus: (f = msg.getServiceHandlerStatus()) && proto.azdext.ServiceHandlerStatus.toObject(includeInstance, f),
extensionReadyEvent: (f = msg.getExtensionReadyEvent()) && proto.azdext.ExtensionReadyEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.EventMessage}
 */
proto.azdext.EventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.EventMessage;
  return proto.azdext.EventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.EventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.EventMessage}
 */
proto.azdext.EventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.azdext.SubscribeProjectEvent;
      reader.readMessage(value,proto.azdext.SubscribeProjectEvent.deserializeBinaryFromReader);
      msg.setSubscribeProjectEvent(value);
      break;
    case 2:
      var value = new proto.azdext.InvokeProjectHandler;
      reader.readMessage(value,proto.azdext.InvokeProjectHandler.deserializeBinaryFromReader);
      msg.setInvokeProjectHandler(value);
      break;
    case 3:
      var value = new proto.azdext.ProjectHandlerStatus;
      reader.readMessage(value,proto.azdext.ProjectHandlerStatus.deserializeBinaryFromReader);
      msg.setProjectHandlerStatus(value);
      break;
    case 4:
      var value = new proto.azdext.SubscribeServiceEvent;
      reader.readMessage(value,proto.azdext.SubscribeServiceEvent.deserializeBinaryFromReader);
      msg.setSubscribeServiceEvent(value);
      break;
    case 5:
      var value = new proto.azdext.InvokeServiceHandler;
      reader.readMessage(value,proto.azdext.InvokeServiceHandler.deserializeBinaryFromReader);
      msg.setInvokeServiceHandler(value);
      break;
    case 6:
      var value = new proto.azdext.ServiceHandlerStatus;
      reader.readMessage(value,proto.azdext.ServiceHandlerStatus.deserializeBinaryFromReader);
      msg.setServiceHandlerStatus(value);
      break;
    case 7:
      var value = new proto.azdext.ExtensionReadyEvent;
      reader.readMessage(value,proto.azdext.ExtensionReadyEvent.deserializeBinaryFromReader);
      msg.setExtensionReadyEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.EventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.EventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.EventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.EventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscribeProjectEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.azdext.SubscribeProjectEvent.serializeBinaryToWriter
    );
  }
  f = message.getInvokeProjectHandler();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.azdext.InvokeProjectHandler.serializeBinaryToWriter
    );
  }
  f = message.getProjectHandlerStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.azdext.ProjectHandlerStatus.serializeBinaryToWriter
    );
  }
  f = message.getSubscribeServiceEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.azdext.SubscribeServiceEvent.serializeBinaryToWriter
    );
  }
  f = message.getInvokeServiceHandler();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.azdext.InvokeServiceHandler.serializeBinaryToWriter
    );
  }
  f = message.getServiceHandlerStatus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.azdext.ServiceHandlerStatus.serializeBinaryToWriter
    );
  }
  f = message.getExtensionReadyEvent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.azdext.ExtensionReadyEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscribeProjectEvent subscribe_project_event = 1;
 * @return {?proto.azdext.SubscribeProjectEvent}
 */
proto.azdext.EventMessage.prototype.getSubscribeProjectEvent = function() {
  return /** @type{?proto.azdext.SubscribeProjectEvent} */ (
    jspb.Message.getWrapperField(this, proto.azdext.SubscribeProjectEvent, 1));
};


/**
 * @param {?proto.azdext.SubscribeProjectEvent|undefined} value
 * @return {!proto.azdext.EventMessage} returns this
*/
proto.azdext.EventMessage.prototype.setSubscribeProjectEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.azdext.EventMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.EventMessage} returns this
 */
proto.azdext.EventMessage.prototype.clearSubscribeProjectEvent = function() {
  return this.setSubscribeProjectEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.EventMessage.prototype.hasSubscribeProjectEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InvokeProjectHandler invoke_project_handler = 2;
 * @return {?proto.azdext.InvokeProjectHandler}
 */
proto.azdext.EventMessage.prototype.getInvokeProjectHandler = function() {
  return /** @type{?proto.azdext.InvokeProjectHandler} */ (
    jspb.Message.getWrapperField(this, proto.azdext.InvokeProjectHandler, 2));
};


/**
 * @param {?proto.azdext.InvokeProjectHandler|undefined} value
 * @return {!proto.azdext.EventMessage} returns this
*/
proto.azdext.EventMessage.prototype.setInvokeProjectHandler = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.azdext.EventMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.EventMessage} returns this
 */
proto.azdext.EventMessage.prototype.clearInvokeProjectHandler = function() {
  return this.setInvokeProjectHandler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.EventMessage.prototype.hasInvokeProjectHandler = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProjectHandlerStatus project_handler_status = 3;
 * @return {?proto.azdext.ProjectHandlerStatus}
 */
proto.azdext.EventMessage.prototype.getProjectHandlerStatus = function() {
  return /** @type{?proto.azdext.ProjectHandlerStatus} */ (
    jspb.Message.getWrapperField(this, proto.azdext.ProjectHandlerStatus, 3));
};


/**
 * @param {?proto.azdext.ProjectHandlerStatus|undefined} value
 * @return {!proto.azdext.EventMessage} returns this
*/
proto.azdext.EventMessage.prototype.setProjectHandlerStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.azdext.EventMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.EventMessage} returns this
 */
proto.azdext.EventMessage.prototype.clearProjectHandlerStatus = function() {
  return this.setProjectHandlerStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.EventMessage.prototype.hasProjectHandlerStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SubscribeServiceEvent subscribe_service_event = 4;
 * @return {?proto.azdext.SubscribeServiceEvent}
 */
proto.azdext.EventMessage.prototype.getSubscribeServiceEvent = function() {
  return /** @type{?proto.azdext.SubscribeServiceEvent} */ (
    jspb.Message.getWrapperField(this, proto.azdext.SubscribeServiceEvent, 4));
};


/**
 * @param {?proto.azdext.SubscribeServiceEvent|undefined} value
 * @return {!proto.azdext.EventMessage} returns this
*/
proto.azdext.EventMessage.prototype.setSubscribeServiceEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.azdext.EventMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.EventMessage} returns this
 */
proto.azdext.EventMessage.prototype.clearSubscribeServiceEvent = function() {
  return this.setSubscribeServiceEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.EventMessage.prototype.hasSubscribeServiceEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InvokeServiceHandler invoke_service_handler = 5;
 * @return {?proto.azdext.InvokeServiceHandler}
 */
proto.azdext.EventMessage.prototype.getInvokeServiceHandler = function() {
  return /** @type{?proto.azdext.InvokeServiceHandler} */ (
    jspb.Message.getWrapperField(this, proto.azdext.InvokeServiceHandler, 5));
};


/**
 * @param {?proto.azdext.InvokeServiceHandler|undefined} value
 * @return {!proto.azdext.EventMessage} returns this
*/
proto.azdext.EventMessage.prototype.setInvokeServiceHandler = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.azdext.EventMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.EventMessage} returns this
 */
proto.azdext.EventMessage.prototype.clearInvokeServiceHandler = function() {
  return this.setInvokeServiceHandler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.EventMessage.prototype.hasInvokeServiceHandler = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ServiceHandlerStatus service_handler_status = 6;
 * @return {?proto.azdext.ServiceHandlerStatus}
 */
proto.azdext.EventMessage.prototype.getServiceHandlerStatus = function() {
  return /** @type{?proto.azdext.ServiceHandlerStatus} */ (
    jspb.Message.getWrapperField(this, proto.azdext.ServiceHandlerStatus, 6));
};


/**
 * @param {?proto.azdext.ServiceHandlerStatus|undefined} value
 * @return {!proto.azdext.EventMessage} returns this
*/
proto.azdext.EventMessage.prototype.setServiceHandlerStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.azdext.EventMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.EventMessage} returns this
 */
proto.azdext.EventMessage.prototype.clearServiceHandlerStatus = function() {
  return this.setServiceHandlerStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.EventMessage.prototype.hasServiceHandlerStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ExtensionReadyEvent extension_ready_event = 7;
 * @return {?proto.azdext.ExtensionReadyEvent}
 */
proto.azdext.EventMessage.prototype.getExtensionReadyEvent = function() {
  return /** @type{?proto.azdext.ExtensionReadyEvent} */ (
    jspb.Message.getWrapperField(this, proto.azdext.ExtensionReadyEvent, 7));
};


/**
 * @param {?proto.azdext.ExtensionReadyEvent|undefined} value
 * @return {!proto.azdext.EventMessage} returns this
*/
proto.azdext.EventMessage.prototype.setExtensionReadyEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.azdext.EventMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.EventMessage} returns this
 */
proto.azdext.EventMessage.prototype.clearExtensionReadyEvent = function() {
  return this.setExtensionReadyEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.EventMessage.prototype.hasExtensionReadyEvent = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.ExtensionReadyEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.ExtensionReadyEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.ExtensionReadyEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.ExtensionReadyEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
status: jspb.Message.getFieldWithDefault(msg, 1, ""),
message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.ExtensionReadyEvent}
 */
proto.azdext.ExtensionReadyEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.ExtensionReadyEvent;
  return proto.azdext.ExtensionReadyEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.ExtensionReadyEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.ExtensionReadyEvent}
 */
proto.azdext.ExtensionReadyEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.ExtensionReadyEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.ExtensionReadyEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.ExtensionReadyEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.ExtensionReadyEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.azdext.ExtensionReadyEvent.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ExtensionReadyEvent} returns this
 */
proto.azdext.ExtensionReadyEvent.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.azdext.ExtensionReadyEvent.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ExtensionReadyEvent} returns this
 */
proto.azdext.ExtensionReadyEvent.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.azdext.SubscribeProjectEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.SubscribeProjectEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.SubscribeProjectEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.SubscribeProjectEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.SubscribeProjectEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
eventNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.SubscribeProjectEvent}
 */
proto.azdext.SubscribeProjectEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.SubscribeProjectEvent;
  return proto.azdext.SubscribeProjectEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.SubscribeProjectEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.SubscribeProjectEvent}
 */
proto.azdext.SubscribeProjectEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.SubscribeProjectEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.SubscribeProjectEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.SubscribeProjectEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.SubscribeProjectEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string event_names = 1;
 * @return {!Array<string>}
 */
proto.azdext.SubscribeProjectEvent.prototype.getEventNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.azdext.SubscribeProjectEvent} returns this
 */
proto.azdext.SubscribeProjectEvent.prototype.setEventNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.azdext.SubscribeProjectEvent} returns this
 */
proto.azdext.SubscribeProjectEvent.prototype.addEventNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.azdext.SubscribeProjectEvent} returns this
 */
proto.azdext.SubscribeProjectEvent.prototype.clearEventNamesList = function() {
  return this.setEventNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.azdext.SubscribeServiceEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.SubscribeServiceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.SubscribeServiceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.SubscribeServiceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.SubscribeServiceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
eventNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
language: jspb.Message.getFieldWithDefault(msg, 2, ""),
host: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.SubscribeServiceEvent}
 */
proto.azdext.SubscribeServiceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.SubscribeServiceEvent;
  return proto.azdext.SubscribeServiceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.SubscribeServiceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.SubscribeServiceEvent}
 */
proto.azdext.SubscribeServiceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventNames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.SubscribeServiceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.SubscribeServiceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.SubscribeServiceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.SubscribeServiceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated string event_names = 1;
 * @return {!Array<string>}
 */
proto.azdext.SubscribeServiceEvent.prototype.getEventNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.azdext.SubscribeServiceEvent} returns this
 */
proto.azdext.SubscribeServiceEvent.prototype.setEventNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.azdext.SubscribeServiceEvent} returns this
 */
proto.azdext.SubscribeServiceEvent.prototype.addEventNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.azdext.SubscribeServiceEvent} returns this
 */
proto.azdext.SubscribeServiceEvent.prototype.clearEventNamesList = function() {
  return this.setEventNamesList([]);
};


/**
 * optional string language = 2;
 * @return {string}
 */
proto.azdext.SubscribeServiceEvent.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.SubscribeServiceEvent} returns this
 */
proto.azdext.SubscribeServiceEvent.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string host = 3;
 * @return {string}
 */
proto.azdext.SubscribeServiceEvent.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.SubscribeServiceEvent} returns this
 */
proto.azdext.SubscribeServiceEvent.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.InvokeProjectHandler.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.InvokeProjectHandler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.InvokeProjectHandler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.InvokeProjectHandler.toObject = function(includeInstance, msg) {
  var f, obj = {
eventName: jspb.Message.getFieldWithDefault(msg, 1, ""),
project: (f = msg.getProject()) && models_pb.ProjectConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.InvokeProjectHandler}
 */
proto.azdext.InvokeProjectHandler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.InvokeProjectHandler;
  return proto.azdext.InvokeProjectHandler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.InvokeProjectHandler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.InvokeProjectHandler}
 */
proto.azdext.InvokeProjectHandler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 2:
      var value = new models_pb.ProjectConfig;
      reader.readMessage(value,models_pb.ProjectConfig.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.InvokeProjectHandler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.InvokeProjectHandler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.InvokeProjectHandler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.InvokeProjectHandler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      models_pb.ProjectConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_name = 1;
 * @return {string}
 */
proto.azdext.InvokeProjectHandler.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.InvokeProjectHandler} returns this
 */
proto.azdext.InvokeProjectHandler.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProjectConfig project = 2;
 * @return {?proto.azdext.ProjectConfig}
 */
proto.azdext.InvokeProjectHandler.prototype.getProject = function() {
  return /** @type{?proto.azdext.ProjectConfig} */ (
    jspb.Message.getWrapperField(this, models_pb.ProjectConfig, 2));
};


/**
 * @param {?proto.azdext.ProjectConfig|undefined} value
 * @return {!proto.azdext.InvokeProjectHandler} returns this
*/
proto.azdext.InvokeProjectHandler.prototype.setProject = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.InvokeProjectHandler} returns this
 */
proto.azdext.InvokeProjectHandler.prototype.clearProject = function() {
  return this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.InvokeProjectHandler.prototype.hasProject = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.InvokeServiceHandler.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.InvokeServiceHandler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.InvokeServiceHandler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.InvokeServiceHandler.toObject = function(includeInstance, msg) {
  var f, obj = {
eventName: jspb.Message.getFieldWithDefault(msg, 1, ""),
project: (f = msg.getProject()) && models_pb.ProjectConfig.toObject(includeInstance, f),
service: (f = msg.getService()) && models_pb.ServiceConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.InvokeServiceHandler}
 */
proto.azdext.InvokeServiceHandler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.InvokeServiceHandler;
  return proto.azdext.InvokeServiceHandler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.InvokeServiceHandler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.InvokeServiceHandler}
 */
proto.azdext.InvokeServiceHandler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 2:
      var value = new models_pb.ProjectConfig;
      reader.readMessage(value,models_pb.ProjectConfig.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    case 3:
      var value = new models_pb.ServiceConfig;
      reader.readMessage(value,models_pb.ServiceConfig.deserializeBinaryFromReader);
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.InvokeServiceHandler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.InvokeServiceHandler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.InvokeServiceHandler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.InvokeServiceHandler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      models_pb.ProjectConfig.serializeBinaryToWriter
    );
  }
  f = message.getService();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      models_pb.ServiceConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string event_name = 1;
 * @return {string}
 */
proto.azdext.InvokeServiceHandler.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.InvokeServiceHandler} returns this
 */
proto.azdext.InvokeServiceHandler.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProjectConfig project = 2;
 * @return {?proto.azdext.ProjectConfig}
 */
proto.azdext.InvokeServiceHandler.prototype.getProject = function() {
  return /** @type{?proto.azdext.ProjectConfig} */ (
    jspb.Message.getWrapperField(this, models_pb.ProjectConfig, 2));
};


/**
 * @param {?proto.azdext.ProjectConfig|undefined} value
 * @return {!proto.azdext.InvokeServiceHandler} returns this
*/
proto.azdext.InvokeServiceHandler.prototype.setProject = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.InvokeServiceHandler} returns this
 */
proto.azdext.InvokeServiceHandler.prototype.clearProject = function() {
  return this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.InvokeServiceHandler.prototype.hasProject = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ServiceConfig service = 3;
 * @return {?proto.azdext.ServiceConfig}
 */
proto.azdext.InvokeServiceHandler.prototype.getService = function() {
  return /** @type{?proto.azdext.ServiceConfig} */ (
    jspb.Message.getWrapperField(this, models_pb.ServiceConfig, 3));
};


/**
 * @param {?proto.azdext.ServiceConfig|undefined} value
 * @return {!proto.azdext.InvokeServiceHandler} returns this
*/
proto.azdext.InvokeServiceHandler.prototype.setService = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.azdext.InvokeServiceHandler} returns this
 */
proto.azdext.InvokeServiceHandler.prototype.clearService = function() {
  return this.setService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.azdext.InvokeServiceHandler.prototype.hasService = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.ProjectHandlerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.ProjectHandlerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.ProjectHandlerStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.ProjectHandlerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
eventName: jspb.Message.getFieldWithDefault(msg, 1, ""),
status: jspb.Message.getFieldWithDefault(msg, 2, ""),
message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.ProjectHandlerStatus}
 */
proto.azdext.ProjectHandlerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.ProjectHandlerStatus;
  return proto.azdext.ProjectHandlerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.ProjectHandlerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.ProjectHandlerStatus}
 */
proto.azdext.ProjectHandlerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.ProjectHandlerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.ProjectHandlerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.ProjectHandlerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.ProjectHandlerStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string event_name = 1;
 * @return {string}
 */
proto.azdext.ProjectHandlerStatus.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ProjectHandlerStatus} returns this
 */
proto.azdext.ProjectHandlerStatus.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.azdext.ProjectHandlerStatus.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ProjectHandlerStatus} returns this
 */
proto.azdext.ProjectHandlerStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.azdext.ProjectHandlerStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ProjectHandlerStatus} returns this
 */
proto.azdext.ProjectHandlerStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.azdext.ServiceHandlerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.azdext.ServiceHandlerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.azdext.ServiceHandlerStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.ServiceHandlerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
eventName: jspb.Message.getFieldWithDefault(msg, 1, ""),
serviceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
status: jspb.Message.getFieldWithDefault(msg, 3, ""),
message: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.azdext.ServiceHandlerStatus}
 */
proto.azdext.ServiceHandlerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.azdext.ServiceHandlerStatus;
  return proto.azdext.ServiceHandlerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.azdext.ServiceHandlerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.azdext.ServiceHandlerStatus}
 */
proto.azdext.ServiceHandlerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.azdext.ServiceHandlerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.azdext.ServiceHandlerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.azdext.ServiceHandlerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.azdext.ServiceHandlerStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string event_name = 1;
 * @return {string}
 */
proto.azdext.ServiceHandlerStatus.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ServiceHandlerStatus} returns this
 */
proto.azdext.ServiceHandlerStatus.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.azdext.ServiceHandlerStatus.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ServiceHandlerStatus} returns this
 */
proto.azdext.ServiceHandlerStatus.prototype.setServiceName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.azdext.ServiceHandlerStatus.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ServiceHandlerStatus} returns this
 */
proto.azdext.ServiceHandlerStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.azdext.ServiceHandlerStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.azdext.ServiceHandlerStatus} returns this
 */
proto.azdext.ServiceHandlerStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.azdext);
