targetScope = 'subscription'

@minLength(1)
@maxLength(64)
@description('Name of the environment that can be used as part of naming resource convention, the name of the resource group for your application will use this name, prefixed with rg-')
param environmentName string

@minLength(1)
@description('The location used for all deployed resources')
param location string

@description('Id of the user or app to assign application roles')
param principalId string = ''

param administrator_login string
@secure()
param administratorLoginPassword string
param parameter string
@metadata({azd: {
  type: 'resourceGroup'
  config: {}
  }
})
param rg_scope string

var tags = {
  'azd-env-name': environmentName
}

resource rg 'Microsoft.Resources/resourceGroups@2022-09-01' = {
  name: 'rg-${environmentName}'
  location: location
  tags: tags
}

module ai 'ai/aspire.hosting.azure.bicep.appinsights.bicep' = {
  name: 'ai'
  scope: rg
  params: {
    appInsightsName: 'ai'
    location: location
    logAnalyticsWorkspaceId: ''
  }
}
module aspire_owned_env 'aspire-owned-env/aspire-owned-env.bicep' = {
  name: 'aspire-owned-env'
  scope: resourceGroup(rg_scope)
  params: {
    location: location
    userPrincipalId: principalId
  }
}
module bicepModule 'bicepModule/bicepModule.bicep' = {
  name: 'bicepModule'
  scope: resourceGroup(rg_scope)
  params: {
    host: 'frontend.internal.${aspire-owned-env.outputs.AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN}'
    location: location
    test: parameter
    url: 'http://frontend.internal.${aspire-owned-env.outputs.AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN}'
    values: ['one','two']
  }
}
module postgres_2 'postgres-2/aspire.hosting.azure.bicep.postgres.bicep' = {
  name: 'postgres-2'
  scope: rg
  params: {
    administratorLogin: administrator_login
    administratorLoginPassword: administratorLoginPassword
    containerAppEnvironmentId: ''
    containerAppEnvironmentName: ''
    databases: ['db2']
    keyVaultName: ''
    location: location
    serverName: 'postgres-2'
  }
}
module s_b 's-b/aspire.hosting.azure.bicep.servicebus.bicep' = {
  name: 's-b'
  scope: rg
  params: {
    location: location
    principalId: ''
    principalType: ''
    queues: ['queue1']
    serviceBusNamespaceName: 's-b'
    topics: [{name:'topic1',subscriptions:['subscription1','subscription2']},{name:'topic2',subscriptions:['subscription1']}]
  }
}
module sql 'sql/aspire.hosting.azure.bicep.sql.bicep' = {
  name: 'sql'
  scope: rg
  params: {
    databases: ['db']
    location: location
    principalId: ''
    principalName: ''
    serverName: 'sql'
  }
}
output AI_APPINSIGHTSCONNECTIONSTRING string = ai.outputs.appInsightsConnectionString
output ASPIRE_OWNED_ENV_AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN string = aspire_owned_env.outputs.AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN
output ASPIRE_OWNED_ENV_AZURE_CONTAINER_REGISTRY_ENDPOINT string = aspire_owned_env.outputs.AZURE_CONTAINER_REGISTRY_ENDPOINT
output ASPIRE_OWNED_ENV_TEST string = aspire_owned_env.outputs.test
output ASPIRE_OWNED_ENV_VAL0 string = aspire_owned_env.outputs.val0
output AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN string = aspire_owned_env.outputs.AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = aspire_owned_env.outputs.AZURE_CONTAINER_REGISTRY_ENDPOINT
output S_B_SERVICEBUSENDPOINT string = s_b.outputs.serviceBusEndpoint
output SQL_SQLSERVERFQDN string = sql.outputs.sqlServerFqdn

