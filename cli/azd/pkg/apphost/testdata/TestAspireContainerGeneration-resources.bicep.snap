@description('The location used for all deployed resources')
param location string = resourceGroup().location

@description('Tags that will be applied to all resources')
param tags object = {}

var resourceToken = uniqueString(resourceGroup().id)
@secure()
param my_sql_abstract_pas_sw_ord string
@secure()
param my_sql_abstract_password string
@secure()
param mysqlabstract_pas_sw_ord string
@secure()
param mysqlabstract_password string
@secure()
param noVolume_pas_sw_ord string
@secure()
param noVolume_password string

resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: 'mi-${resourceToken}'
  location: location
  tags: tags
}

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {
  name: 'law-${resourceToken}'
  location: location
  properties: {
    sku: {
      name: 'PerGB2018'
    }
  }
  tags: tags
}

resource storageVolume 'Microsoft.Storage/storageAccounts@2022-05-01' = {
  name: 'vol${resourceToken}'
  location: location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }
  properties: {
    largeFileSharesState: 'Enabled'
  }
}

resource storageVolumeFileService 'Microsoft.Storage/storageAccounts/fileServices@2022-05-01' = {
  parent: storageVolume
  name: 'default'
}

resource my_sql_abstract_volume_twoFileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-05-01' = {
  parent: storageVolumeFileService
  name: '${toLower('my-sql-abstract')}-${toLower('volume-two')}'
  properties: {
    shareQuota: 1024
    enabledProtocols: 'SMB'
  }
}
resource mysqlabstract_volumeOneFileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-05-01' = {
  parent: storageVolumeFileService
  name: '${toLower('mysqlabstract')}-${toLower('volumeOne')}'
  properties: {
    shareQuota: 1024
    enabledProtocols: 'SMB'
  }
}

resource containerAppEnvironment 'Microsoft.App/managedEnvironments@2023-05-01' = {
  name: 'cae-${resourceToken}'
  location: location
  properties: {
    appLogsConfiguration: {
      destination: 'log-analytics'
      logAnalyticsConfiguration: {
        customerId: logAnalyticsWorkspace.properties.customerId
        sharedKey: logAnalyticsWorkspace.listKeys().primarySharedKey
      }
    }
  }
  tags: tags
}

resource my_sql_abstract_volume_twoStore 'Microsoft.App/managedEnvironments/storages@2023-05-01' = {
  parent: containerAppEnvironment
  name: '${toLower('my-sql-abstract')}-${toLower('volume-two')}'
  properties: {
    azureFile: {
      shareName: '${toLower('my-sql-abstract')}-${toLower('volume-two')}'
      accountName: storageVolume.name
      accountKey: storageVolume.listKeys().keys[0].value
      accessMode: 'ReadOnly'
    }
  }
}

resource mysqlabstract_volumeOneStore 'Microsoft.App/managedEnvironments/storages@2023-05-01' = {
  parent: containerAppEnvironment
  name: '${toLower('mysqlabstract')}-${toLower('volumeOne')}'
  properties: {
    azureFile: {
      shareName: '${toLower('mysqlabstract')}-${toLower('volumeOne')}'
      accountName: storageVolume.name
      accountKey: storageVolume.listKeys().keys[0].value
      accessMode: 'ReadWrite'
    }
  }
}

resource mySqlAbstract 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: 'my-sql-abstract'
  location: location
  dependsOn: [storageVolume]
  properties: {
    environmentId: containerAppEnvironment.id
    configuration: {
      activeRevisionsMode: 'Single'
      ingress: {
        external: false
        targetPort: 3306
        transport: 'tcp'
      }
      secrets: [
        {
          name: 'mysql-root-password'
          value: my_sql_abstract_password
        }
        {
          name: 'specialchar'
          value: my_sql_abstract_pas_sw_ord
        }
      ]
    }
    template: {
      volumes: [
        {
          name: '${toLower('my-sql-abstract')}-${toLower('volume-two')}'
          storageType: 'AzureFile'
          storageName: my_sql_abstract_volume_twoStore.name
        }
      ]
      containers: [
        {
          image: 'mysql:latest'
          name: 'my-sql-abstract'
          env: [
            {
              name: 'MYSQL_ROOT_PASSWORD'
              secretRef: 'mysql-root-password'
            }
            {
              name: 'SpecialChar'
              secretRef: 'specialchar'
            }
          ]
          volumeMounts: [
            {
              volumeName: '${toLower('my-sql-abstract')}-${toLower('volume-two')}'
              mountPath: '/data/db'
            }
          ]
        }
      ]
      scale: {
        minReplicas: 1
      }
    }
  }
  tags: union(tags, {'aspire-resource-name': 'my-sql-abstract'})
}

resource mysqlabstract 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: 'mysqlabstract'
  location: location
  dependsOn: [storageVolume]
  properties: {
    environmentId: containerAppEnvironment.id
    configuration: {
      activeRevisionsMode: 'Single'
      ingress: {
        external: false
        targetPort: 3306
        transport: 'tcp'
      }
      secrets: [
        {
          name: 'mysql-root-password'
          value: mysqlabstract_password
        }
        {
          name: 'specialchar'
          value: mysqlabstract_pas_sw_ord
        }
      ]
    }
    template: {
      volumes: [
        {
          name: '${toLower('mysqlabstract')}-${toLower('volumeOne')}'
          storageType: 'AzureFile'
          storageName: mysqlabstract_volumeOneStore.name
        }
      ]
      containers: [
        {
          image: 'mysql:latest'
          name: 'mysqlabstract'
          env: [
            {
              name: 'MYSQL_ROOT_PASSWORD'
              secretRef: 'mysql-root-password'
            }
            {
              name: 'SpecialChar'
              secretRef: 'specialchar'
            }
          ]
          volumeMounts: [
            {
              volumeName: '${toLower('mysqlabstract')}-${toLower('volumeOne')}'
              mountPath: '/data/db'
            }
          ]
        }
      ]
      scale: {
        minReplicas: 1
      }
    }
  }
  tags: union(tags, {'aspire-resource-name': 'mysqlabstract'})
}

resource noVolume 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: 'novolume'
  location: location
  properties: {
    environmentId: containerAppEnvironment.id
    configuration: {
      activeRevisionsMode: 'Single'
      ingress: {
        external: false
        targetPort: 3306
        transport: 'tcp'
      }
      secrets: [
        {
          name: 'mysql-root-password'
          value: noVolume_password
        }
        {
          name: 'specialchar'
          value: noVolume_pas_sw_ord
        }
      ]
    }
    template: {
      containers: [
        {
          image: 'mysql:latest'
          name: 'noVolume'
          env: [
            {
              name: 'MYSQL_ROOT_PASSWORD'
              secretRef: 'mysql-root-password'
            }
            {
              name: 'SpecialChar'
              secretRef: 'specialchar'
            }
          ]
        }
      ]
      scale: {
        minReplicas: 1
      }
    }
  }
  tags: union(tags, {'aspire-resource-name': 'noVolume'})
}

output MANAGED_IDENTITY_CLIENT_ID string = managedIdentity.properties.clientId
output MANAGED_IDENTITY_NAME string = managedIdentity.name
output MANAGED_IDENTITY_PRINCIPAL_ID string = managedIdentity.properties.principalId
output AZURE_LOG_ANALYTICS_WORKSPACE_NAME string = logAnalyticsWorkspace.name
output AZURE_LOG_ANALYTICS_WORKSPACE_ID string = logAnalyticsWorkspace.id
output AZURE_CONTAINER_APPS_ENVIRONMENT_ID string = containerAppEnvironment.id
output AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN string = containerAppEnvironment.properties.defaultDomain

