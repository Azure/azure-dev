// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: compose.proto

package azdext

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComposeService_ListResources_FullMethodName     = "/azdext.ComposeService/ListResources"
	ComposeService_GetResource_FullMethodName       = "/azdext.ComposeService/GetResource"
	ComposeService_ListResourceTypes_FullMethodName = "/azdext.ComposeService/ListResourceTypes"
	ComposeService_GetResourceType_FullMethodName   = "/azdext.ComposeService/GetResourceType"
	ComposeService_AddResource_FullMethodName       = "/azdext.ComposeService/AddResource"
)

// ComposeServiceClient is the client API for ComposeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComposeServiceClient interface {
	// ListResources retrieves all configured composability resources in the current project.
	ListResources(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	// GetResource retrieves the configuration of a specific named composability resource.
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	// ListResourceTypes retrieves all supported composability resource types.
	ListResourceTypes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListResourceTypesResponse, error)
	// GetResourceType retrieves the schema of a specific named composability resource type.
	GetResourceType(ctx context.Context, in *GetResourceTypeRequest, opts ...grpc.CallOption) (*GetResourceTypeResponse, error)
	// AddResource adds a new composability resource to the current project.
	AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*AddResourceResponse, error)
}

type composeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComposeServiceClient(cc grpc.ClientConnInterface) ComposeServiceClient {
	return &composeServiceClient{cc}
}

func (c *composeServiceClient) ListResources(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, ComposeService_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *composeServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, ComposeService_GetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *composeServiceClient) ListResourceTypes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListResourceTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourceTypesResponse)
	err := c.cc.Invoke(ctx, ComposeService_ListResourceTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *composeServiceClient) GetResourceType(ctx context.Context, in *GetResourceTypeRequest, opts ...grpc.CallOption) (*GetResourceTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceTypeResponse)
	err := c.cc.Invoke(ctx, ComposeService_GetResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *composeServiceClient) AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*AddResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResourceResponse)
	err := c.cc.Invoke(ctx, ComposeService_AddResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComposeServiceServer is the server API for ComposeService service.
// All implementations must embed UnimplementedComposeServiceServer
// for forward compatibility.
type ComposeServiceServer interface {
	// ListResources retrieves all configured composability resources in the current project.
	ListResources(context.Context, *EmptyRequest) (*ListResourcesResponse, error)
	// GetResource retrieves the configuration of a specific named composability resource.
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	// ListResourceTypes retrieves all supported composability resource types.
	ListResourceTypes(context.Context, *EmptyRequest) (*ListResourceTypesResponse, error)
	// GetResourceType retrieves the schema of a specific named composability resource type.
	GetResourceType(context.Context, *GetResourceTypeRequest) (*GetResourceTypeResponse, error)
	// AddResource adds a new composability resource to the current project.
	AddResource(context.Context, *AddResourceRequest) (*AddResourceResponse, error)
	mustEmbedUnimplementedComposeServiceServer()
}

// UnimplementedComposeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComposeServiceServer struct{}

func (UnimplementedComposeServiceServer) ListResources(context.Context, *EmptyRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedComposeServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedComposeServiceServer) ListResourceTypes(context.Context, *EmptyRequest) (*ListResourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceTypes not implemented")
}
func (UnimplementedComposeServiceServer) GetResourceType(context.Context, *GetResourceTypeRequest) (*GetResourceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceType not implemented")
}
func (UnimplementedComposeServiceServer) AddResource(context.Context, *AddResourceRequest) (*AddResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedComposeServiceServer) mustEmbedUnimplementedComposeServiceServer() {}
func (UnimplementedComposeServiceServer) testEmbeddedByValue()                        {}

// UnsafeComposeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComposeServiceServer will
// result in compilation errors.
type UnsafeComposeServiceServer interface {
	mustEmbedUnimplementedComposeServiceServer()
}

func RegisterComposeServiceServer(s grpc.ServiceRegistrar, srv ComposeServiceServer) {
	// If the following call pancis, it indicates UnimplementedComposeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComposeService_ServiceDesc, srv)
}

func _ComposeService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposeServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComposeService_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposeServiceServer).ListResources(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComposeService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposeServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComposeService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposeServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComposeService_ListResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposeServiceServer).ListResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComposeService_ListResourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposeServiceServer).ListResourceTypes(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComposeService_GetResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposeServiceServer).GetResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComposeService_GetResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposeServiceServer).GetResourceType(ctx, req.(*GetResourceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComposeService_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComposeServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComposeService_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComposeServiceServer).AddResource(ctx, req.(*AddResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComposeService_ServiceDesc is the grpc.ServiceDesc for ComposeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComposeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azdext.ComposeService",
	HandlerType: (*ComposeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResources",
			Handler:    _ComposeService_ListResources_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ComposeService_GetResource_Handler,
		},
		{
			MethodName: "ListResourceTypes",
			Handler:    _ComposeService_ListResourceTypes_Handler,
		},
		{
			MethodName: "GetResourceType",
			Handler:    _ComposeService_GetResourceType_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _ComposeService_AddResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compose.proto",
}
