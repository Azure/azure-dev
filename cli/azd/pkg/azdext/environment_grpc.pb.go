// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: environment.proto

package azdext

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvironmentService_GetCurrent_FullMethodName       = "/azdext.EnvironmentService/GetCurrent"
	EnvironmentService_List_FullMethodName             = "/azdext.EnvironmentService/List"
	EnvironmentService_Get_FullMethodName              = "/azdext.EnvironmentService/Get"
	EnvironmentService_Select_FullMethodName           = "/azdext.EnvironmentService/Select"
	EnvironmentService_GetValues_FullMethodName        = "/azdext.EnvironmentService/GetValues"
	EnvironmentService_GetValue_FullMethodName         = "/azdext.EnvironmentService/GetValue"
	EnvironmentService_SetValue_FullMethodName         = "/azdext.EnvironmentService/SetValue"
	EnvironmentService_GetConfig_FullMethodName        = "/azdext.EnvironmentService/GetConfig"
	EnvironmentService_GetConfigString_FullMethodName  = "/azdext.EnvironmentService/GetConfigString"
	EnvironmentService_GetConfigSection_FullMethodName = "/azdext.EnvironmentService/GetConfigSection"
	EnvironmentService_SetConfig_FullMethodName        = "/azdext.EnvironmentService/SetConfig"
	EnvironmentService_UnsetConfig_FullMethodName      = "/azdext.EnvironmentService/UnsetConfig"
)

// EnvironmentServiceClient is the client API for EnvironmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EnvironmentService defines methods for managing environments and their key-value pairs.
type EnvironmentServiceClient interface {
	// Gets the current environment.
	GetCurrent(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	// List retrieves all azd environments.
	List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error)
	// Get retrieves an environment by its name.
	Get(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	// Select sets the current environment to the specified environment.
	Select(ctx context.Context, in *SelectEnvironmentRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// GetValues retrieves all key-value pairs in the specified environment.
	GetValues(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*KeyValueListResponse, error)
	// GetValue retrieves the value of a specific key in the specified environment.
	GetValue(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*KeyValueResponse, error)
	// SetValue sets the value of a key in the specified environment.
	SetValue(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// GetConfig retrieves a config value by path
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// GetConfigString retrieves a config value by path and returns it as a string
	GetConfigString(ctx context.Context, in *GetConfigStringRequest, opts ...grpc.CallOption) (*GetConfigStringResponse, error)
	// GetConfigSection retrieves a config section by path
	GetConfigSection(ctx context.Context, in *GetConfigSectionRequest, opts ...grpc.CallOption) (*GetConfigSectionResponse, error)
	// SetConfig sets a config value at a given path
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// UnsetConfig removes a config value at a given path
	UnsetConfig(ctx context.Context, in *UnsetConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type environmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentServiceClient(cc grpc.ClientConnInterface) EnvironmentServiceClient {
	return &environmentServiceClient{cc}
}

func (c *environmentServiceClient) GetCurrent(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetCurrent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvironmentListResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) Get(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) Select(ctx context.Context, in *SelectEnvironmentRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_Select_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetValues(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*KeyValueListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyValueListResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetValue(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*KeyValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyValueResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) SetValue(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_SetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetConfigString(ctx context.Context, in *GetConfigStringRequest, opts ...grpc.CallOption) (*GetConfigStringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigStringResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetConfigString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) GetConfigSection(ctx context.Context, in *GetConfigSectionRequest, opts ...grpc.CallOption) (*GetConfigSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigSectionResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetConfigSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) UnsetConfig(ctx context.Context, in *UnsetConfigRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_UnsetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentServiceServer is the server API for EnvironmentService service.
// All implementations must embed UnimplementedEnvironmentServiceServer
// for forward compatibility.
//
// EnvironmentService defines methods for managing environments and their key-value pairs.
type EnvironmentServiceServer interface {
	// Gets the current environment.
	GetCurrent(context.Context, *EmptyRequest) (*EnvironmentResponse, error)
	// List retrieves all azd environments.
	List(context.Context, *EmptyRequest) (*EnvironmentListResponse, error)
	// Get retrieves an environment by its name.
	Get(context.Context, *GetEnvironmentRequest) (*EnvironmentResponse, error)
	// Select sets the current environment to the specified environment.
	Select(context.Context, *SelectEnvironmentRequest) (*EmptyResponse, error)
	// GetValues retrieves all key-value pairs in the specified environment.
	GetValues(context.Context, *GetEnvironmentRequest) (*KeyValueListResponse, error)
	// GetValue retrieves the value of a specific key in the specified environment.
	GetValue(context.Context, *GetEnvRequest) (*KeyValueResponse, error)
	// SetValue sets the value of a key in the specified environment.
	SetValue(context.Context, *SetEnvRequest) (*EmptyResponse, error)
	// GetConfig retrieves a config value by path
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// GetConfigString retrieves a config value by path and returns it as a string
	GetConfigString(context.Context, *GetConfigStringRequest) (*GetConfigStringResponse, error)
	// GetConfigSection retrieves a config section by path
	GetConfigSection(context.Context, *GetConfigSectionRequest) (*GetConfigSectionResponse, error)
	// SetConfig sets a config value at a given path
	SetConfig(context.Context, *SetConfigRequest) (*EmptyResponse, error)
	// UnsetConfig removes a config value at a given path
	UnsetConfig(context.Context, *UnsetConfigRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedEnvironmentServiceServer()
}

// UnimplementedEnvironmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvironmentServiceServer struct{}

func (UnimplementedEnvironmentServiceServer) GetCurrent(context.Context, *EmptyRequest) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrent not implemented")
}
func (UnimplementedEnvironmentServiceServer) List(context.Context, *EmptyRequest) (*EnvironmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEnvironmentServiceServer) Get(context.Context, *GetEnvironmentRequest) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEnvironmentServiceServer) Select(context.Context, *SelectEnvironmentRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetValues(context.Context, *GetEnvironmentRequest) (*KeyValueListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValues not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetValue(context.Context, *GetEnvRequest) (*KeyValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedEnvironmentServiceServer) SetValue(context.Context, *SetEnvRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetConfigString(context.Context, *GetConfigStringRequest) (*GetConfigStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigString not implemented")
}
func (UnimplementedEnvironmentServiceServer) GetConfigSection(context.Context, *GetConfigSectionRequest) (*GetConfigSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigSection not implemented")
}
func (UnimplementedEnvironmentServiceServer) SetConfig(context.Context, *SetConfigRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedEnvironmentServiceServer) UnsetConfig(context.Context, *UnsetConfigRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetConfig not implemented")
}
func (UnimplementedEnvironmentServiceServer) mustEmbedUnimplementedEnvironmentServiceServer() {}
func (UnimplementedEnvironmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeEnvironmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServiceServer will
// result in compilation errors.
type UnsafeEnvironmentServiceServer interface {
	mustEmbedUnimplementedEnvironmentServiceServer()
}

func RegisterEnvironmentServiceServer(s grpc.ServiceRegistrar, srv EnvironmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvironmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvironmentService_ServiceDesc, srv)
}

func _EnvironmentService_GetCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetCurrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetCurrent(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).List(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).Get(ctx, req.(*GetEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_Select_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).Select(ctx, req.(*SelectEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetValues(ctx, req.(*GetEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetValue(ctx, req.(*GetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_SetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).SetValue(ctx, req.(*SetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetConfigString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetConfigString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetConfigString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetConfigString(ctx, req.(*GetConfigStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_GetConfigSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetConfigSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetConfigSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetConfigSection(ctx, req.(*GetConfigSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_UnsetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).UnsetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_UnsetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).UnsetConfig(ctx, req.(*UnsetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentService_ServiceDesc is the grpc.ServiceDesc for EnvironmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azdext.EnvironmentService",
	HandlerType: (*EnvironmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrent",
			Handler:    _EnvironmentService_GetCurrent_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EnvironmentService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EnvironmentService_Get_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _EnvironmentService_Select_Handler,
		},
		{
			MethodName: "GetValues",
			Handler:    _EnvironmentService_GetValues_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _EnvironmentService_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _EnvironmentService_SetValue_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _EnvironmentService_GetConfig_Handler,
		},
		{
			MethodName: "GetConfigString",
			Handler:    _EnvironmentService_GetConfigString_Handler,
		},
		{
			MethodName: "GetConfigSection",
			Handler:    _EnvironmentService_GetConfigSection_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _EnvironmentService_SetConfig_Handler,
		},
		{
			MethodName: "UnsetConfig",
			Handler:    _EnvironmentService_UnsetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "environment.proto",
}
