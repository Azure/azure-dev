// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: event.proto

package azdext

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents different types of messages sent over the stream
type EventMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*EventMessage_SubscribeProjectEvent
	//	*EventMessage_InvokeProjectHandler
	//	*EventMessage_ProjectHandlerStatus
	//	*EventMessage_SubscribeServiceEvent
	//	*EventMessage_InvokeServiceHandler
	//	*EventMessage_ServiceHandlerStatus
	//	*EventMessage_ExtensionReadyEvent
	MessageType   isEventMessage_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	mi := &file_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventMessage) GetMessageType() isEventMessage_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *EventMessage) GetSubscribeProjectEvent() *SubscribeProjectEvent {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_SubscribeProjectEvent); ok {
			return x.SubscribeProjectEvent
		}
	}
	return nil
}

func (x *EventMessage) GetInvokeProjectHandler() *InvokeProjectHandler {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_InvokeProjectHandler); ok {
			return x.InvokeProjectHandler
		}
	}
	return nil
}

func (x *EventMessage) GetProjectHandlerStatus() *ProjectHandlerStatus {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_ProjectHandlerStatus); ok {
			return x.ProjectHandlerStatus
		}
	}
	return nil
}

func (x *EventMessage) GetSubscribeServiceEvent() *SubscribeServiceEvent {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_SubscribeServiceEvent); ok {
			return x.SubscribeServiceEvent
		}
	}
	return nil
}

func (x *EventMessage) GetInvokeServiceHandler() *InvokeServiceHandler {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_InvokeServiceHandler); ok {
			return x.InvokeServiceHandler
		}
	}
	return nil
}

func (x *EventMessage) GetServiceHandlerStatus() *ServiceHandlerStatus {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_ServiceHandlerStatus); ok {
			return x.ServiceHandlerStatus
		}
	}
	return nil
}

func (x *EventMessage) GetExtensionReadyEvent() *ExtensionReadyEvent {
	if x != nil {
		if x, ok := x.MessageType.(*EventMessage_ExtensionReadyEvent); ok {
			return x.ExtensionReadyEvent
		}
	}
	return nil
}

type isEventMessage_MessageType interface {
	isEventMessage_MessageType()
}

type EventMessage_SubscribeProjectEvent struct {
	SubscribeProjectEvent *SubscribeProjectEvent `protobuf:"bytes,1,opt,name=subscribe_project_event,json=subscribeProjectEvent,proto3,oneof"`
}

type EventMessage_InvokeProjectHandler struct {
	InvokeProjectHandler *InvokeProjectHandler `protobuf:"bytes,2,opt,name=invoke_project_handler,json=invokeProjectHandler,proto3,oneof"`
}

type EventMessage_ProjectHandlerStatus struct {
	ProjectHandlerStatus *ProjectHandlerStatus `protobuf:"bytes,3,opt,name=project_handler_status,json=projectHandlerStatus,proto3,oneof"`
}

type EventMessage_SubscribeServiceEvent struct {
	SubscribeServiceEvent *SubscribeServiceEvent `protobuf:"bytes,4,opt,name=subscribe_service_event,json=subscribeServiceEvent,proto3,oneof"`
}

type EventMessage_InvokeServiceHandler struct {
	InvokeServiceHandler *InvokeServiceHandler `protobuf:"bytes,5,opt,name=invoke_service_handler,json=invokeServiceHandler,proto3,oneof"`
}

type EventMessage_ServiceHandlerStatus struct {
	ServiceHandlerStatus *ServiceHandlerStatus `protobuf:"bytes,6,opt,name=service_handler_status,json=serviceHandlerStatus,proto3,oneof"`
}

type EventMessage_ExtensionReadyEvent struct {
	ExtensionReadyEvent *ExtensionReadyEvent `protobuf:"bytes,7,opt,name=extension_ready_event,json=extensionReadyEvent,proto3,oneof"`
}

func (*EventMessage_SubscribeProjectEvent) isEventMessage_MessageType() {}

func (*EventMessage_InvokeProjectHandler) isEventMessage_MessageType() {}

func (*EventMessage_ProjectHandlerStatus) isEventMessage_MessageType() {}

func (*EventMessage_SubscribeServiceEvent) isEventMessage_MessageType() {}

func (*EventMessage_InvokeServiceHandler) isEventMessage_MessageType() {}

func (*EventMessage_ServiceHandlerStatus) isEventMessage_MessageType() {}

func (*EventMessage_ExtensionReadyEvent) isEventMessage_MessageType() {}

type ExtensionReadyEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status indicates the readiness state of the extension.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Message provides additional details.
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtensionReadyEvent) Reset() {
	*x = ExtensionReadyEvent{}
	mi := &file_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtensionReadyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionReadyEvent) ProtoMessage() {}

func (x *ExtensionReadyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionReadyEvent.ProtoReflect.Descriptor instead.
func (*ExtensionReadyEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *ExtensionReadyEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExtensionReadyEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Client subscribes to project-related events
type SubscribeProjectEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of event names to subscribe to.
	EventNames    []string `protobuf:"bytes,1,rep,name=event_names,json=eventNames,proto3" json:"event_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeProjectEvent) Reset() {
	*x = SubscribeProjectEvent{}
	mi := &file_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeProjectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeProjectEvent) ProtoMessage() {}

func (x *SubscribeProjectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeProjectEvent.ProtoReflect.Descriptor instead.
func (*SubscribeProjectEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeProjectEvent) GetEventNames() []string {
	if x != nil {
		return x.EventNames
	}
	return nil
}

// Client subscribes to service-related events
type SubscribeServiceEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of event names to subscribe to.
	EventNames    []string `protobuf:"bytes,1,rep,name=event_names,json=eventNames,proto3" json:"event_names,omitempty"`
	Language      string   `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Host          string   `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeServiceEvent) Reset() {
	*x = SubscribeServiceEvent{}
	mi := &file_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeServiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeServiceEvent) ProtoMessage() {}

func (x *SubscribeServiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeServiceEvent.ProtoReflect.Descriptor instead.
func (*SubscribeServiceEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeServiceEvent) GetEventNames() []string {
	if x != nil {
		return x.EventNames
	}
	return nil
}

func (x *SubscribeServiceEvent) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SubscribeServiceEvent) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Server invokes the project event handler
type InvokeProjectHandler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the event being invoked.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// Current project configuration.
	Project       *ProjectConfig `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeProjectHandler) Reset() {
	*x = InvokeProjectHandler{}
	mi := &file_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeProjectHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeProjectHandler) ProtoMessage() {}

func (x *InvokeProjectHandler) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeProjectHandler.ProtoReflect.Descriptor instead.
func (*InvokeProjectHandler) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *InvokeProjectHandler) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *InvokeProjectHandler) GetProject() *ProjectConfig {
	if x != nil {
		return x.Project
	}
	return nil
}

// Server invokes the service event handler
type InvokeServiceHandler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the event being invoked.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// Current project configuration.
	Project *ProjectConfig `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Specific service configuration.
	Service       *ServiceConfig `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeServiceHandler) Reset() {
	*x = InvokeServiceHandler{}
	mi := &file_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeServiceHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeServiceHandler) ProtoMessage() {}

func (x *InvokeServiceHandler) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeServiceHandler.ProtoReflect.Descriptor instead.
func (*InvokeServiceHandler) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *InvokeServiceHandler) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *InvokeServiceHandler) GetProject() *ProjectConfig {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *InvokeServiceHandler) GetService() *ServiceConfig {
	if x != nil {
		return x.Service
	}
	return nil
}

// Client sends status updates for project events
type ProjectHandlerStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the event this status update is for.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// Status such as "running", "completed", "failed", etc.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Optional message providing further details.
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectHandlerStatus) Reset() {
	*x = ProjectHandlerStatus{}
	mi := &file_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectHandlerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectHandlerStatus) ProtoMessage() {}

func (x *ProjectHandlerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectHandlerStatus.ProtoReflect.Descriptor instead.
func (*ProjectHandlerStatus) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *ProjectHandlerStatus) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *ProjectHandlerStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProjectHandlerStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Client sends status updates for service events
type ServiceHandlerStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the event this status update is for.
	EventName string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// Name of the service related to the update.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Status such as "running", "completed", "failed", etc.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Optional message providing further details.
	Message       string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceHandlerStatus) Reset() {
	*x = ServiceHandlerStatus{}
	mi := &file_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceHandlerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceHandlerStatus) ProtoMessage() {}

func (x *ServiceHandlerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceHandlerStatus.ProtoReflect.Descriptor instead.
func (*ServiceHandlerStatus) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceHandlerStatus) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *ServiceHandlerStatus) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceHandlerStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServiceHandlerStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_event_proto protoreflect.FileDescriptor

const file_event_proto_rawDesc = "" +
	"\n" +
	"\vevent.proto\x12\x06azdext\x1a\fmodels.proto\"\xfb\x04\n" +
	"\fEventMessage\x12W\n" +
	"\x17subscribe_project_event\x18\x01 \x01(\v2\x1d.azdext.SubscribeProjectEventH\x00R\x15subscribeProjectEvent\x12T\n" +
	"\x16invoke_project_handler\x18\x02 \x01(\v2\x1c.azdext.InvokeProjectHandlerH\x00R\x14invokeProjectHandler\x12T\n" +
	"\x16project_handler_status\x18\x03 \x01(\v2\x1c.azdext.ProjectHandlerStatusH\x00R\x14projectHandlerStatus\x12W\n" +
	"\x17subscribe_service_event\x18\x04 \x01(\v2\x1d.azdext.SubscribeServiceEventH\x00R\x15subscribeServiceEvent\x12T\n" +
	"\x16invoke_service_handler\x18\x05 \x01(\v2\x1c.azdext.InvokeServiceHandlerH\x00R\x14invokeServiceHandler\x12T\n" +
	"\x16service_handler_status\x18\x06 \x01(\v2\x1c.azdext.ServiceHandlerStatusH\x00R\x14serviceHandlerStatus\x12Q\n" +
	"\x15extension_ready_event\x18\a \x01(\v2\x1b.azdext.ExtensionReadyEventH\x00R\x13extensionReadyEventB\x0e\n" +
	"\fmessage_type\"G\n" +
	"\x13ExtensionReadyEvent\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"8\n" +
	"\x15SubscribeProjectEvent\x12\x1f\n" +
	"\vevent_names\x18\x01 \x03(\tR\n" +
	"eventNames\"h\n" +
	"\x15SubscribeServiceEvent\x12\x1f\n" +
	"\vevent_names\x18\x01 \x03(\tR\n" +
	"eventNames\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\"f\n" +
	"\x14InvokeProjectHandler\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12/\n" +
	"\aproject\x18\x02 \x01(\v2\x15.azdext.ProjectConfigR\aproject\"\x97\x01\n" +
	"\x14InvokeServiceHandler\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12/\n" +
	"\aproject\x18\x02 \x01(\v2\x15.azdext.ProjectConfigR\aproject\x12/\n" +
	"\aservice\x18\x03 \x01(\v2\x15.azdext.ServiceConfigR\aservice\"g\n" +
	"\x14ProjectHandlerStatus\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"\x8a\x01\n" +
	"\x14ServiceHandlerStatus\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage2M\n" +
	"\fEventService\x12=\n" +
	"\vEventStream\x12\x14.azdext.EventMessage\x1a\x14.azdext.EventMessage(\x010\x01B/Z-github.com/azure/azure-dev/cli/azd/pkg/azdextb\x06proto3"

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData []byte
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)))
	})
	return file_event_proto_rawDescData
}

var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_event_proto_goTypes = []any{
	(*EventMessage)(nil),          // 0: azdext.EventMessage
	(*ExtensionReadyEvent)(nil),   // 1: azdext.ExtensionReadyEvent
	(*SubscribeProjectEvent)(nil), // 2: azdext.SubscribeProjectEvent
	(*SubscribeServiceEvent)(nil), // 3: azdext.SubscribeServiceEvent
	(*InvokeProjectHandler)(nil),  // 4: azdext.InvokeProjectHandler
	(*InvokeServiceHandler)(nil),  // 5: azdext.InvokeServiceHandler
	(*ProjectHandlerStatus)(nil),  // 6: azdext.ProjectHandlerStatus
	(*ServiceHandlerStatus)(nil),  // 7: azdext.ServiceHandlerStatus
	(*ProjectConfig)(nil),         // 8: azdext.ProjectConfig
	(*ServiceConfig)(nil),         // 9: azdext.ServiceConfig
}
var file_event_proto_depIdxs = []int32{
	2,  // 0: azdext.EventMessage.subscribe_project_event:type_name -> azdext.SubscribeProjectEvent
	4,  // 1: azdext.EventMessage.invoke_project_handler:type_name -> azdext.InvokeProjectHandler
	6,  // 2: azdext.EventMessage.project_handler_status:type_name -> azdext.ProjectHandlerStatus
	3,  // 3: azdext.EventMessage.subscribe_service_event:type_name -> azdext.SubscribeServiceEvent
	5,  // 4: azdext.EventMessage.invoke_service_handler:type_name -> azdext.InvokeServiceHandler
	7,  // 5: azdext.EventMessage.service_handler_status:type_name -> azdext.ServiceHandlerStatus
	1,  // 6: azdext.EventMessage.extension_ready_event:type_name -> azdext.ExtensionReadyEvent
	8,  // 7: azdext.InvokeProjectHandler.project:type_name -> azdext.ProjectConfig
	8,  // 8: azdext.InvokeServiceHandler.project:type_name -> azdext.ProjectConfig
	9,  // 9: azdext.InvokeServiceHandler.service:type_name -> azdext.ServiceConfig
	0,  // 10: azdext.EventService.EventStream:input_type -> azdext.EventMessage
	0,  // 11: azdext.EventService.EventStream:output_type -> azdext.EventMessage
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	file_models_proto_init()
	file_event_proto_msgTypes[0].OneofWrappers = []any{
		(*EventMessage_SubscribeProjectEvent)(nil),
		(*EventMessage_InvokeProjectHandler)(nil),
		(*EventMessage_ProjectHandlerStatus)(nil),
		(*EventMessage_SubscribeServiceEvent)(nil),
		(*EventMessage_InvokeServiceHandler)(nil),
		(*EventMessage_ServiceHandlerStatus)(nil),
		(*EventMessage_ExtensionReadyEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_event_proto_rawDesc), len(file_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
