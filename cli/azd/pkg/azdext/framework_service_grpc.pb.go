// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: framework_service.proto

package azdext

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FrameworkService_Stream_FullMethodName = "/azdext.FrameworkService/Stream"
)

// FrameworkServiceClient is the client API for FrameworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrameworkServiceClient interface {
	// Bidirectional stream for framework service requests and responses
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FrameworkServiceMessage, FrameworkServiceMessage], error)
}

type frameworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrameworkServiceClient(cc grpc.ClientConnInterface) FrameworkServiceClient {
	return &frameworkServiceClient{cc}
}

func (c *frameworkServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FrameworkServiceMessage, FrameworkServiceMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FrameworkService_ServiceDesc.Streams[0], FrameworkService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FrameworkServiceMessage, FrameworkServiceMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FrameworkService_StreamClient = grpc.BidiStreamingClient[FrameworkServiceMessage, FrameworkServiceMessage]

// FrameworkServiceServer is the server API for FrameworkService service.
// All implementations must embed UnimplementedFrameworkServiceServer
// for forward compatibility.
type FrameworkServiceServer interface {
	// Bidirectional stream for framework service requests and responses
	Stream(grpc.BidiStreamingServer[FrameworkServiceMessage, FrameworkServiceMessage]) error
	mustEmbedUnimplementedFrameworkServiceServer()
}

// UnimplementedFrameworkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFrameworkServiceServer struct{}

func (UnimplementedFrameworkServiceServer) Stream(grpc.BidiStreamingServer[FrameworkServiceMessage, FrameworkServiceMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedFrameworkServiceServer) mustEmbedUnimplementedFrameworkServiceServer() {}
func (UnimplementedFrameworkServiceServer) testEmbeddedByValue()                          {}

// UnsafeFrameworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrameworkServiceServer will
// result in compilation errors.
type UnsafeFrameworkServiceServer interface {
	mustEmbedUnimplementedFrameworkServiceServer()
}

func RegisterFrameworkServiceServer(s grpc.ServiceRegistrar, srv FrameworkServiceServer) {
	// If the following call pancis, it indicates UnimplementedFrameworkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FrameworkService_ServiceDesc, srv)
}

func _FrameworkService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrameworkServiceServer).Stream(&grpc.GenericServerStream[FrameworkServiceMessage, FrameworkServiceMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FrameworkService_StreamServer = grpc.BidiStreamingServer[FrameworkServiceMessage, FrameworkServiceMessage]

// FrameworkService_ServiceDesc is the grpc.ServiceDesc for FrameworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrameworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azdext.FrameworkService",
	HandlerType: (*FrameworkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _FrameworkService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "framework_service.proto",
}
