// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: provisioning.proto

package azdext

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProvisioningService_Stream_FullMethodName = "/provisioning.v1.ProvisioningService/Stream"
)

// ProvisioningServiceClient is the client API for ProvisioningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ProvisioningService definition
type ProvisioningServiceClient interface {
	// Bidirectional stream for provisioning requests and responses
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProvisioningMessage, ProvisioningMessage], error)
}

type provisioningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisioningServiceClient(cc grpc.ClientConnInterface) ProvisioningServiceClient {
	return &provisioningServiceClient{cc}
}

func (c *provisioningServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProvisioningMessage, ProvisioningMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProvisioningService_ServiceDesc.Streams[0], ProvisioningService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProvisioningMessage, ProvisioningMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_StreamClient = grpc.BidiStreamingClient[ProvisioningMessage, ProvisioningMessage]

// ProvisioningServiceServer is the server API for ProvisioningService service.
// All implementations must embed UnimplementedProvisioningServiceServer
// for forward compatibility.
//
// The ProvisioningService definition
type ProvisioningServiceServer interface {
	// Bidirectional stream for provisioning requests and responses
	Stream(grpc.BidiStreamingServer[ProvisioningMessage, ProvisioningMessage]) error
	mustEmbedUnimplementedProvisioningServiceServer()
}

// UnimplementedProvisioningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProvisioningServiceServer struct{}

func (UnimplementedProvisioningServiceServer) Stream(grpc.BidiStreamingServer[ProvisioningMessage, ProvisioningMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedProvisioningServiceServer) mustEmbedUnimplementedProvisioningServiceServer() {}
func (UnimplementedProvisioningServiceServer) testEmbeddedByValue()                             {}

// UnsafeProvisioningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisioningServiceServer will
// result in compilation errors.
type UnsafeProvisioningServiceServer interface {
	mustEmbedUnimplementedProvisioningServiceServer()
}

func RegisterProvisioningServiceServer(s grpc.ServiceRegistrar, srv ProvisioningServiceServer) {
	// If the following call pancis, it indicates UnimplementedProvisioningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProvisioningService_ServiceDesc, srv)
}

func _ProvisioningService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProvisioningServiceServer).Stream(&grpc.GenericServerStream[ProvisioningMessage, ProvisioningMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProvisioningService_StreamServer = grpc.BidiStreamingServer[ProvisioningMessage, ProvisioningMessage]

// ProvisioningService_ServiceDesc is the grpc.ServiceDesc for ProvisioningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvisioningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provisioning.v1.ProvisioningService",
	HandlerType: (*ProvisioningServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ProvisioningService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "provisioning.proto",
}
