// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: service_target.proto

package azdext

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceTargetService_Stream_FullMethodName = "/azdext.ServiceTargetService/Stream"
)

// ServiceTargetServiceClient is the client API for ServiceTargetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTargetServiceClient interface {
	// Bidirectional stream for service target requests and responses
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServiceTargetMessage, ServiceTargetMessage], error)
}

type serviceTargetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTargetServiceClient(cc grpc.ClientConnInterface) ServiceTargetServiceClient {
	return &serviceTargetServiceClient{cc}
}

func (c *serviceTargetServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServiceTargetMessage, ServiceTargetMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceTargetService_ServiceDesc.Streams[0], ServiceTargetService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServiceTargetMessage, ServiceTargetMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceTargetService_StreamClient = grpc.BidiStreamingClient[ServiceTargetMessage, ServiceTargetMessage]

// ServiceTargetServiceServer is the server API for ServiceTargetService service.
// All implementations must embed UnimplementedServiceTargetServiceServer
// for forward compatibility.
type ServiceTargetServiceServer interface {
	// Bidirectional stream for service target requests and responses
	Stream(grpc.BidiStreamingServer[ServiceTargetMessage, ServiceTargetMessage]) error
	mustEmbedUnimplementedServiceTargetServiceServer()
}

// UnimplementedServiceTargetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceTargetServiceServer struct{}

func (UnimplementedServiceTargetServiceServer) Stream(grpc.BidiStreamingServer[ServiceTargetMessage, ServiceTargetMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedServiceTargetServiceServer) mustEmbedUnimplementedServiceTargetServiceServer() {}
func (UnimplementedServiceTargetServiceServer) testEmbeddedByValue()                              {}

// UnsafeServiceTargetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTargetServiceServer will
// result in compilation errors.
type UnsafeServiceTargetServiceServer interface {
	mustEmbedUnimplementedServiceTargetServiceServer()
}

func RegisterServiceTargetServiceServer(s grpc.ServiceRegistrar, srv ServiceTargetServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceTargetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceTargetService_ServiceDesc, srv)
}

func _ServiceTargetService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceTargetServiceServer).Stream(&grpc.GenericServerStream[ServiceTargetMessage, ServiceTargetMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceTargetService_StreamServer = grpc.BidiStreamingServer[ServiceTargetMessage, ServiceTargetMessage]

// ServiceTargetService_ServiceDesc is the grpc.ServiceDesc for ServiceTargetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTargetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azdext.ServiceTargetService",
	HandlerType: (*ServiceTargetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ServiceTargetService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_target.proto",
}
