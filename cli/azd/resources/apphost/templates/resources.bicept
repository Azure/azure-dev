{{define "resources.bicep" -}}
@description('The location used for all deployed resources')
param location string = resourceGroup().location
{{- if .RequiresPrincipalId }}
@description('Id of the user or app to assign application roles')
param principalId string = ''
{{end }}

@description('Tags that will be applied to all resources')
param tags object = {}

var resourceToken = uniqueString(resourceGroup().id)

{{- range $parameter := .MainToResourcesParams }}
{{- if $parameter.Secret }}
@secure()
{{- end}}
param {{bicepParameterName $parameter.Name}} {{$parameter.Type}}
{{- end}}

resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: 'mi-${resourceToken}'
  location: location
  tags: tags
}
{{if .HasContainerRegistry}}
resource containerRegistry 'Microsoft.ContainerRegistry/registries@2023-07-01' = {
  name: replace('acr-${resourceToken}', '-', '')
  location: location
  sku: {
    name: 'Basic'
  }
  properties: {
    adminUserEnabled: true
  }
  tags: tags
}

resource caeMiRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(containerRegistry.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d'))
  scope: containerRegistry
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')
  }
}
{{end -}}
{{if .HasLogAnalyticsWorkspace}}
resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {
  name: 'law-${resourceToken}'
  location: location
  properties: {
    sku: {
      name: 'PerGB2018'
    }
  }
  tags: tags
}
{{end -}}
{{if .RequiresStorageVolume}}
resource storageVolume 'Microsoft.Storage/storageAccounts@2022-05-01' = {
  name: 'vol${resourceToken}'
  location: location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }
  properties: {
    largeFileSharesState: 'Enabled'
  }
}

resource storageVolumeFileService 'Microsoft.Storage/storageAccounts/fileServices@2022-05-01' = {
  parent: storageVolume
  name: 'default'
}
{{range $name, $value := .ContainerApps}}
{{- range $volume := $value.Volumes}}
resource {{mergeBicepName $name $volume.Name}}FileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-05-01' = {
  parent: storageVolumeFileService
  name: take('${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}', 32)
  properties: {
    shareQuota: 1024
    enabledProtocols: 'SMB'
  }
}
{{- end }}
{{- end }}
{{end -}}
{{if .HasContainerEnvironment}}
resource containerAppEnvironment 'Microsoft.App/managedEnvironments@2023-05-01' = {
  name: 'cae-${resourceToken}'
  location: location
  properties: {
    appLogsConfiguration: {
      destination: 'log-analytics'
      logAnalyticsConfiguration: {
        customerId: logAnalyticsWorkspace.properties.customerId
        sharedKey: logAnalyticsWorkspace.listKeys().primarySharedKey
      }
    }
  }
  tags: tags
}
{{range $name, $value := .ContainerApps}}
{{- range $volume := $value.Volumes}}
resource {{mergeBicepName $name $volume.Name}}Store 'Microsoft.App/managedEnvironments/storages@2023-05-01' = {
  parent: containerAppEnvironment
  name: take('${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}', 32)
  properties: {
    azureFile: {
      shareName: '${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}'
      accountName: storageVolume.name
      accountKey: storageVolume.listKeys().keys[0].value
{{- if $volume.ReadOnly }}
      accessMode: 'ReadOnly'
{{- end}}
{{- if eq false $volume.ReadOnly }}
      accessMode: 'ReadWrite'
{{- end}}
    }
  }
}
{{end -}}
{{end -}}
{{range $componentName, $componentValue := .DaprComponents}}
resource {{$componentName}} 'Microsoft.App/managedEnvironments/daprComponents@2023-05-01' = {
  name: '{{$componentName}}'
  parent: containerAppEnvironment
  properties: {
    componentType: '{{$componentValue.Type}}'
    version: '{{$componentValue.Version}}'
    metadata: [
{{range $metadataName, $metadataValue := $componentValue.Metadata}}
      {
        name: '{{$metadataName}}'
{{if $metadataValue.SecretKeyRef}}
        secretRef: {{$metadataValue.SecretKeyRef}}
{{end -}}
{{if $metadataValue.Value}}
        value: {{$metadataValue.Value}}
{{end -}}
      }
{{end -}}
    ]
    secrets: [
{{range $secretName, $secret := $componentValue.Secrets}}
      {
        name: '{{$secretName}}'
        value: {{$secret.Value}}
      }
{{end -}}
    ]
  }
}
{{end -}}
{{end -}}
{{range $name, $value := .ContainerAppEnvironmentServices}}
resource {{bicepName $name}} 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: '{{containerAppName $name}}'
  location: location
  properties: {
    environmentId: containerAppEnvironment.id
    configuration: {
      service: {
        type: '{{$value.Type}}'
      }
    }
    template: {
      containers: [
        {
          image: '{{$value.Type}}'
          name: '{{$value.Type}}'
        }
      ]
      scale: {
        minReplicas: 1
      }
    }
  }
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
}
{{end -}}
{{range $name, $value := .ContainerApps}}
resource {{bicepName $name}} 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: '{{containerAppName $name}}'
  location: location
{{- if $value.Volumes}}
  dependsOn: [storageVolume]
{{- end }}
  properties: {
    environmentId: containerAppEnvironment.id
    configuration: {
      activeRevisionsMode: 'Single'
{{- if $value.Dapr}}
      dapr: {
        appId: {{$value.Dapr.AppId}}
{{- if $value.Dapr.AppPort}}
        appPort: {{$value.Dapr.AppPort}}
{{- end}}
{{- if $value.Dapr.AppProtocol}}
        appProtocol: {{$value.Dapr.AppProtocol}}
{{- end}}
{{- if $value.Dapr.EnableApiLogging}}
        enableApiLogging: {{$value.Dapr.EnableApiLogging}}
{{- end}}
        enabled: true
{{- if $value.Dapr.HttpMaxRequestSize}}
        httpMaxRequestSize: {{$value.Dapr.HttpMaxRequestSize}}
{{- end}}
{{- if $value.Dapr.HttpReadBufferSize}}
        httpReadBufferSize: {{$value.Dapr.HttpReadBufferSize}}
{{- end}}
{{- if $value.Dapr.LogLevel}}
        logLevel: {{$value.Dapr.LogLevel}}
{{- end}}
      }
{{- end}}
{{- if $value.Ingress}}
      ingress: {
{{- if $value.Ingress.AdditionalPortMappings }}
        additionalPortMappings: [
{{- range $additionalPort := $value.Ingress.AdditionalPortMappings }}
          { targetPort: {{ $additionalPort.TargetPort }}
          external: {{ $additionalPort.External }} }
{{- end}}
        ]
{{- end}}
        external: {{$value.Ingress.External}}
        targetPort: {{$value.Ingress.TargetPort}}
        transport: '{{$value.Ingress.Transport}}'
{{- if ne $value.Ingress.Transport "tcp" }}
        allowInsecure: {{$value.Ingress.AllowInsecure}}
{{- end}}
      }
{{- end}}
{{- if gt (len $value.Secrets) 0 }}
      secrets: [
{{- range $sName, $sValue := $value.Secrets}}
        {
          name: '{{containerAppSecretName $sName}}'
          value: {{$sValue}}
        }
{{- end}}
      ]
{{- end}}
    }
    template: {
{{- if $value.Volumes}}
      volumes: [
{{- range $volume := $value.Volumes}}
        {
          name: '${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}'
          storageType: 'AzureFile'
          storageName: {{mergeBicepName $name $volume.Name}}Store.name
        }
{{- end}}
      ]
{{- end}}
      containers: [
        {
          image: '{{$value.Image}}'
          name: '{{$name}}'
{{- if or (gt (len $value.Env) 0) (gt (len $value.Secrets) 0)}}
          env: [
{{- range $name, $value := $value.Env}}
            {
              name: '{{$name}}'
              value: '{{$value}}'
            }
{{- end}}
{{- range $sName, $sValue := $value.Secrets}}
            {
              name: '{{$sName}}'
              secretRef: '{{containerAppSecretName $sName}}'
            }
{{- end}}
          ]
{{- end}}
{{- if $value.Volumes}}
          volumeMounts: [
{{- range $volume := $value.Volumes}}
            {
              volumeName: '${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}'
              mountPath: '{{$volume.Target}}'
            }
{{- end}}
          ]
{{- end}}
        }
      ]
      scale: {
        minReplicas: 1
      }
    }
  }
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
}
{{end -}}
{{range $name, $value := .ServiceBuses}}
resource {{bicepName $name}} 'Microsoft.ServiceBus/namespaces@2022-10-01-preview' = {
  name: '{{$name}}-${resourceToken}'
  location: location
  sku: {
    name: 'Standard'
  }
  properties: {
    minimumTlsVersion: '1.2'
  }
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
{{- range $name := $value.Queues}}

  resource {{bicepName $name}} 'queues@2022-10-01-preview' = {
    name: '{{$name}}'
  }
{{end -}}
{{range $name := $value.Topics}}

  resource {{bicepName $name}} 'topics@2022-10-01-preview' = {
    name: '{{$name}}'
  }
{{end -}}
}

resource {{bicepName $name}}MiRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419'))
  scope: {{bicepName $name}}
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')
  }
}
{{end -}}
{{range $name, $value := .AppInsights}}
resource {{bicepName $name}} 'Microsoft.Insights/components@2020-02-02-preview' = {
  name: '{{$name}}'
  location: location
  properties: {
    Application_Type: 'web'
    WorkspaceResourceId: logAnalyticsWorkspace.id
  }
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
}
{{end -}}
{{range $name, $value := .StorageAccounts}}
resource {{bicepName $name}} 'Microsoft.Storage/storageAccounts@2022-05-01' = {
  name: replace('{{$name}}-${resourceToken}', '-', '')
  location: location
  kind: 'Storage'
  sku: {
    name: 'Standard_GRS'
  }
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})

  resource blobs 'blobServices@2022-05-01' = {
    name: 'default'
  }
}

{{if gt (len $value.Blobs) 0 -}}
resource {{bicepName $name}}BlobsRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))
  scope: {{bicepName $name}}
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')
  }
}

{{end -}}
{{if gt (len $value.Queues) 0 -}}
resource {{bicepName $name}}QueuesRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88'))
  scope: {{bicepName $name}}
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')
  }
}

{{end -}}
{{if gt (len $value.Tables) 0 -}}
resource {{bicepName $name}}TablesRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3'))
  scope: {{bicepName $name}}
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')
  }
}
{{end -}}
{{end -}}
{{range $name, $value := .KeyVaults}}
resource {{bicepName $name}} 'Microsoft.KeyVault/vaults@2023-07-01' = {
  name: replace('{{$name}}-${resourceToken}', '-', '')
  location: location
  properties: {
    sku: {
      name: 'standard'
      family: 'A'
    }
    tenantId: subscription().tenantId
    enableRbacAuthorization: true
  }
{{ if not $value.NoTags }}
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
{{end -}}
}

resource {{bicepName $name}}RoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))
  scope: {{bicepName $name}}
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')
  }
}
{{ if  $value.ReadAccessPrincipalId }}
resource {{bicepName $name}}UserReadRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, principalId, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6'))
  scope: {{bicepName $name}}
  properties: {
    principalId: principalId
    principalType: 'User'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')
  }
}
{{end -}}
{{end -}}
{{range $name, $value := .AppConfigs}}
resource {{bicepName $name}} 'Microsoft.AppConfiguration/configurationStores@2023-03-01'= {
  name: replace('{{$name}}-${resourceToken}', '-', '')
  location: location
  sku: {
    name: 'free'
  }
}

resource {{bicepName $name}}RoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b'))
  scope: {{bicepName $name}}
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')
  }
}
{{- end}}
{{range $name, $value := .CosmosDbAccounts}}
resource {{bicepName $name}} 'Microsoft.DocumentDB/databaseAccounts@2023-04-15' = {
  name: replace('{{$name}}-${resourceToken}', '-', '')
  location: location
  kind: 'GlobalDocumentDB'
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
  properties: {
    consistencyPolicy: { defaultConsistencyLevel: 'Session' }
    locations: [
      {
        locationName: location
        failoverPriority: 0
      }
    ]
    databaseAccountOfferType: 'Standard'
  }
{{range $cname := $value.Databases}}
  resource {{bicepName $cname}} 'sqlDatabases@2023-04-15' = {
    name: '{{$cname}}'
    location: location
    tags: union(tags, {'aspire-resource-name': '{{$cname}}'})
    properties: {
      resource: {
        id: '{{$cname}}'
      }
    }
  }
{{end -}}
}
{{end -}}

{{range $name, $value := .SqlServers}}
resource {{bicepName $name}} 'Microsoft.Sql/servers@2022-05-01-preview' = {
  name: '{{$name}}-${resourceToken}'
  location: location
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
  properties: {
    minimalTlsVersion: '1.2'
    publicNetworkAccess: 'Enabled'
    administrators: {
      administratorType: 'ActiveDirectory'
      azureADOnlyAuthentication: true
      login: managedIdentity.name
      principalType: 'User'
      sid: managedIdentity.properties.principalId
      tenantId: subscription().tenantId
    }
  }

resource {{bicepName $name}}Firewall 'firewallRules@2022-05-01-preview' = {
    name: 'fw-{{$name}}'
    properties: {
      startIpAddress: '0.0.0.0'
      endIpAddress: '255.255.255.255'
    }
}

  {{range $cname := $value.Databases}}
  resource {{bicepName $cname}} 'databases@2022-05-01-preview' = {
  name: '{{$cname}}'
  location: location
  sku: {
    name: 'S0'
  }
  tags: union(tags, {'aspire-resource-name': '{{$cname}}'})
  }
{{end -}}
}
{{end -}}
output MANAGED_IDENTITY_CLIENT_ID string = managedIdentity.properties.clientId
output MANAGED_IDENTITY_NAME string = managedIdentity.name
output MANAGED_IDENTITY_PRINCIPAL_ID string = managedIdentity.properties.principalId
{{if .HasLogAnalyticsWorkspace -}}
output AZURE_LOG_ANALYTICS_WORKSPACE_NAME string = logAnalyticsWorkspace.name
output AZURE_LOG_ANALYTICS_WORKSPACE_ID string = logAnalyticsWorkspace.id
{{end -}}
{{if .HasContainerRegistry -}}
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = containerRegistry.properties.loginServer
output AZURE_CONTAINER_REGISTRY_MANAGED_IDENTITY_ID string = managedIdentity.id
{{end -}}
{{if .HasContainerEnvironment -}}
output AZURE_CONTAINER_APPS_ENVIRONMENT_ID string = containerAppEnvironment.id
output AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN string = containerAppEnvironment.properties.defaultDomain
{{end -}}
{{range $name, $value := .ServiceBuses -}}
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_ENDPOINT string = {{bicepName $name}}.properties.serviceBusEndpoint
{{end -}}
{{range $name, $value := .AppInsights -}}
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_CONNECTION_STRING string = {{bicepName $name}}.properties.ConnectionString
{{end -}}
{{range $name, $value := .StorageAccounts -}}
{{range $cname := $value.Blobs -}}
output SERVICE_BINDING_{{alphaSnakeUpper $cname}}_ENDPOINT string = {{bicepName $name}}.properties.primaryEndpoints.blob
{{end -}}
{{range $cname := $value.Tables -}}
output SERVICE_BINDING_{{alphaSnakeUpper $cname}}_ENDPOINT string = {{bicepName $name}}.properties.primaryEndpoints.table
{{end -}}
{{range $cname := $value.Queues -}}
output SERVICE_BINDING_{{alphaSnakeUpper $cname}}_ENDPOINT string = {{bicepName $name}}.properties.primaryEndpoints.queue
{{end -}}
{{end -}}
{{range $name, $value := .KeyVaults -}}
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_ENDPOINT string = {{bicepName $name}}.properties.vaultUri
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_NAME string = {{bicepName $name}}.name
{{end -}}
{{range $name, $value := .AppConfigs -}}
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_ENDPOINT string = {{bicepName $name}}.properties.endpoint
{{end -}}
{{range $name, $value := .CosmosDbAccounts -}}
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_NAME string = {{bicepName $name}}.name
{{end -}}
{{range $name, $value := .SqlServers -}}
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_NAME string = {{bicepName $name}}.name
{{end -}}
{{ end}}