{{define "resources.bicep" -}}
@description('The location used for all deployed resources')
param location string = resourceGroup().location
{{- if .RequiresPrincipalId }}
@description('Id of the user or app to assign application roles')
param principalId string = ''
{{end }}

@description('Tags that will be applied to all resources')
param tags object = {}

var resourceToken = uniqueString(resourceGroup().id)

{{- range $parameter := .MainToResourcesParams }}
{{- if $parameter.Secret }}
@secure()
{{- end}}
param {{bicepParameterName $parameter.Name}} {{$parameter.Type}}
{{- end}}

resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: 'mi-${resourceToken}'
  location: location
  tags: tags
}
{{if .HasContainerRegistry}}
resource containerRegistry 'Microsoft.ContainerRegistry/registries@2023-07-01' = {
  name: replace('acr-${resourceToken}', '-', '')
  location: location
  sku: {
    name: 'Basic'
  }
  tags: tags
}

resource caeMiRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(containerRegistry.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d'))
  scope: containerRegistry
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')
  }
}
{{end -}}
{{if .HasLogAnalyticsWorkspace}}
resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {
  name: 'law-${resourceToken}'
  location: location
  properties: {
    sku: {
      name: 'PerGB2018'
    }
  }
  tags: tags
}
{{end -}}
{{if .RequiresStorageVolume}}
resource storageVolume 'Microsoft.Storage/storageAccounts@2022-05-01' = {
  name: 'vol${resourceToken}'
  location: location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }
  properties: {
    largeFileSharesState: 'Enabled'
  }
}

resource storageVolumeFileService 'Microsoft.Storage/storageAccounts/fileServices@2022-05-01' = {
  parent: storageVolume
  name: 'default'
}
{{if .HasBindMounts -}}
resource volumesAccountRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(storageVolume.id, principalId, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd'))
  scope: storageVolume
  properties: {
    principalId: principalId
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')
  }
}
{{ end -}}
{{range $name, $value := .ContainerApps}}
{{- range $volume := $value.Volumes}}
resource {{mergeBicepName $name $volume.Name}}FileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-05-01' = {
  parent: storageVolumeFileService
  name: take('${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}', 32)
  properties: {
    shareQuota: 1024
    enabledProtocols: 'SMB'
  }
}
{{- end }}
{{- range $bMount := $value.BindMounts}}
resource {{mergeBicepName $name $bMount.Name}}FileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-05-01' = {
  parent: storageVolumeFileService
  name: take('${toLower('{{$name}}')}-${toLower('{{removeDot $bMount.Name}}')}', 32)
  properties: {
    shareQuota: 1024
    enabledProtocols: 'SMB'
  }
}
{{- end }}
{{- end }}
{{end -}}
{{if .HasContainerEnvironment}}
resource containerAppEnvironment 'Microsoft.App/managedEnvironments@2024-02-02-preview' = {
  name: 'cae-${resourceToken}'
  location: location
  properties: {
    workloadProfiles: [{
      workloadProfileType: 'Consumption'
      name: 'consumption'
    }]
    appLogsConfiguration: {
      destination: 'log-analytics'
      logAnalyticsConfiguration: {
        customerId: logAnalyticsWorkspace.properties.customerId
        sharedKey: logAnalyticsWorkspace.listKeys().primarySharedKey
      }
    }
  }
  tags: tags

  resource aspireDashboard 'dotNetComponents' = {
    name: 'aspire-dashboard'
    properties: {
      componentType: 'AspireDashboard'
    }
  }

}

resource explicitContributorUserRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(containerAppEnvironment.id, principalId, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'))
  scope: containerAppEnvironment
  properties: {
    principalId: principalId
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')
  }
}
{{range $name, $value := .ContainerApps}}
{{- range $volume := $value.Volumes}}
resource {{mergeBicepName $name $volume.Name}}Store 'Microsoft.App/managedEnvironments/storages@2023-05-01' = {
  parent: containerAppEnvironment
  name: take('${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}', 32)
  properties: {
    azureFile: {
      shareName: '${toLower('{{$name}}')}-${toLower('{{removeDot $volume.Name}}')}'
      accountName: storageVolume.name
      accountKey: storageVolume.listKeys().keys[0].value
{{- if $volume.ReadOnly }}
      accessMode: 'ReadOnly'
{{- end}}
{{- if eq false $volume.ReadOnly }}
      accessMode: 'ReadWrite'
{{- end}}
    }
  }
}
{{end -}}
{{- range $bMount := $value.BindMounts}}
resource {{mergeBicepName $name $bMount.Name}}Store 'Microsoft.App/managedEnvironments/storages@2023-05-01' = {
  parent: containerAppEnvironment
  name: take('${toLower('{{$name}}')}-${toLower('{{removeDot $bMount.Name}}')}', 32)
  properties: {
    azureFile: {
      shareName: '${toLower('{{$name}}')}-${toLower('{{removeDot $bMount.Name}}')}'
      accountName: storageVolume.name
      accountKey: storageVolume.listKeys().keys[0].value
{{- if $bMount.ReadOnly }}
      accessMode: 'ReadOnly'
{{- end}}
{{- if eq false $bMount.ReadOnly }}
      accessMode: 'ReadWrite'
{{- end}}
    }
  }
}
{{end -}}
{{end -}}
{{range $componentName, $componentValue := .DaprComponents}}
resource {{$componentName}} 'Microsoft.App/managedEnvironments/daprComponents@2023-05-01' = {
  name: '{{$componentName}}'
  parent: containerAppEnvironment
  properties: {
    componentType: '{{$componentValue.Type}}'
    version: '{{$componentValue.Version}}'
    metadata: [
{{range $metadataName, $metadataValue := $componentValue.Metadata}}
      {
        name: '{{$metadataName}}'
{{if $metadataValue.SecretKeyRef}}
        secretRef: {{$metadataValue.SecretKeyRef}}
{{end -}}
{{if $metadataValue.Value}}
        value: {{$metadataValue.Value}}
{{end -}}
      }
{{end -}}
    ]
    secrets: [
{{range $secretName, $secret := $componentValue.Secrets}}
      {
        name: '{{$secretName}}'
        value: {{$secret.Value}}
      }
{{end -}}
    ]
  }
}
{{end -}}
{{end -}}
{{range $name, $value := .ContainerAppEnvironmentServices}}
resource {{bicepName $name}} 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: '{{containerAppName $name}}'
  location: location
  properties: {
    environmentId: containerAppEnvironment.id
    configuration: {
      service: {
        type: '{{$value.Type}}'
      }
    }
    template: {
      containers: [
        {
          image: '{{$value.Type}}'
          name: '{{$value.Type}}'
        }
      ]
      scale: {
        minReplicas: 1
      }
    }
  }
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
}
{{end -}}
{{range $name, $value := .KeyVaults}}
resource {{bicepName $name}} 'Microsoft.KeyVault/vaults@2023-07-01' = {
  name: replace('{{$name}}-${resourceToken}', '-', '')
  location: location
  properties: {
    sku: {
      name: 'standard'
      family: 'A'
    }
    tenantId: subscription().tenantId
    enableRbacAuthorization: true
  }
{{ if not $value.NoTags }}
  tags: union(tags, {'aspire-resource-name': '{{$name}}'})
{{end -}}
}

resource {{bicepName $name}}RoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, managedIdentity.id, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))
  scope: {{bicepName $name}}
  properties: {
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')
  }
}
{{ if  $value.ReadAccessPrincipalId }}
resource {{bicepName $name}}UserReadRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid({{bicepName $name}}.id, principalId, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6'))
  scope: {{bicepName $name}}
  properties: {
    principalId: principalId
    roleDefinitionId:  subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')
  }
}
{{end -}}
{{end}}
output MANAGED_IDENTITY_CLIENT_ID string = managedIdentity.properties.clientId
output MANAGED_IDENTITY_NAME string = managedIdentity.name
output MANAGED_IDENTITY_PRINCIPAL_ID string = managedIdentity.properties.principalId
{{if .HasLogAnalyticsWorkspace -}}
output AZURE_LOG_ANALYTICS_WORKSPACE_NAME string = logAnalyticsWorkspace.name
output AZURE_LOG_ANALYTICS_WORKSPACE_ID string = logAnalyticsWorkspace.id
{{end -}}
{{if .HasContainerRegistry -}}
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = containerRegistry.properties.loginServer
output AZURE_CONTAINER_REGISTRY_MANAGED_IDENTITY_ID string = managedIdentity.id
{{end -}}
{{if .HasContainerEnvironment -}}
output AZURE_CONTAINER_APPS_ENVIRONMENT_NAME string = containerAppEnvironment.name
output AZURE_CONTAINER_APPS_ENVIRONMENT_ID string = containerAppEnvironment.id
output AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN string = containerAppEnvironment.properties.defaultDomain
{{end -}}
{{range $name, $value := .ContainerApps -}}
{{range $volume := $value.Volumes -}}
output SERVICE_{{alphaSnakeUpper $name}}_VOLUME_{{removeDot $volume.Name | alphaSnakeUpper}}_NAME string = {{mergeBicepName $name $volume.Name}}Store.name
{{end -}}
{{range $bMount := $value.BindMounts -}}
output SERVICE_{{alphaSnakeUpper $name}}_VOLUME_{{removeDot $bMount.Name | alphaSnakeUpper}}_NAME string = {{mergeBicepName $name $bMount.Name}}Store.name
output SERVICE_{{alphaSnakeUpper $name}}_FILE_SHARE_{{removeDot $bMount.Name | alphaSnakeUpper}}_NAME string = {{mergeBicepName $name $bMount.Name}}FileShare.name
{{end -}}
{{end -}}
{{range $name, $value := .KeyVaults -}}
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_ENDPOINT string = {{bicepName $name}}.properties.vaultUri
output SERVICE_BINDING_{{alphaSnakeUpper $name}}_NAME string = {{bicepName $name}}.name
{{end -}}
{{if .RequiresStorageVolume -}}
output AZURE_VOLUMES_STORAGE_ACCOUNT string = storageVolume.name
{{ end -}}
{{ end}}