{{define "db-postgre.bicep"}}
param serverName string
param location string = resourceGroup().location
param tags object = {}

param keyVaultName string
param databaseUser string = 'appuser'
param databaseName string = '{{.DatabaseName}}'
param databaseConnectionKey string = 'databasePassword'
param allowAllIPsFirewall bool = false

@secure()
param sqlAdminPassword string
@secure()
param appUserPassword string

resource postgreServer'Microsoft.DBforPostgreSQL/flexibleServers@2022-01-20-preview' = {
  location: location
  tags: tags
  name: serverName
  sku: {
    name: 'Standard_B1ms'
    tier: 'Burstable'
  }
  properties: {
    version: '13'
    administratorLogin: 'django'
    administratorLoginPassword: sqlAdminPassword
    storage: {
      storageSizeGB: 128
    }
    backup: {
      backupRetentionDays: 7
      geoRedundantBackup: 'Disabled'
    }
    highAvailability: {
      mode: 'Disabled'
    }
    maintenanceWindow: {
      customWindow: 'Disabled'
      dayOfWeek: 0
      startHour: 0
      startMinute: 0
    }
  }

  resource firewall_all 'firewallRules' = if (allowAllIPsFirewall) {
    name: 'allow-all-IPs'
    properties: {
      startIpAddress: '0.0.0.0'
      endIpAddress: '255.255.255.255'
    }
  }
}

resource database 'Microsoft.DBforPostgreSQL/flexibleServers/databases@2022-01-20-preview' = {
  parent: postgreServer
  name: databaseName
  properties: {
    // Azure defaults to UTF-8 encoding, override if required.
    // charset: 'string' 
    // collation: 'string'
  }
}

resource seedDb 'Microsoft.Resources/deploymentScripts@2020-10-01' = {
  name: 'seedDb'
  location: location
  kind: 'AzureCLI'
  properties: {
    azCliVersion: '2.9.0'
    retentionInterval: 'PT1H'
    timeout: 'PT5M'
    environmentVariables: [
      {
        name: 'DBSERVER'
        value: postgreServer.properties.fullyQualifiedDomainName
      }
      {
        name: 'SQLADMIN'
        value: postgreServer.properties.administratorLogin
      }
      {
        name: 'PGPASSWORD'
        value: sqlAdminPassword
      }
      {
        name: 'DBNAME'
        value: database.name
      }
      {
        name: 'APPUSERNAME'
        value: databaseUser
      }
      {
        name: 'APPUSERPASSWORD'
        value: appUserPassword
      }
    ]
    cleanupPreference: 'OnSuccess'
    scriptContent: '''
apk add --no-cache postgresql-client 

cat <<SCRIPT_END > ./initDb.sql
CREATE USER ${APPUSERNAME} PASSWORD '${APPUSERPASSWORD}';

GRANT CONNECT ON DATABASE ${DBNAME} TO ${APPUSERNAME};
GRANT ALL PRIVILEGES ON DATABASE ${DBNAME} TO ${APPUSERNAME};
SCRIPT_END

./psql --host=${DBSERVER} --dbname=${DBNAME} --username=${SQLADMIN} --file=./initDb.sql
'''
  }
}

resource keyVault 'Microsoft.KeyVault/vaults@2022-07-01' existing = {
  name: keyVaultName
}

resource dbPassword 'Microsoft.KeyVault/vaults/secrets@2022-07-01' = {
  parent: keyVault
  name: databaseConnectionKey
  properties: {
    value: appUserPassword
  }
}

output databaseHost string = postgreServer.properties.fullyQualifiedDomainName
output databaseName string = databaseName
output databaseUser string = databaseUser
output databaseConnectionKey string = databaseConnectionKey
{{end}}
