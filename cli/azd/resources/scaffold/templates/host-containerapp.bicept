{{define "host-containerapp.bicep" -}}
param name string
param location string = resourceGroup().location
param tags object = {}

param identityName string
param containerRegistryName string
param containerAppsEnvironmentName string
param applicationInsightsName string
{{- if .DbCosmosMongo}}
@secure()
param cosmosDbConnectionString string
{{- end}}
{{- if .DbPostgres}}
param postgresDatabaseHost string
param postgresDatabaseUser string
param postgresDatabaseName string
param postgresDatabaseId string
@secure()
param postgresDatabasePassword string
{{- end}}
{{- if .DbMySql}}
param mysqlDatabaseId string
param mysqlIdentityName string
{{- end}}
{{- if .AzureServiceBus}}
@secure()
param azureServiceBusConnectionString string
{{- end}}
{{- if .DbRedis}}
param redisName string
{{- end}}
{{- if (and .Frontend .Frontend.Backends)}}
param apiUrls array
{{- end}}
{{- if (and .Backend .Backend.Frontends)}}
param allowedOrigins array
{{- end}}
param exists bool
@secure()
param appDefinition object

var appSettingsArray = filter(array(appDefinition.settings), i => i.name != '')
var secrets = map(filter(appSettingsArray, i => i.?secret != null), i => {
  name: i.name
  value: i.value
  secretRef: i.?secretRef ?? take(replace(replace(toLower(i.name), '_', '-'), '.', '-'), 32)
})
var env = map(filter(appSettingsArray, i => i.?secret == null), i => {
  name: i.name
  value: i.value
})

resource identity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: identityName
  location: location
}

resource containerRegistry 'Microsoft.ContainerRegistry/registries@2023-01-01-preview' existing = {
  name: containerRegistryName
}

resource containerAppsEnvironment 'Microsoft.App/managedEnvironments@2023-05-01' existing = {
  name: containerAppsEnvironmentName
}

resource applicationInsights 'Microsoft.Insights/components@2020-02-02' existing = {
  name: applicationInsightsName
}

resource acrPullRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: containerRegistry
  name: guid(subscription().id, resourceGroup().id, identity.id, 'acrPullRole')
  properties: {
    roleDefinitionId:  subscriptionResourceId(
      'Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')
    principalType: 'ServicePrincipal'
    principalId: identity.properties.principalId
  }
}

module fetchLatestImage '../modules/fetch-container-image.bicep' = {
  name: '${name}-fetch-image'
  params: {
    exists: exists
    name: name
  }
}
{{- if .DbRedis}}

resource redis 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: redisName
  location: location
  properties: {
    environmentId: containerAppsEnvironment.id
    configuration: {
      service: {
        type: 'redis'
      }
    }
    template: {
      containers: [
        {
          image: 'redis'
          name: 'redis'
        }
      ]
    }
  }
}
{{- end}}

resource app 'Microsoft.App/containerApps@2023-05-02-preview' = {
  name: name
  location: location
  tags: union(tags, {'azd-service-name':  '{{.Name}}' })
  dependsOn: [ acrPullRole ]
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: { '${identity.id}': {} }
  }
  properties: {
    managedEnvironmentId: containerAppsEnvironment.id
    configuration: {
      {{- if ne .Port 0}}
      ingress:  {
        external: true
        targetPort: {{.Port}}
        transport: 'auto'
        {{- if (and .Backend .Backend.Frontends)}}
        corsPolicy: {
          allowedOrigins: union(allowedOrigins, [
            // define additional allowed origins here
          ])
          allowedMethods: ['GET', 'PUT', 'POST', 'DELETE']
        }
        {{- end}}
      }
      {{- end}}
      registries: [
        {
          server: '${containerRegistryName}.azurecr.io'
          identity: identity.id
        }
      ]
      secrets: union([
        {{- if .DbCosmosMongo}}
        {
          name: 'azure-cosmos-connection-string'
          value: cosmosDbConnectionString
        }
        {{- end}}
        {{- if .DbPostgres}}
        {
          name: 'postgres-db-pass'
          value: postgresDatabasePassword
        }
        {{- end}}
        {{- if .AzureServiceBus}}
        {
          name: 'spring-cloud-azure-servicebus-connection-string'
          value: azureServiceBusConnectionString
        }
        {{- end}}
      ],
      map(secrets, secret => {
        name: secret.secretRef
        value: secret.value
      }))
    }
    template: {
      containers: [
        {
          image: fetchLatestImage.outputs.?containers[?0].?image ?? 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'
          name: 'main'
          env: union([
            {
              name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
              value: applicationInsights.properties.ConnectionString
            }
            {{- if .DbCosmosMongo}}
            {
              name: 'AZURE_COSMOS_MONGODB_CONNECTION_STRING'
              secretRef: 'azure-cosmos-connection-string'
            }
            {{- end}}
            {{- if .DbPostgres}}
            {
              name: 'POSTGRES_HOST'
              value: postgresDatabaseHost
            }
            {
              name: 'POSTGRES_USERNAME'
              value: postgresDatabaseUser
            }
            {
              name: 'POSTGRES_DATABASE'
              value: postgresDatabaseName
            }
            {
              name: 'POSTGRES_PASSWORD'
              secretRef: 'postgres-db-pass'
            }
            {
              name: 'POSTGRES_PORT'
              value: '5432'
            }
            {{- end}}
            {{- if .AzureServiceBus}}
            {
              name: 'SPRING_CLOUD_AZURE_SERVICEBUS_CONNECTION_STRING'
              secretRef: 'spring-cloud-azure-servicebus-connection-string'
            }
            {{- end}}
            {{- if .Frontend}}
            {{- range $i, $e := .Frontend.Backends}}
            {
              name: '{{upper .Name}}_BASE_URL'
              value: apiUrls[{{$i}}]
            }
            {{- end}}
            {{- end}}
            {{- if ne .Port 0}}
            {
              name: 'PORT'
              value: '{{ .Port }}'
            }
            {{- end}}
          ],
          env,
          map(secrets, secret => {
            name: secret.name
            secretRef: secret.secretRef
          }))
          resources: {
            cpu: json('1.0')
            memory: '2.0Gi'
          }
        }
      ]
      {{- if .DbRedis}}
      serviceBinds: [
        {
          serviceId: redis.id
          name: 'redis'
        }
      ]
      {{- end}}
      scale: {
        minReplicas: 1
        maxReplicas: 10
      }
    }
  }
}
{{- if (or .DbMySql .DbPostgres)}}

resource linkerCreatorIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: '${name}-linker-creator-identity'
  location: location
}

resource linkerCreatorRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: resourceGroup()
  name: guid(subscription().id, resourceGroup().id, linkerCreatorIdentity.id, 'linkerCreatorRole')
  properties: {
    roleDefinitionId:  subscriptionResourceId(
      'Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')
    principalType: 'ServicePrincipal'
    principalId: linkerCreatorIdentity.properties.principalId
  }
}
{{- end}}
{{- if .DbMySql}}

resource appLinkToMySql 'Microsoft.Resources/deploymentScripts@2023-08-01' = {
  dependsOn: [ linkerCreatorRole ]
  name: '${name}-link-to-mysql'
  location: location
  kind: 'AzureCLI'
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${linkerCreatorIdentity.id}': {}
    }
  }
  properties: {
    azCliVersion: '2.63.0'
    timeout: 'PT10M'
    scriptContent: 'apk update; apk add g++; apk add unixodbc-dev; az extension add --name containerapp; az extension add --name serviceconnector-passwordless --upgrade; az containerapp connection create mysql-flexible --connection appLinkToMySql --source-id ${app.id} --target-id ${mysqlDatabaseId} --client-type springBoot --user-identity client-id=${identity.properties.clientId} subs-id=${subscription().subscriptionId} user-object-id=${linkerCreatorIdentity.properties.principalId} mysql-identity-id=${mysqlIdentityName} -c main --yes;'
    cleanupPreference: 'OnSuccess'
    retentionInterval: 'P1D'
  }
}
{{- end}}
{{- if .DbPostgres}}

resource appLinkToPostgres 'Microsoft.Resources/deploymentScripts@2023-08-01' = {
  dependsOn: [ linkerCreatorRole ]
  name: '${name}-link-to-postgres'
  location: location
  kind: 'AzureCLI'
  identity: {
    type: 'UserAssigned'
    userAssignedIdentities: {
      '${linkerCreatorIdentity.id}': {}
    }
  }
  properties: {
    azCliVersion: '2.63.0'
    timeout: 'PT10M'
    scriptContent: 'apk update; apk add g++; apk add unixodbc-dev; az extension add --name containerapp; az extension add --name serviceconnector-passwordless --upgrade; az containerapp connection create postgres-flexible --connection appLinkToPostgres --source-id ${app.id} --target-id ${postgresDatabaseId} --client-type springBoot --user-identity client-id=${identity.properties.clientId} subs-id=${subscription().subscriptionId} user-object-id=${linkerCreatorIdentity.properties.principalId} -c main --yes; az tag create --resource-id ${app.id} --tags azd-service-name={{.Name}} '
    cleanupPreference: 'OnSuccess'
    retentionInterval: 'P1D'
  }
}
{{- end}}

output defaultDomain string = containerAppsEnvironment.properties.defaultDomain
output name string = app.name
output uri string = 'https://${app.properties.configuration.ingress.fqdn}'
output id string = app.id
{{ end}}
