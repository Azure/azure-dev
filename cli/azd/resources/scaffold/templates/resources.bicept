{{define "resources.bicep" -}}
@description('The location used for all deployed resources')
param location string = resourceGroup().location

@description('Tags that will be applied to all resources')
param tags object = {}

{{range .Parameters}}
{{- if .Secret}}
@secure()
{{- end}}
param {{.Name}} {{.Type}}
{{- end}}

@description('Id of the user or app to assign application roles')
param principalId string

var abbrs = loadJsonContent('./abbreviations.json')
var resourceToken = uniqueString(subscription().id, resourceGroup().id, location)

{{- if .Services }}

// Monitor application with Azure Monitor
module monitoring 'br/public:avm/ptn/azd/monitoring:0.1.0' = {
  name: 'monitoring'
  params: {
    logAnalyticsName: '${abbrs.operationalInsightsWorkspaces}${resourceToken}'
    applicationInsightsName: '${abbrs.insightsComponents}${resourceToken}'
    applicationInsightsDashboardName: '${abbrs.portalDashboards}${resourceToken}'
    location: location
    tags: tags
  }
}

// Container registry
module containerRegistry 'br/public:avm/res/container-registry/registry:0.1.1' = {
  name: 'registry'
  params: {
    name: '${abbrs.containerRegistryRegistries}${resourceToken}'
    location: location
    acrAdminUserEnabled: true
    tags: tags
    publicNetworkAccess: 'Enabled'
    roleAssignments:[
      {{- range .Services}}
      {
        principalId: {{bicepName .Name}}Identity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')
      }
      {{- end}}
    ]
  }
}

// Container apps environment
module containerAppsEnvironment 'br/public:avm/res/app/managed-environment:0.4.5' = {
  name: 'container-apps-environment'
  params: {
    logAnalyticsWorkspaceResourceId: monitoring.outputs.logAnalyticsWorkspaceResourceId
    name: '${abbrs.appManagedEnvironments}${resourceToken}'
    location: location
    zoneRedundant: false
    {{- if (and .DbPostgres .DbPostgres.AuthUsingManagedIdentity) }}
    roleAssignments: [
      {
        principalId: connectionCreatorIdentity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
      }
    ]
    {{- end}}
  }
}
{{- end}}

{{- if .DbCosmosMongo}}
module cosmos 'br/public:avm/res/document-db/database-account:0.4.0' = {
  name: 'cosmos'
  params: {
    tags: tags
    locations: [
      {
        failoverPriority: 0
        isZoneRedundant: false
        locationName: location
      }
    ]
    name: '${abbrs.documentDBDatabaseAccounts}${resourceToken}'
    location: location
    {{- if .DbCosmosMongo.DatabaseName}}
    mongodbDatabases: [
      {
        name: '{{ .DbCosmosMongo.DatabaseName }}'
      }
    ]
    {{- end}}
    secretsKeyVault: {
      keyVaultName: keyVault.outputs.name
      primaryWriteConnectionStringSecretName: 'MONGODB-URL'
    }
    capabilitiesToAdd: [ 'EnableServerless' ]
  }
}
{{- end}}

{{- if .DbPostgres}}
var postgreSqlDatabaseName = '{{ .DbPostgres.DatabaseName }}'
var postgreSqlDatabaseUser = 'psqladmin'
module postgreServer 'br/public:avm/res/db-for-postgre-sql/flexible-server:0.1.4' = {
  name: 'postgreServer'
  params: {
    // Required parameters
    name: '${abbrs.dBforPostgreSQLServers}${resourceToken}'
    skuName: 'Standard_B1ms'
    tier: 'Burstable'
    // Non-required parameters
    administratorLogin: postgreSqlDatabaseUser
    administratorLoginPassword: postgreSqlDatabasePassword
    geoRedundantBackup: 'Disabled'
    passwordAuth:'Enabled'
    firewallRules: [
      {
        name: 'AllowAllIps'
        startIpAddress: '0.0.0.0'
        endIpAddress: '255.255.255.255'
      }
    ]
    databases: [
      {
        name: postgreSqlDatabaseName
      }
    ]
    location: location
    {{- if (and .DbPostgres .DbPostgres.AuthUsingManagedIdentity) }}
    roleAssignments: [
      {
        principalId: connectionCreatorIdentity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
      }
    ]
    {{- end}}
  }
}
{{- end}}
{{- if (or (and .DbMySql .DbMySql.AuthUsingManagedIdentity) (and .DbPostgres .DbPostgres.AuthUsingManagedIdentity))}}

module connectionCreatorIdentity 'br/public:avm/res/managed-identity/user-assigned-identity:0.2.1' = {
  name: 'connectionCreatorIdentity'
  params: {
    name: '${abbrs.managedIdentityUserAssignedIdentities}cci-${resourceToken}'
    location: location
  }
}
{{- end}}
{{- if (and .DbPostgres .DbPostgres.AuthUsingManagedIdentity) }}
{{- range .Services}}
module {{bicepName .Name}}CreateConnectionToPostgreSql 'br/public:avm/res/resources/deployment-script:0.4.0' = {
  name: '{{bicepName .Name}}CreateConnectionToPostgreSql'
  params: {
    kind: 'AzureCLI'
    name: '${abbrs.deploymentScript}{{bicepName .Name}}-connection-to-pg-${resourceToken}'
    azCliVersion: '2.63.0'
    location: location
    managedIdentities: {
      userAssignedResourcesIds: [
        connectionCreatorIdentity.outputs.resourceId
      ]
    }
    runOnce: false
    retentionInterval: 'P1D'
    scriptContent: 'apk update; apk add g++; apk add unixodbc-dev; az extension add --name containerapp; az extension add --name serviceconnector-passwordless --upgrade; az containerapp connection create postgres-flexible --connection appLinkToPostgres --source-id ${ {{bicepName .Name}}.outputs.resourceId} --target-id ${postgreServer.outputs.resourceId}/databases/${postgreSqlDatabaseName} --client-type springBoot --user-identity client-id=${ {{bicepName .Name}}Identity.outputs.clientId} subs-id=${subscription().subscriptionId} user-object-id=${connectionCreatorIdentity.outputs.principalId} -c main --yes;'
  }
}
{{- end}}
{{- end}}
{{- if .AzureEventHubs }}

module eventHubNamespace 'br/public:avm/res/event-hub/namespace:0.7.1' = {
  name: 'eventHubNamespace'
  params: {
    name: '${abbrs.eventHubNamespaces}${resourceToken}'
    location: location
    roleAssignments: [
      {{- if (and .AzureEventHubs .AzureEventHubs.AuthUsingManagedIdentity) }}
      {{- range .Services}}
      {
        principalId: {{bicepName .Name}}Identity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')
      }
      {{- end}}
      {{- end}}
    ]
    {{- if (and .AzureEventHubs .AzureEventHubs.AuthUsingConnectionString) }}
    disableLocalAuth: false
    {{- end}}
    eventhubs: [
      {{- range $eventHubName := .AzureEventHubs.EventHubNames}}
      {
        name: '{{ $eventHubName }}'
      }
      {{- end}}
    ]
  }
}
{{- if (and .AzureEventHubs .AzureEventHubs.AuthUsingConnectionString) }}
module eventHubsConnectionString './modules/set-event-hubs-namespace-connection-string.bicep' = {
  name: 'eventHubsConnectionString'
  params: {
    eventHubsNamespaceName: eventHubNamespace.outputs.name
    connectionStringSecretName: 'EVENT-HUBS-CONNECTION-STRING'
    keyVaultName: keyVault.outputs.name
  }
}
{{end}}
{{end}}
{{- if .AzureStorageAccount }}
var storageAccountName = '${abbrs.storageStorageAccounts}${resourceToken}'
module storageAccount 'br/public:avm/res/storage/storage-account:0.14.3' = {
  name: 'storageAccount'
  params: {
    name: storageAccountName
    publicNetworkAccess: 'Enabled'
    blobServices: {
      containers: [
        {{- range $index, $element := .AzureStorageAccount.ContainerNames}}
        {
          name: '{{ $element }}'
        }
        {{- end}}
      ]
    }
    location: location
    roleAssignments: [
      {{- if (and .AzureStorageAccount .AzureStorageAccount.AuthUsingManagedIdentity) }}
      {{- range .Services}}
      {
        principalId: {{bicepName .Name}}Identity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')
      }
      {{- end}}
      {{- end}}
    ]
    networkAcls: {
      defaultAction: 'Allow'
    }
    tags: tags
  }
}

{{- if (and .AzureStorageAccount .AzureStorageAccount.AuthUsingConnectionString) }}
module storageAccountConnectionString './modules/set-storage-account-connection-string.bicep' = {
  name: 'storageAccountConnectionString'
  params: {
    storageAccountName: storageAccountName
    connectionStringSecretName: 'STORAGE-ACCOUNT-CONNECTION-STRING'
    keyVaultName: keyVault.outputs.name
  }
}
{{end}}
{{end}}

{{- if .AzureServiceBus }}

module serviceBusNamespace 'br/public:avm/res/service-bus/namespace:0.10.0' = {
  name: 'serviceBusNamespace'
  params: {
    // Required parameters
    name: '${abbrs.serviceBusNamespaces}${resourceToken}'
    // Non-required parameters
    location: location
    roleAssignments: [
      {{- if (and .AzureServiceBus .AzureServiceBus.AuthUsingManagedIdentity) }}
      {{- range .Services}}
      {
        principalId: {{bicepName .Name}}Identity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')
      }
      {{- end}}
      {{- end}}
    ]
    {{- if (and .AzureServiceBus .AzureServiceBus.AuthUsingConnectionString) }}
    disableLocalAuth: false
    {{- end}}
    queues: [
      {{- range $queue := .AzureServiceBus.Queues}}
      {
        name: '{{ $queue }}'
      }
      {{- end}}
    ]
  }
}

{{- if (and .AzureServiceBus .AzureServiceBus.AuthUsingConnectionString) }}
module serviceBusConnectionString './modules/set-servicebus-namespace-connection-string.bicep' = {
  name: 'serviceBusConnectionString'
  params: {
    serviceBusNamespaceName: serviceBusNamespace.outputs.name
    connectionStringSecretName: 'SERVICEBUS-CONNECTION-STRING'
    keyVaultName: keyVault.outputs.name
  }
}
{{end}}
{{end}}

{{- range .Services}}

module {{bicepName .Name}}Identity 'br/public:avm/res/managed-identity/user-assigned-identity:0.2.1' = {
  name: '{{bicepName .Name}}identity'
  params: {
    name: '${abbrs.managedIdentityUserAssignedIdentities}{{bicepName .Name}}-${resourceToken}'
    location: location
    {{- if (and .DbPostgres .DbPostgres.AuthUsingManagedIdentity) }}
    roleAssignments: [
      {
        principalId: connectionCreatorIdentity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
      }
    ]
    {{- end}}
  }
}

module {{bicepName .Name}}FetchLatestImage './modules/fetch-container-image.bicep' = {
  name: '{{bicepName .Name}}-fetch-image'
  params: {
    exists: {{bicepName .Name}}Exists
    name: '{{.Name}}'
  }
}

var {{bicepName .Name}}AppSettingsArray = filter(array({{bicepName .Name}}Definition.settings), i => i.name != '')
var {{bicepName .Name}}Secrets = map(filter({{bicepName .Name}}AppSettingsArray, i => i.?secret != null), i => {
  name: i.name
  value: i.value
  secretRef: i.?secretRef ?? take(replace(replace(toLower(i.name), '_', '-'), '.', '-'), 32)
})
var {{bicepName .Name}}Env = map(filter({{bicepName .Name}}AppSettingsArray, i => i.?secret == null), i => {
  name: i.name
  value: i.value
})

module {{bicepName .Name}} 'br/public:avm/res/app/container-app:0.8.0' = {
  name: '{{bicepName .Name}}'
  params: {
    name: '{{containerAppName .Name}}'
    {{- if ne .Port 0}}
    ingressTargetPort: {{.Port}}
    {{- end}}
    {{- if (and .Backend .Backend.Frontends)}}
    corsPolicy: {
      allowedOrigins: [
        {{- range .Backend.Frontends}}
        'https://{{.Name}}.${containerAppsEnvironment.outputs.defaultDomain}'
        {{- end}}
      ]
    }
    {{- end}}
    scaleMinReplicas: 1
    scaleMaxReplicas: 10
    secrets: {
      secureList:  union([
        {{- if .DbCosmosMongo}}
        {
          name: 'mongodb-url'
          identity:{{bicepName .Name}}Identity.outputs.resourceId
          keyVaultUrl: '${keyVault.outputs.uri}secrets/MONGODB-URL'
        }
        {{- end}}
        {{- if (and .DbPostgres .DbPostgres.AuthUsingUsernamePassword) }}
        {
          name: 'postgresql-password'
          value: postgreSqlDatabasePassword
        }
        {
          name: 'postgresql-db-url'
          value: 'postgresql://${postgreSqlDatabaseUser}:${postgreSqlDatabasePassword}@${postgreServer.outputs.fqdn}:5432/${postgreSqlDatabaseName}'
        }
        {{- end}}
        {{- if .DbRedis}}
        {
          name: 'redis-pass'
          identity:{{bicepName .Name}}Identity.outputs.resourceId
          keyVaultUrl: '${keyVault.outputs.uri}secrets/REDIS-PASSWORD'
        }
        {
          name: 'redis-url'
          identity:{{bicepName .Name}}Identity.outputs.resourceId
          keyVaultUrl: '${keyVault.outputs.uri}secrets/REDIS-URL'
        }
        {{- end}}
        {{- if (and .AzureEventHubs .AzureEventHubs.AuthUsingConnectionString) }}
        {
          name: 'event-hubs-connection-string'
          identity:{{bicepName .Name}}Identity.outputs.resourceId
          keyVaultUrl: '${keyVault.outputs.uri}secrets/EVENT-HUBS-CONNECTION-STRING'
        }
        {{- end}}
        {{- if (and .AzureServiceBus .AzureServiceBus.AuthUsingConnectionString) }}
        {
          name: 'servicebus-connection-string'
          identity:{{bicepName .Name}}Identity.outputs.resourceId
          keyVaultUrl: '${keyVault.outputs.uri}secrets/SERVICEBUS-CONNECTION-STRING'
        }
        {{- end}}
        {{- if (and .AzureStorageAccount .AzureStorageAccount.AuthUsingConnectionString) }}
        {
          name: 'storage-account-connection-string'
          identity:{{bicepName .Name}}Identity.outputs.resourceId
          keyVaultUrl: '${keyVault.outputs.uri}secrets/STORAGE-ACCOUNT-CONNECTION-STRING'
        }
        {{- end}}
      ],
      map({{bicepName .Name}}Secrets, secret => {
        name: secret.secretRef
        value: secret.value
      }))
    }
    containers: [
      {
        image: {{bicepName .Name}}FetchLatestImage.outputs.?containers[?0].?image ?? 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'
        name: 'main'
        resources: {
          cpu: json('0.5')
          memory: '1.0Gi'
        }
        env: union([
          {
            name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
            value: monitoring.outputs.applicationInsightsConnectionString
          }
          {
            name: 'AZURE_CLIENT_ID'
            value: {{bicepName .Name}}Identity.outputs.clientId
          }
          {{- if .DbCosmosMongo}}
          {
            name: 'MONGODB_URL'
            secretRef: 'mongodb-url'
          }
          {{- end}}
          {{- if .DbPostgres}}
          {
            name: 'POSTGRES_HOST'
            value: postgreServer.outputs.fqdn
          }
          {
            name: 'POSTGRES_DATABASE'
            value: postgreSqlDatabaseName
          }
          {
            name: 'POSTGRES_PORT'
            value: '5432'
          }
          {
            name: 'SPRING_DATASOURCE_URL'
            value: 'jdbc:postgresql://${postgreServer.outputs.fqdn}:5432/${postgreSqlDatabaseName}'
          }
          {{- end}}
          {{- if (and .DbPostgres .DbPostgres.AuthUsingUsernamePassword) }}
          {
            name: 'POSTGRES_URL'
            secretRef: 'postgresql-db-url'
          }
          {
            name: 'POSTGRES_USERNAME'
            value: postgreSqlDatabaseUser
          }
          {
            name: 'POSTGRES_PASSWORD'
            secretRef: 'postgresql-password'
          }
          {
            name: 'SPRING_DATASOURCE_USERNAME'
            value: postgreSqlDatabaseUser
          }
          {
            name: 'SPRING_DATASOURCE_PASSWORD'
            secretRef: 'postgresql-password'
          }
          {{- end}}
          {{- if .DbRedis}}
          {
            name: 'REDIS_HOST'
            value: redis.outputs.hostName
          }
          {
            name: 'REDIS_PORT'
            value: string(redis.outputs.sslPort)
          }
          {
            name: 'REDIS_URL'
            secretRef: 'redis-url'
          }
          {
            name: 'REDIS_ENDPOINT'
            value: '${redis.outputs.hostName}:${string(redis.outputs.sslPort)}'
          }
          {
            name: 'REDIS_PASSWORD'
            secretRef: 'redis-pass'
          }
          {{- end}}
          {{- if .AzureEventHubs }}
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_NAMESPACE'
            value: eventHubNamespace.outputs.name
          }
          {{- end}}
          {{- if (and .AzureEventHubs .AzureEventHubs.AuthUsingManagedIdentity) }}
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_CONNECTIONSTRING'
            value: ''
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_CREDENTIAL_MANAGEDIDENTITYENABLED'
            value: 'true'
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_CREDENTIAL_CLIENTID'
            value: {{bicepName .Name}}Identity.outputs.clientId
          }
          {{- end}}
          {{- if (and .AzureEventHubs .AzureEventHubs.AuthUsingConnectionString) }}
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_CONNECTIONSTRING'
            secretRef: 'event-hubs-connection-string'
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_CREDENTIAL_MANAGEDIDENTITYENABLED'
            value: 'false'
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_CREDENTIAL_CLIENTID'
            value: ''
          }
          {{- end}}
          {{- if .AzureStorageAccount }}
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_PROCESSOR_CHECKPOINTSTORE_ACCOUNTNAME'
            value: storageAccountName
          }
          {{- end}}
          {{- if (and .AzureStorageAccount .AzureStorageAccount.AuthUsingManagedIdentity) }}
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_PROCESSOR_CHECKPOINTSTORE_CONNECTIONSTRING'
            value: ''
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_PROCESSOR_CHECKPOINTSTORE_CREDENTIAL_MANAGEDIDENTITYENABLED'
            value: 'true'
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_PROCESSOR_CHECKPOINTSTORE_CREDENTIAL_CLIENTID'
            value: {{bicepName .Name}}Identity.outputs.clientId
          }
          {{- end}}
          {{- if (and .AzureStorageAccount .AzureStorageAccount.AuthUsingConnectionString) }}
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_PROCESSOR_CHECKPOINTSTORE_CONNECTIONSTRING'
            secretRef: 'storage-account-connection-string'
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_PROCESSOR_CHECKPOINTSTORE_CREDENTIAL_MANAGEDIDENTITYENABLED'
            value: 'false'
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_PROCESSOR_CHECKPOINTSTORE_CREDENTIAL_CLIENTID'
            value: ''
          }
          {{- end}}

          {{- if .AzureServiceBus }}
          {
            name: 'SPRING_CLOUD_AZURE_SERVICEBUS_NAMESPACE'
            value: serviceBusNamespace.outputs.name
          }
          {{- end}}
          {{- if (and .AzureServiceBus .AzureServiceBus.AuthUsingManagedIdentity) }}
          {
            name: 'SPRING_CLOUD_AZURE_SERVICEBUS_CONNECTIONSTRING'
            value: ''
          }
          {
            name: 'SPRING_CLOUD_AZURE_SERVICEBUS_CREDENTIAL_MANAGEDIDENTITYENABLED'
            value: 'true'
          }
          {
            name: 'SPRING_CLOUD_AZURE_SERVICEBUS_CREDENTIAL_CLIENTID'
            value: {{bicepName .Name}}Identity.outputs.clientId
          }
          {{- end}}
          {{- if (and .AzureServiceBus .AzureServiceBus.AuthUsingConnectionString) }}
          {
            name: 'SPRING_CLOUD_AZURE_SERVICEBUS_CONNECTIONSTRING'
            secretRef: 'servicebus-connection-string'
          }
          {
            name: 'SPRING_CLOUD_AZURE_SERVICEBUS_CREDENTIAL_MANAGEDIDENTITYENABLED'
            value: 'false'
          }
          {
            name: 'SPRING_CLOUD_AZURE_EVENTHUBS_CREDENTIAL_CLIENTID'
            value: ''
          }
          {{- end}}

          {{- if .Frontend}}
          {{- range $i, $e := .Frontend.Backends}}
          {
            name: '{{upper .Name}}_BASE_URL'
            value: 'https://{{.Name}}.internal.${containerAppsEnvironment.outputs.defaultDomain}'
          }
          {{- end}}
          {{- end}}
          {{- if ne .Port 0}}
          {
            name: 'PORT'
            value: '{{ .Port }}'
          }
          {{- end}}
        ],
        {{bicepName .Name}}Env,
        map({{bicepName .Name}}Secrets, secret => {
            name: secret.name
            secretRef: secret.secretRef
        }))
      }
    ]
    managedIdentities:{
      systemAssigned: false
      userAssignedResourceIds: [{{bicepName .Name}}Identity.outputs.resourceId]
    }
    registries:[
      {
        server: containerRegistry.outputs.loginServer
        identity: {{bicepName .Name}}Identity.outputs.resourceId
      }
    ]
    environmentResourceId: containerAppsEnvironment.outputs.resourceId
    location: location
    tags: union(tags, { 'azd-service-name': '{{.Name}}' })
    {{- if (and .DbPostgres .DbPostgres.AuthUsingManagedIdentity) }}
    roleAssignments: [
      {
        principalId: connectionCreatorIdentity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
      }
    ]
    {{- end}}
  }
}
{{- end}}

{{- if .DbRedis}}
module redis 'br/public:avm/res/cache/redis:0.3.2' = {
  name: 'redisDeployment'
  params: {
    // Required parameters
    name: '${abbrs.cacheRedis}${resourceToken}'
    // Non-required parameters
    location: location
    skuName: 'Basic'
  }
}

module redisConn './modules/set-redis-conn.bicep' = {
  name: 'redisConn'
  params: {
    name: redis.outputs.name
    passwordSecretName: 'REDIS-PASSWORD'
    urlSecretName: 'REDIS-URL'
    keyVaultName: keyVault.outputs.name
  }
}
{{- end}}

{{- if .Services}}
// Create a keyvault to store secrets
module keyVault 'br/public:avm/res/key-vault/vault:0.6.1' = {
  name: 'keyvault'
  params: {
    name: '${abbrs.keyVaultVaults}${resourceToken}'
    location: location
    tags: tags
    enableRbacAuthorization: false
    accessPolicies: [
      {
        objectId: principalId
        permissions: {
          secrets: [ 'get', 'list' ]
        }
      }
      {{- range .Services}}
      {
        objectId: {{bicepName .Name}}Identity.outputs.principalId
        permissions: {
          secrets: [ 'get', 'list' ]
        }
      }
      {{- end}}
    ]
    secrets: [
      {{- if (and .DbPostgres .DbPostgres.AuthUsingUsernamePassword) }}
      {
        name: 'postgresql-password'
        value: postgreSqlDatabasePassword
      }
      {{- end}}
    ]
  }
}
{{- end}}

{{- if .Services}}
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = containerRegistry.outputs.loginServer
output AZURE_KEY_VAULT_ENDPOINT string = keyVault.outputs.uri
output AZURE_KEY_VAULT_NAME string = keyVault.outputs.name
{{- end}}
{{- if .DbRedis}}
output AZURE_CACHE_REDIS_ID string = redis.outputs.resourceId
{{- end}}
{{- if .DbPostgres}}
output AZURE_POSTGRES_FLEXIBLE_SERVER_ID string = postgreServer.outputs.resourceId
{{- end}}
{{- if .AzureEventHubs }}
output AZURE_EVENT_HUBS_ID string = eventHubNamespace.outputs.resourceId
{{- end}}
{{- if .AzureServiceBus }}
output AZURE_SERVICE_BUS_ID string = serviceBusNamespace.outputs.resourceId
{{- end}}
{{ end}}
