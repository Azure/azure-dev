@page "/redis"
@using StackExchange.Redis
@rendermode InteractiveServer
@inject StackExchange.Redis.IConnectionMultiplexer redis

<PageTitle>Redis</PageTitle>

<h1>Redis Pubsub</h1>

<p>Here you can test if Redis is accepting and delivering messages. If so, you know Redis is working end-to-end.</p>

<p id="messageContainer">@messageReceived</p>

<InputText @bind-Value="messageEntered" />
<button class="btn btn-primary" id="sendMessageButton" @onclick="SendMessage">Send</button>

@if (messages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Messages</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in messages)
            {
                <tr>
                    <td>@message</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    string messageEntered = RandomString();
    string messageReceived = "No message yet";
    List<string> messages = new();

    override protected async Task OnInitializedAsync()
    {
        await redis.GetSubscriber().SubscribeAsync(RedisChannel.Literal("tests"), (channel, value) =>
        {
            messageReceived = value.ToString();
            messages.Add(value.ToString());
            InvokeAsync(() => StateHasChanged());
        });
    }

    private static string RandomString() => new string(Enumerable.Repeat("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", 10)
        .Select(s => s[Random.Shared.Next(s.Length)]).ToArray());

    private async void SendMessage()
    {
        await redis.GetSubscriber().PublishAsync(RedisChannel.Literal("tests"), $"Sent to Redis: {messageEntered}");
        messageEntered = RandomString();
    }
}
