pr:
  branches:
    include: [main]

  paths:
    include:
      - eng/pipelines/build-notice.yml

trigger:
  branches:
    include: [main]


variables:
  - template: /eng/pipelines/templates/variables/globals.yml
  - name: EnableGoCliScan
    value: true

jobs:
  - job: PoliCheck
    pool:
      name: azsdk-pool-mms-win-2022-general
      vmImage: MMS2022
    timeoutInMinutes: 120
    steps:
      - template: /eng/common/pipelines/templates/steps/policheck.yml
        parameters:
          ExclusionDataBaseFileName: AzDevPoliCheckExclusion
          PublishAnalysisLogs: false


  - job: BuildCLI
    strategy:
      matrix:
        Windows:
          Pool: azsdk-pool-mms-win-2022-general
          OSVmImage: windows
          BuildTarget: azd-windows-amd64.exe
          BuildOutputName: azd.exe
        Linux:
          Pool: azsdk-pool-mms-ubuntu-2004-general
          OSVmImage:  MMSUbuntu20.04
          BuildTarget: azd-linux-amd64
          BuildOutputName: azd
        Mac:
          Pool: Azure Pipelines
          OSVmImage: macOS-11
          BuildTarget: azd-darwin-amd64
          BuildOutputName: azd
    pool:
        name: $(Pool)
        vmImage: $(OSVmImage)

    variables:
      CLI_VERSION: 1.0.0-alpha.1

    steps:
      - checkout: self
      - template: /eng/pipelines/templates/steps/setup-go.yml

      - task: PowerShell@2
        inputs:
          pwsh: true
          targetType: filePath
          filePath: cli/azd/ci-build.ps1
          arguments: >-
            -Version $(CLI_VERSION)
            -SourceVersion $(Build.SourceVersion)
          workingDirectory: cli/azd
        displayName: Build Go Binary

      - pwsh: Move-Item $(BuildOutputName) $(BuildTarget)
        workingDirectory: cli/azd
        displayName: Rename binaries

      - publish: cli/azd/$(BuildTarget)
        artifact: $(BuildTarget)

      - task: ComponentGovernanceComponentDetection@0

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-apiscan.APIScan@2
        displayName: 'Run APIScan'
        condition: and(succeeded(), eq(variables['OSVmImage'], 'windows'))
        inputs:
          softwareFolder: $(Build.ArtifactStagingDirectory)
          # SoftwareName cannot change as it is used for looking up baselining data
          softwareName: 'Azure Developer CLI'
          softwareVersionNum: '$(CLI_VERSION)'
          isLargeApp: false
          preserveLogsFolder: true
          verbosityLevel: standard
        env:
          # azure-sdk-apiscan (81109e5f-0620-423c-a37a-c22fbf8973a7)
          AzureServicesAuthConnectionString: runAs=App;AppId=81109e5f-0620-423c-a37a-c22fbf8973a7;TenantId=72f988bf-86f1-41af-91ab-2d7cd011db47;AppKey=$(azure-sdk-apiscan-client-secret)

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
        displayName: 'Post Analysis (ApiScan)'
        condition: and(succeeded(), eq(variables['OSVmImage'], 'windows'))
        inputs:
          GdnBreakAllTools: false
          GdnBreakGdnToolApiScan: true
          GdnBreakGdnToolApiScanSeverity: Warning
        continueOnError: true

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
        displayName: 'Publish Analysis Logs'
        condition: and(succeededOrFailed(), eq(variables['OSVmImage'], 'windows'))
        inputs:
          APIScan: true

  - job: BuildScanVscode
    strategy:
      matrix:
        # Disable Windows build until packaging fixed on Windows https://github.com/Azure/azure-dev/issues/1336
        # Windows:
        #   Pool: azsdk-pool-mms-win-2022-general
        #   OSVmImage: MMS2022
        Linux:
          Pool: azsdk-pool-mms-ubuntu-2004-general
          OSVmImage:  MMSUbuntu20.04
        Mac:
          Pool: Azure Pipelines
          OSVmImage: macOS-11

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    variables:
      NodeVersion: 18.x

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(NodeVersion)

      - bash: |
          npm install -g npm vsce
          npm ci --no-optional
        workingDirectory: ext/vscode

      - pwsh: ./ci-package.ps1
        workingDirectory: ext/vscode
        displayName: Package

      - task: ComponentGovernanceComponentDetection@0

  - job: BuildScanContainer
    dependsOn: BuildCli
    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      OSVmImage: MMSUbuntu20.04

    variables:
      ContainerName: azure-dev:cg-scan

    steps:
      - checkout: self
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: azd-linux-amd64
          path: cli/bin

      - bash: |
          docker build . -t $(ContainerName) -f cli/Dockerfile
        displayName: Build container

      - task: ComponentGovernanceComponentDetection@0
        inputs:
          dockerImagesToScan: $(ContainerName)

      - task: ComponentGovernanceComponentDetection@0

  - job: GenerateNoticeTxt
    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      OSVmImage: MMSUbuntu20.04

    steps:
      - task: ComponentGovernanceComponentDetection@0

      - task: notice@0
        displayName: Generate NOTICE.txt file
        inputs:
          outputfile: $(Build.SourcesDirectory)/NOTICE.txt
          outputformat: text

      - publish: NOTICE.txt
        artifact: notice
