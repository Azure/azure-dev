# Continuous deployment trigger
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - go.mod
      - cli/azd/extensions/
      - eng/pipelines/release-azd-extension.yml
      - eng/pipelines/templates/jobs/build-azd-extension.yml
      - eng/pipelines/templates/variables/image.yml

pr:
  paths:
    include:
      - go.mod
      - cli/azd/extensions/
      - eng/pipelines/release-azd-extension.yml
      - eng/pipelines/templates/steps/publish-cli.yml
    exclude:
      - cli/azd/docs/**

parameters:
  - name: AzdExtensionId
    type: string
  - name: AzdExtensionDirectory
    type: string

variables:
  - name: sanitizedExtensionId
    value: ${{ replace(parameters.AzdExtensionId, '.', '-') }}

extends:
  template: eng/pipelines/templates/stages/1es-redirect.yml
  parameters:
    stages:
      - template: eng/pipelines/templates/stages/build-and-test-azd-extension.yml
        parameters:
          AzdExtensionId: ${{ parameters.AzdExtensionId }}
          AzdExtensionDirectory: ${{ parameters.AzdExtensionDirectory }}
          BuildMatrix:
            Windows:
              Pool: $(WINDOWSPOOL)
              OSVmImage: $(WINDOWSVMIMAGE)
              OS: windows
              ImageKey: image
              UploadArtifact: true
              Variables:
                BuildTarget: ${{ variables.sanitizedExtensionId }}-windows-amd64.exe
                BuildOutputName: ${{ variables.sanitizedExtensionId }}-windows-amd64.exe
                BuildTestMsi: true
                AZURE_DEV_CI_OS: win
                Codeql.Enabled: true
                Codeql.SkipTaskAutoInjection: false
                Codeql.BuildIdentifier: cli_windows
            Linux:
              Pool: $(LINUXPOOL)
              OSVmImage: $(LINUXVMIMAGE)
              OS: linux
              ImageKey: image
              UploadArtifact: true
              Variables:
                BuildTarget: ${{ variables.sanitizedExtensionId }}-linux-amd64
                BuildOutputName: ${{ variables.sanitizedExtensionId }}-linux-amd64
                SetExecutableBit: true
                SetShieldInfo: true
                BuildLinuxPackages: true
                AZURE_DEV_CI_OS: lin
                Codeql.Enabled: true
                Codeql.SkipTaskAutoInjection: false
                Codeql.BuildIdentifier: cli_linux
            Mac:
              Pool: Azure Pipelines
              OSVmImage: $(MACVMIMAGE)
              OS: macOS
              ImageKey: vmImage
              UploadArtifact: true
              Variables:
                BuildTarget: ${{ variables.sanitizedExtensionId }}-darwin-amd64
                BuildOutputName: ${{ variables.sanitizedExtensionId }}-darwin-amd64
                MacLocalSign: false
                SetExecutableBit: true
                AZURE_DEV_CI_OS: mac
                # CodeQL on macOS not supported by the Azure DevOps task as-of current.
                # Codeql.BuildIdentifier: cli_darwin

            ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
              # Only run this build during scheduled pipeline executions
              MacAppleSilicon:
                Pool: Azure Pipelines
                OSVmImage: $(MACVMIMAGEM1)
                OS: macOS
                ImageKey: vmImage
                UploadArtifact: false
                Variables:
                  BuildTarget: ${{ variables.sanitizedExtensionId }}-darwin-amd64
                  BuildOutputName: ${{ variables.sanitizedExtensionId }}-darwin-amd64
                  MacLocalSign: false
                  SetExecutableBit: true
                  AZURE_DEV_CI_OS: mac-arm64

      - template: eng/pipelines/templates/stages/code-coverage-upload.yml
        parameters:
          DownloadArtifacts:
            - cover-win
            - cover-lin
            - cover-mac
            - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
                - cover-mac-arm64

      # - ${{ if ne(variables['Build.Reason'], 'Schedule') }}:
      #     - template: eng/pipelines/templates/stages/sign.yml

      #     - template: eng/pipelines/templates/stages/publish.yml
