resources:
  repositories:
    - repository: azure-sdk-build-tools
      type: git
      name: internal/azure-sdk-build-tools
      ref: refs/tags/azure-sdk-build-tools_20221201.3

# Continuous deployment trigger
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - go.mod
      - cli/
      - eng/pipelines/release-cli.yml

pr:
  paths:
    include:
      - go.mod
      - cli/
      - eng/pipelines/release-cli.yml

variables:
  - template: /eng/pipelines/templates/variables/globals.yml

stages:
  - stage: BuildAndTest
    jobs:
      - job: BuildCLI
        strategy:
          matrix:
            Windows:
              Pool: azsdk-pool-mms-win-2019-general
              OSVmImage: MMS2019
              BuildTarget: azd-windows-amd64.exe
              BuildOutputName: azd.exe
              BuildTestMsi: true
              AZURE_DEV_CI_OS: win
            Linux:
              Pool: azsdk-pool-mms-ubuntu-2004-general
              OSVmImage:  MMSUbuntu20.04
              BuildTarget: azd-linux-amd64
              BuildOutputName: azd
              SetExecutableBit: true
              SetShieldInfo: true
              GenerateCoverage: true
              AZURE_DEV_CI_OS: lin
            Mac:
              Pool: Azure Pipelines
              OSVmImage: macOS-11
              BuildTarget: azd-darwin-amd64
              BuildOutputName: azd
              MacLocalSign: false
              SetExecutableBit: true
              AZURE_DEV_CI_OS: mac
        pool:
            name: $(Pool)
            vmImage: $(OSVmImage)
        timeoutInMinutes: 180
        steps:
          - checkout: self
          - template: /eng/pipelines/templates/steps/setup-go.yml
            parameters:
              Condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))

          - template: /eng/pipelines/templates/steps/set-cli-version-cd.yml

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-CliVersionVariable.ps1
            displayName: Set CLI_VERSION

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: cli/azd/ci-build.ps1
              arguments: >-
                -Version $(CLI_VERSION)
                -SourceVersion $(Build.SourceVersion)
              workingDirectory: cli/azd
            displayName: Build Go Binary

          - template: /eng/pipelines/templates/steps/build-msi.yml
            parameters:
              Title: Build Test MSI
              Condition: and(succeeded(), eq(variables['BuildTestMsi'], 'true'))

          - template: /eng/pipelines/templates/steps/install-bicep.yml
            parameters:
              Condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))

          - template: /eng/pipelines/templates/steps/install-terraform.yml

          - task: DockerInstaller@0
            displayName: Docker Installer
            condition: and(succeeded(), contains(variables['OSVmImage'], 'macOS'))
            inputs:
              dockerVersion: 17.09.0-ce
              releaseType: stable

          # Live testing uses dotnet 6.0.x in the WebApp project deployment
          - task: UseDotNet@2
            condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))
            inputs:
              version: 6.0.x

          - template: /eng/pipelines/templates/steps/az-login.yml

          - template: /eng/pipelines/templates/steps/azd-login.yml
            parameters:
              AzdDirectory: cli/azd

          - task: PowerShell@2
            condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))
            inputs:
              pwsh: true
              targetType: filePath
              filePath: cli/azd/ci-test.ps1
              workingDirectory: cli/azd
            displayName: Test Go Binary
            env:
              # Set GITHUB_RUN_NUMBER because cli_test.go is coupled to that
              # environment variable.
              GITHUB_RUN_NUMBER: $(Build.BuildId)
              # Generate junit report to publish results
              GOTESTSUM_JUNITFILE: junitTestReport.xml
              # Required for Terraform service principal authentication
              ARM_CLIENT_ID: $(arm-client-id)
              ARM_CLIENT_SECRET: $(arm-client-secret)
              ARM_TENANT_ID: $(arm-tenant-id)

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: '**/junitTestReport.xml'
              testRunTitle: $(Agent.JobName)
              searchFolder: cli/azd
              publishRunAttachments: true
            displayName: Publish test results
            condition: succeededOrFailed()

          - pwsh: |
              go install github.com/axw/gocov/gocov@latest
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
              go install github.com/AlekSi/gocov-xml@latest
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
              ~/go/bin/gocov convert cover.out | ~/go/bin/gocov-xml > coverage.xml
            workingDirectory: cli/azd
            condition: >-
              and(
                succeeded(),
                eq(variables['GenerateCoverage'], 'true'),
                ne(variables['Skip.LiveTest'], 'true')
              )
            displayName: Generate coverage

          - task: PublishCodeCoverageResults@1
            condition: >-
              and(
                succeeded(),
                eq(variables['GenerateCoverage'], 'true'),
                ne(variables['Skip.LiveTest'], 'true')
              )
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.xml'
            displayName: Publish Code Coverage to DevOps

          - pwsh: Move-Item $(BuildOutputName) $(BuildTarget)
            workingDirectory: cli/azd
            displayName: Rename binaries

          - bash: chmod +x $(BuildTarget)
            condition: and(succeeded(), eq(variables['SetExecutableBit'], 'true'))
            workingDirectory: cli/azd
            displayName: Set executable bit for non-Windows binaries

          - task: PowerShell@2
            condition: and(succeeded(), eq(variables['SetShieldInfo'], 'true'))
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-ShieldInfo.ps1
              arguments: >-
                -TemplatePath eng/shields/standalone.json
                -Version "$(CLI_VERSION)"
            displayName: Set shield info

          - publish: eng/shields/standalone.json
            condition: and(succeeded(), eq(variables['SetShieldInfo'], 'true'))
            artifact: shield-standalone
            displayName: Upload standalone shield json

          - publish: cli/azd/$(BuildTarget)
            artifact: $(BuildTarget)
            condition: always()
            displayName: Upload azd binary to artifact store

          - publish: cli/installer/windows/bin/Release
            artifact: test-msi
            condition: and(succeeded(), eq(variables['BuildTestMsi'], 'true'))
            displayName: Upload test MSI

      - job: GenerateReleaseArtifacts
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          vmImage: MMSUbuntu20.04

        steps:
          - checkout: self

          - template: /eng/pipelines/templates/steps/setup-go.yml

          # Install scripts
          - pwsh: |
              New-Item -ItemType Directory -Path installer
              Copy-Item cli/installer/*install-azd.ps1 installer/
            displayName: Copy installer scripts (*.ps1) for artifact upload

          - task: PublishPipelineArtifact@1
            displayName: Publish install scripts to artifacts for signing
            inputs:
              artifactName: install-pwsh
              targetPath: installer

          # CLI ref docs
          - pwsh: New-Item -ItemType Directory -Path docs
            workingDirectory: $(Pipeline.Workspace)
            displayName: Create docs artifact folder

          - pwsh: go run docgen.go
            workingDirectory: cli/azd/docs
            displayName: Generate CLI documentation

          - pwsh: Copy-Item $(Build.SourcesDirectory)/cli/azd/docs/md/* docs/ -Recurse
            workingDirectory: $(Pipeline.Workspace)
            displayName: Copy CLI docs for pipeline artifact staging

          # azure.yaml.json schema docs
          - task: UsePythonVersion@0
            inputs:
              versionSpec: 3.x

          - pwsh: pip install jsonschema2md
            displayName: Install jsonschema2md

          - pwsh: jsonschema2md schemas/v1.0/azure.yaml.json $(Pipeline.Workspace)/docs/azure.yaml.schema.md
            displayName: Generate azure.yaml schema

          # Upload docs for CLI ref and azure.yaml schema
          - pwsh: Get-ChildItem .
            workingDirectory: $(Pipeline.Workspace)/docs
            displayName: Show doc artifacts to publish

          - publish: $(Pipeline.Workspace)/docs/
            artifact: docs
            displayName: Upload generated documentation

  - stage: Sign
    dependsOn: BuildAndTest
    jobs:

    - job: SignMac
      pool:
        name: azsdk-pool-mms-win-2019-general
        vmImage: MMS2019

      steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: azd-darwin-amd64
            path: mac-artifacts

        - pwsh: |
            New-Item -ItemType Directory -Path mac
            Compress-Archive `
            -Path mac-artifacts/azd-darwin-amd64 `
            -DestinationPath mac/azd-darwin-amd64.zip
          displayName: Package mac binary for signing

        - ${{ if in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual') }}:
          - template: pipelines/steps/azd-cli-mac-signing.yml@azure-sdk-build-tools
            parameters:
              MacPath: mac

        - ${{ else }}:
          - pwsh: Write-Host "Skipping signing. Build reason - $(Build.Reason)"
            displayName: Signing process skipped for non-release build

        - pwsh: |
            Expand-Archive -Path mac/azd-darwin-amd64.zip -DestinationPath mac/
            Remove-Item mac/azd-darwin-amd64.zip
          displayName: Extract azd-darwin-amd64 from zip and remove zip

        - pwsh: |
            New-Item -ItemType Directory -Path signed-mac
            Copy-Item mac/* signed-mac/ -Recurse
          displayName: Copy signing outputs
          condition: always()

        # TODO: Replace with https://github.com/Azure/azure-sdk-tools/blob/main/eng/common/pipelines/templates/steps/publish-artifact.yml
        # when the common engsys is imported.
        # https://github.com/Azure/azure-dev/issues/956
        - task: PublishPipelineArtifact@1
          condition: succeeded()
          displayName: Publish Signed Artifacts
          inputs:
            artifactName: signed-mac
            path: signed-mac/

        - task: PublishPipelineArtifact@1
          condition: failed()
          displayName: Publish failed Signed Artifacts
          inputs:
            artifactName: signed-mac-FailedAttempt$(System.JobAttempt)
            path: signed-mac/

    - job: SignWindows
      pool:
        name: azsdk-pool-mms-win-2019-general
        vmImage: MMS2019

      steps:
        # Checkout required to build MSI
        - checkout: self

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: azd-windows-amd64.exe
            path: win

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: install-pwsh
            path: installer

        - pwsh: Copy-Item installer/*.ps1 win
          displayName: Copy install scripts to win/

        - ${{ if in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual') }}:
          - template: pipelines/steps/azd-cli-win-signing.yml@azure-sdk-build-tools
            parameters:
              WinPath:  win
              WinPattern: '**'

        - ${{ else }}:
          - pwsh: Write-Host "Skipping signing. Build reason - $(Build.Reason)"
            displayName: Signing process skipped for non-release build

        - pwsh: |
            New-Item -ItemType Directory -Path signed-win
            Copy-Item win/* signed-win/ -Recurse
            Copy-Item win/azd-windows-amd64.exe cli/azd/azd.exe
          displayName: Copy signing outputs for publishing and MSI build
          condition: always()

        - task: PowerShell@2
          inputs:
            pwsh: true
            targetType: filePath
            filePath: eng/scripts/Set-CliVersionVariable.ps1
          displayName: Set CLI_VERSION for MSI build

        - template: /eng/pipelines/templates/steps/build-msi.yml
          parameters:
            Title: Build Release MSI

        - ${{ if in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual') }}:
          - template: pipelines/steps/azd-cli-win-signing.yml@azure-sdk-build-tools
            parameters:
              WinPath:  cli/installer/windows/bin/Release
              WinPattern: '*.msi'

        - ${{ else }}:
          - pwsh: Write-Host "Skipping signing. Build reason - $(Build.Reason)"
            displayName: Signing process skipped for non-release build

        - pwsh: Copy-Item cli/installer/windows/bin/Release/* signed-win/
          displayName: Copy MSI for publishing

        # TODO: Replace with https://github.com/Azure/azure-sdk-tools/blob/main/eng/common/pipelines/templates/steps/publish-artifact.yml
        # when the common engsys is imported.
        # https://github.com/Azure/azure-dev/issues/956
        - task: PublishPipelineArtifact@1
          condition: succeeded()
          displayName: Publish Signed Artifacts
          inputs:
            artifactName: signed-win
            path: signed-win/

        - task: PublishPipelineArtifact@1
          condition: failed()
          displayName: Publish failed Signed Artifacts
          inputs:
            artifactName: signed-win-FailedAttempt$(System.JobAttempt)
            path: signed-win/

  - stage: Verify_Installers
    condition: and(succeeded(), ne(variables['Skip.VerifyInstallers'], 'true'))
    dependsOn: BuildAndTest
    jobs:
      - job: Compress_For_Hosting
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          vmImage: MMSUbuntu20.04

        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: azd-windows-amd64.exe
              path: azd-windows-amd64.exe

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: azd-linux-amd64
              path: azd-linux-amd64

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: azd-darwin-amd64
              path: azd-darwin-amd64

          - pwsh: |
              Write-Host "Moving downloaded files to hosting folder"
              New-Item -ItemType Directory -Path hosting

              Write-Host "Compressing artifacts as if publishing"
              zip hosting/azd-windows-amd64.zip -j azd-windows-amd64.exe/azd-windows-amd64.exe

              chmod +x azd-darwin-amd64/azd-darwin-amd64
              zip hosting/azd-darwin-amd64.zip -j azd-darwin-amd64/azd-darwin-amd64

              chmod +x azd-linux-amd64/azd-linux-amd64
              tar -C azd-linux-amd64 -cvzf hosting/azd-linux-amd64.tar.gz azd-linux-amd64

              Get-ChildItem hosting/ -Recurse | Select-Object -Property Name,Size
            displayName: Move folders to hosting location

          - publish: hosting
            artifact: test-hosting

      - job: Verify_MSI
        dependsOn: Compress_For_Hosting
        pool: azsdk-pool-mms-win-2019-general
        strategy:
          matrix:
            PerUser: 
              PerMachine: $false
            AllUsers:
              PerMachine: $true
        steps:
          - checkout: self
          
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: test-msi
              path: msi
          
          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: cli/installer/windows/test-win-msi.ps1
              arguments: >-
                -PerMachine:$(PerMachine) 
                -MsiPath msi/azd-windows-amd64.msi
              # Do not exit on first Write-Error, write all messages and let the 
              # script handle exiting with an error status.
              errorActionPreference: continue
            displayName: Test MSI

      - job: Verify_Mac_InstallOver
        dependsOn: Compress_For_Hosting
        pool:
          name: Azure Pipelines
          vmImage: macOS-12

        steps:
          - checkout: self

          - bash: ./install-azd.sh --version daily --verbose
            displayName: Install "daily" version
            workingDirectory: cli/installer/

          - pwsh: azd version
            displayName: Run azd version

          - bash: ./install-azd.sh --version latest --verbose
            displayName: Install "latest" version
            workingDirectory: cli/installer/

          - pwsh: azd version
            displayName: Run azd version (expect no failure)

      - job: Verify_Installers
        dependsOn: Compress_For_Hosting
        strategy:
          matrix:
            LinuxDockerSh:
              Pool: azsdk-pool-mms-ubuntu-2004-general
              OSVmImage:  MMSUbuntu20.04
              TestShell: pwsh
              TestInstallCommand: >
                ./test-installer-containers.ps1
                -BaseUrl "http://host.docker.internal:8080"
                -Version ''
                -ContainerPrefix '$(docker-mirror-tag-prefix)/'
                -AdditionalRunArgs '--add-host=host.docker.internal:host-gateway'
            LinuxSh:
              Pool: azsdk-pool-mms-ubuntu-2004-general
              OSVmImage:  MMSUbuntu20.04
              TestShell: bash
              TestInstallCommand: >
                ./test-sh-install.sh "bash" "$BASEURL" "" &&
                ./test-telemetry-functions.sh "telemetry/linux.sh.telemetry.csv"
            LinuxPwsh:
              Pool: azsdk-pool-mms-ubuntu-2004-general
              OSVmImage:  MMSUbuntu20.04
              TestShell: pwsh
              TestInstallCommand: >
                ./test-pwsh-xplat-install.ps1 -BaseUrl $env:BASEURL -Version '';
                ./test-telemetry-functions.ps1 -NonInteractive -Shell pwsh -ExpectedFieldMap telemetry/linux.telemetry.json

            Mac11Sh:
              Pool: Azure Pipelines
              OSVmImage: macOS-11
              TestShell: bash
              TestInstallCommand: >
                ./test-sh-install.sh "bash" "$BASEURL" "" &&
                ./test-telemetry-functions.sh "telemetry/macos11.sh.telemetry.csv"
            Mac12Sh:
              Pool: Azure Pipelines
              OSVmImage: macOS-12
              TestShell: bash
              TestInstallCommand: >
                ./test-sh-install.sh "bash" "$BASEURL" "" &&
                ./test-telemetry-functions.sh "telemetry/macos12.sh.telemetry.csv"
            Mac12Pwsh:
              Pool: Azure Pipelines
              OSVmImage: macOS-12
              TestShell: pwsh
              # Should also test telemetry functions but cannot because of macOS
              # host limitations in DevOps which do not reproduce on non-DevOps
              # macs. Disabled for now.
              #  ./test-telemetry-functions.ps1 -Shell pwsh -ExpectedFieldMap telemetry/macos.telemetry.json
              TestInstallCommand: >
                ./test-pwsh-xplat-install.ps1 -BaseUrl $env:BASEURL -Version ''
            Mac11Pwsh:
              Pool: Azure Pipelines
              OSVmImage: macOS-11
              TestShell: pwsh
              # Should also test telemetry functions but cannot because of macOS
              # host limitations in DevOps which do not reproduce on non-DevOps
              # macs. Disabled for now.
              #  ./test-telemetry-functions.ps1 -Shell pwsh -ExpectedFieldMap telemetry/macos.telemetry.json
              TestInstallCommand: >
                ./test-pwsh-xplat-install.ps1 -BaseUrl $env:BASEURL -Version ''

            WindowsCmd:
              Pool: azsdk-pool-mms-win-2019-general
              OSVmImage: MMS2019
              TestShell: cmd
              TestInstallCommand: cmd /c test-windows-install.cmd %BASEURL%
            WindowsPwsh:
              Pool: azsdk-pool-mms-win-2019-general
              OSVmImage: MMS2019
              TestShell: pwsh
              TestInstallCommand: >
                ./test-win-install.ps1 -BaseUrl $env:BASEURL -Version '';
                ./test-telemetry-functions.ps1 -Shell pwsh -ExpectedFieldMap telemetry/windows.pwsh.telemetry.json
            WindowsPowerShell:
              Pool: azsdk-pool-mms-win-2019-general
              OSVmImage: MMS2019
              TestShell: powershell
              TestInstallCommand: >
                ./test-win-install.ps1 -BaseUrl $env:BASEURL -Version '';
                ./test-telemetry-functions.ps1 -Shell powershell -ExpectedFieldMap telemetry/windows.powershell.telemetry.json

        pool:
          name: $(Pool)
          vmImage: $(OSVmImage)

        variables:
          BaseUrl: http://127.0.0.1:8080

        timeoutInMinutes: 10

        steps:
          - checkout: self

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: test-hosting
              path: hosting

          - bash: ls
            workingDirectory: hosting

          - bash: nohup npx -y http-server &
            displayName: Start server in hosting/ (bash)
            condition: and(succeeded(), not(contains(variables['Agent.OS'], 'Windows')))
            workingDirectory: hosting

          - pwsh: |
              Start-Process npx.cmd `
                -ArgumentList @('-y', 'http-server') `
                -NoNewWindow `
                -PassThru `
                -RedirectStandardOutput ../server.log
              Write-Host "Server started, waiting for server to initialize"
              Start-Sleep -Seconds 15
            displayName: Start server in hosting/ (pwsh)
            condition: and(succeeded(), contains(variables['Agent.OS'], 'Windows'))
            workingDirectory: hosting

          - pwsh: |
              $tmpFile = New-TemporaryFile
              $timer = [Diagnostics.Stopwatch]::StartNew()
              $MAX_ELAPSED_SECONDS = 120
              $TIMEOUT_SECONDS = 12
              $SLEEP_SECONDS = 1

              while ($timer.Elapsed.TotalSeconds -lt $MAX_ELAPSED_SECONDS) {
                try {
                  Write-Host "Downloading file..."
                  Invoke-WebRequest `
                    $(BaseUrl)/azd-windows-amd64.zip `
                    -OutFile $tmpFile `
                    -TimeoutSec $TIMEOUT_SECONDS

                  if ($LASTEXITCODE) {
                    throw "Failed downloading file"
                  }
                } catch {
                  Write-Host "Error downloading file."
                  Write-Host $_
                  Start-Sleep -Seconds $SLEEP_SECONDS
                  continue
                }

                # Exit if the downloaded file size is less than a small threshold
                # this could mean an error in how the files are being served.
                if ((Get-Item $tmpFile).Length -le 100000) {
                  Get-Content $tmpFile
                  exit 1
                }

                break
              }

              Get-Item $tmpFile | Select-Object -Property Name,Length
            displayName: Verify installer hosting

          - pwsh: $(TestInstallCommand)
            condition: and(succeeded(), eq('pwsh', variables['TestShell']))
            workingDirectory: cli/installer/
            displayName: Test install script (pwsh)

          - powershell: $(TestInstallCommand)
            condition: and(succeeded(), eq('powershell', variables['TestShell']))
            workingDirectory: cli/installer/
            displayName: Test install script (PowerShell)

          - bash: $(TestInstallCommand)
            condition: and(succeeded(), eq('bash', variables['TestShell']))
            workingDirectory: cli/installer/
            displayName: Test install script (bash)

          - task: CmdLine@2
            condition: and(succeeded(), eq('cmd', variables['TestShell']))
            inputs:
              script: $(TestInstallCommand)
              workingDirectory: cli/installer/
            displayName: Test install script (cmd)

  - stage: PublishCLI
    dependsOn: Sign
    condition: >-
      and(
        succeeded(),
        ne(variables['Skip.Release'], 'true'),
        or(
          eq('Manual', variables['BuildReasonOverride']),
          and(
            eq('', variables['BuildReasonOverride']),
            eq('Manual', variables['Build.Reason'])
          )
        )
      )
    jobs:
      - deployment: Publish_Release
        condition: >-
          and(
            succeeded(),
            ne('true', variables['Skip.Publish'])
          )
        environment: azure-dev

        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          OSVmImage: MMSUbuntu20.04

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: PowerShell@2
                  inputs:
                    pwsh: true
                    targetType: filePath
                    filePath: eng/scripts/Set-CliVersionVariable.ps1
                  displayName: Set CLI_VERSION

                # TODO: Uncomment before release
                # - template: /eng/pipelines/templates/steps/publish-cli.yml
                #   parameters:
                #     CreateGitHubRelease: true
                #     PublishUploadLocations: release/$(CLI_VERSION);release/latest
                #     PublishShield: true
                #     DockerImageTags: $(CLI_VERSION);latest
                #     ReleaseSyndicatedDockerContainer: true
                #     PublishUpdatedDocs: true

                # TODO: Ensure steps go back into publish-cli.yml
                - task: DownloadPipelineArtifact@2
                  displayName: Download docs
                  inputs:
                    artifact: docs
                    path: docs

                - template: /eng/pipelines/templates/steps/set-git-credentials.yml

                - pwsh: |
                    git clone https://github.com/azure-sdk/azure-dev-docs-pr/
                    Copy-Item docs/azd.md azure-dev-docs/articles/azure-developer-cli/reference.md -Force
                  displayName: Clone azure-dev-docs and update reference.md
                    
                - template: /eng/common/pipelines/templates/steps/create-pull-request.yml
                  parameters:
                    # Use a unique branch name per-build and per-attempt to prevent
                    # collisions
                    PRBranchName: azure-dev-cli/$(CLI_VERSION)-$(Build.BuildId).$(System.JobAttempt)
                    CommitMsg: Update reference documents for Azure CLI @ $(CLI_VERSION)
                    PRTitle: Update reference documents for Azure CLI @ $(CLI_VERSION)
                    WorkingDirectory: $(System.DefaultWorkingDirectory)/azure-dev-docs  
                    RepoOwner: MicrosoftDocs
                    RepoName: azure-dev-docs
                    BaseBranchName: main

      # TODO: Uncomment before release
      # - deployment: Increment_Version
      #   condition: >-
      #     and(
      #       succeeded(),
      #       ne('true', variables['Skip.IncrementVersion'])
      #     )
      #   dependsOn: Publish_Release
      #   environment: azure-dev

      #   pool:
      #     name: azsdk-pool-mms-ubuntu-2004-general
      #     OSVmImage: MMSUbuntu20.04

      #   strategy:
      #     runOnce:
      #       deploy:
      #         steps:
      #           - checkout: self

      #           - task: PowerShell@2
      #             inputs:
      #               pwsh: true
      #               targetType: filePath
      #               filePath: eng/scripts/Update-CliVersion.ps1
      #             displayName: Increment CLI version

      #           - template: /eng/common/pipelines/templates/steps/create-pull-request.yml
      #             parameters:
      #               PRBranchName: cli-version-increment-$(Build.BuildId)
      #               CommitMsg: Increment CLI version after release
      #               PRTitle: Increment CLI version after release

  - stage: PublishIntegration
    dependsOn: Sign
    jobs:
      - job: Publish_Continuous_Deployment
        condition: >-
          and(
            succeeded(),
            ne(variables['Skip.Release'], 'true'),
            or(
              in(variables['BuildReasonOverride'], 'IndividualCI', 'BatchedCI'),
              and(
                eq('', variables['BuildReasonOverride']),
                in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')
              )
            )
          )
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          OSVmImage: MMSUbuntu20.04

        steps:
          - checkout: self
          - template: /eng/pipelines/templates/steps/set-cli-version-cd.yml

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-CliVersionVariable.ps1
            displayName: Set CLI_VERSION

          - template: /eng/pipelines/templates/steps/publish-cli.yml
            parameters:
              CreateGitHubRelease: false
              PublishUploadLocations: release/daily;daily/archive/$(Build.BuildId)-$(Build.SourceVersion)
              PublishShield: false
              DockerImageTags: daily;$(CLI_VERSION)

      - job: Publish_For_PR
        condition: >-
          and(
            succeeded(),
            ne(variables['Skip.Release'], 'true'),
            or(
              eq('PullRequest', variables['BuildReasonOverride']),
              and(
                eq('', variables['BuildReasonOverride']),
                eq(variables['Build.Reason'], 'PullRequest')
              )
            )
          )
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          OSVmImage: MMSUbuntu20.04

        steps:
          - checkout: self
          - pwsh: |
              $PRNumber = "$(System.PullRequest.PullRequestNumber)"
              if ($env:PRNUMBEROVERRIDE) {
                Write-Host "PR Number override: $($env:PRNUMBEROVERRIDE)"
                $PRNumber = "$($env:PRNUMBEROVERRIDE)"
              }
              Write-Host "##vso[task.setvariable variable=PRNumber]$PRNumber"
            displayName: Set PR Number Variable

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-CliVersionVariable.ps1
            displayName: Set CLI_VERSION

          - template: /eng/pipelines/templates/steps/publish-cli.yml
            parameters:
              CreateGitHubRelease: false
              PublishUploadLocations: pr/$(PRNumber)
              UploadInstaller: true
              DockerImageTags: pr-$(PRNumber)
              UploadMsi: true

          - pwsh: |
              $urlBase = "https://$(azdev-storage-account-name).blob.core.windows.net/azd/standalone/pr/$(PRNumber)"
              Write-Host "##vso[task.setvariable variable=UrlBase;isOutput=true]$urlBase"
            name: GenerateUrlBase
            displayName: Set UrlBase

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: docs
              path: docs

          - pwsh: |
              $urlBase = "$(GenerateUrlBase.UrlBase)"
              $linuxReleaseUrl = "$urlBase/azd-linux-amd64.tar.gz"
              $macosReleaseUrl = "$urlBase/azd-darwin-amd64.zip"
              $windowsReleaseUrl = "$urlBase/azd-windows-amd64.zip"
              $msiReleaseUrl = "$urlBase/azd-windows-amd64.msi"

              $refDocContent = Get-Content docs/azd.md -Raw

              $content = @"
              <!-- #comment-cli-pr -->
              ## Azure Dev CLI Install Instructions

              ### Install scripts

              #### MacOS/Linux

              > May elevate using ``sudo`` on some platforms and configurations

              bash:
              ``````
              curl -fsSL $urlBase/uninstall-azd.sh | bash;
              curl -fsSL $urlBase/install-azd.sh | bash -s -- --base-url $urlBase --version '' --verbose
              ``````

              pwsh:
              ``````
              Invoke-RestMethod '$urlBase/uninstall-azd.ps1' -OutFile uninstall-azd.ps1; ./uninstall-azd.ps1
              Invoke-RestMethod '$urlBase/install-azd.ps1' -OutFile install-azd.ps1; ./install-azd.ps1 -BaseUrl '$urlBase' -Version '' -Verbose
              ``````


              #### Windows
              
              PowerShell install

              ``````
              powershell -c "Set-ExecutionPolicy Bypass Process; irm '$urlBase/uninstall-azd.ps1' > uninstall-azd.ps1; ./uninstall-azd.ps1;"
              powershell -c "Set-ExecutionPolicy Bypass Process; irm '$urlBase/install-azd.ps1' > install-azd.ps1; ./install-azd.ps1 -BaseUrl '$urlBase' -Version '' -Verbose;"
              ``````

              MSI install
              ``````
              powershell -c "irm '$msiReleaseUrl' -OutFile azd-windows-amd64.msi; msiexec /i azd-windows-amd64.msi /qn"
              ``````

              ### Standalone Binary

              * Linux - $linuxReleaseUrl
              * MacOS - $macosReleaseUrl
              * Windows - $windowsReleaseUrl

              ### MSI 

              * $msiReleaseUrl

              ### Container

              ``````
              docker run -it $(azdev-acr-host)/azure-dev:pr-$(PRNumber)
              ``````

              ## Documentation

              <details>
              <summary>learn.microsoft.com documentation</summary>

              $refDocContent

              </details>
              "@
              $file = New-TemporaryFile
              Set-Content -Path $file -Value $content
              Write-Host "##vso[task.setvariable variable=CommentBodyFile]$file"
            displayName: Write body content to temporary file

          - task: PowerShell@2
            displayName: Add PR comment
            inputs:
              pwsh: true
              targetType: filePath
              filePath: ./eng/scripts/Update-PRComment.ps1
              arguments: >-
                -Repo "$(Build.Repository.Name)"
                -PrNumber $(PRNumber)
                -Tag "<!-- #comment-cli-pr -->"
                -BodyFile $(CommentBodyFile)
            env:
              GH_TOKEN: $(azuresdk-github-pat)

  - stage: Publish_Installers
    dependsOn: Sign
    condition: >-
      and(
        succeeded(),
        ne(variables['Skip.Release'], 'true'),
        or(
          eq('Manual', variables['BuildReasonOverride']),
          and(
            eq('', variables['BuildReasonOverride']),
            eq('Manual', variables['Build.Reason'])
          )
        )
      )
    jobs:
      - deployment: Publish_Installers
        environment: azure-dev
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          OSVmImage: MMSUbuntu20.04

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: signed
                    path: signed

                - pwsh: |
                    New-Item -ItemType Directory -Path script-release
                    Copy-Item signed/win/*.ps1 script-release/
                    Copy-Item cli/installer/*.sh script-release/
                  displayName: Copy scripts for release upload

                - pwsh: |
                    az storage blob upload-batch `
                      --account-name '$(azdev-storage-account-name)' `
                      --account-key '$(azdev-storage-account-key)' `
                      --auth-mode key `
                      -s script-release/ `
                      -d "azd/standalone/installer" `
                      --overwrite
                  displayName: Upload installer to storage location
