variables:
  - template: /eng/pipelines/templates/variables/globals.yml
  - name: NodeVersion
    value: 16

jobs:
  - job: CreateMatrix
    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      vmImage: MMSUbuntu20.04

    steps:
      - checkout: self

      - template: /eng/pipelines/templates/steps/install-azd-live-sh.yml

      - pwsh: |
          $templateNames = (azd template list --output json | ConvertFrom-Json).name
          $matrix = @{}
          foreach ($template in $templateNames) {
            $jobName = $template.Replace('/', '_')
            $matrix[$jobName] = @{ TemplateName = $template }
          }
          # Adding extra test for capitals letters support. Using first template
          $firstTemplate = $($templateNames)[0]
          $capitalsTest = $firstTemplate.Replace('/', '_') + "-Upper-case-test"
          $matrix[$capitalsTest] = @{ TemplateName = $firstTemplate; UseUpperCase = "true" }

          Write-Host "Matrix:"
          Write-Host ($matrix | Format-List | Out-String)

          $matrixJson = ConvertTo-Json $matrix -Depth 100 -Compress
          Write-Host "##vso[task.setvariable variable=Matrix;isOutput=true]$matrixJson"
        name: Generate
        displayName: Generate matrix

  - job: TestTemplates
    dependsOn: CreateMatrix

    strategy:
      matrix: $[ dependencies.CreateMatrix.outputs['Generate.Matrix'] ]
      maxParallel: 10

    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      vmImage: MMSUbuntu20.04

    steps:
      - checkout: self

      - template: /eng/pipelines/templates/steps/install-bicep.yml

      - template: /eng/pipelines/templates/steps/install-azd-live-sh.yml

      - template: /eng/pipelines/templates/steps/az-login.yml

      # Required to clone repos that are not yet public
      - template: /eng/pipelines/templates/steps/set-git-credentials.yml

      - pwsh: |
          if (!$env:TEMPLATEBRANCHNAME) {
            Write-Host "TemplateBranchName variable not set. Using 'staging'"
            Write-Host "##vso[task.setvariable variable=TemplateBranchName]staging"
          } else {
            Write-Host "Using specified azd version: $(TemplateBranchName)"
          }
        displayName: Ensure TemplateBranchName is set

      - pwsh: |
          if (!$env:DEPLOYLOCATION) {
            Write-Host "DeployLocation variable not set. Using 'eastus2'"
            Write-Host "##vso[task.setvariable variable=DeployLocation]eastus2"
          } else {
            Write-Host "Using specified azd version: $(DeployLocation)"
          }
        displayName: Ensure DeployLocation is set

      - pwsh: |
          $templateName = '$(TemplateName)'.Substring(14)
          $useUpperCaseName = '$(UseUpperCase)'
          $envPrefixName = "azd-template-test"
          if($useUpperCaseName -eq "true") {
            # Use upper case name for env prefix name
            $envPrefixName = "AZD-TEMPLATE-UPPER-TEST"
          } 
          $resourceGroupName = "rg-$envPrefixName-$templateName-$(Build.BuildId)"
          Write-Host "Resource group name: $resourceGroupName"
          Write-Host "##vso[task.setvariable variable=ResourceGroupName]$resourceGroupName"
          Write-Host "##vso[task.setvariable variable=EnvPrefixName]$envPrefixName"
        displayName: Set Resource Group Name

      - task: Bash@3
        displayName: Test templates
        inputs:
          targetType: filePath
          filePath: templates/tests/test-templates.sh
          arguments: >
            -e '$(EnvPrefixName)'
            -t '$(TemplateName)'
            -b '$(TemplateBranchName)'
            -s '$(Build.BuildId)'
            -l '$(DeployLocation)'
            -p 'list'
          workingDirectory: templates/tests

      # First tag the resource group (if exists) so that it can get cleaned up
      # by the cleanup pipeline. Then attempt to delete the resource group 
      # directly. If the delete fails the cleanup pipeline will delete it.
      - pwsh: |
          $resourceGroupId = az group show `
            --resource-group '$(ResourceGroupName)' `
            --query id

          if ($LASTEXITCODE) {
            Write-Host "Could not get information for resource group: $(ResourceGroupName)"
            exit 0
          }

          # Tag the resource group so it gets cleaned up later if delete fails
          az tag create `
            --resource-id $resourceGroupId `
            --tags DeleteAfter="$((Get-Date -AsUTC).ToString('o'))"

          # Attempt to delete the resource group
          az group delete --resource-group $(ResourceGroupName) --yes --no-wait
        condition: always()
        displayName: Tag resource group for deletion
