parameters: 
  - name: BuildMatrix
    type: object
    default:
      Windows:
        Pool: $(WINDOWSPOOL)
        OSVmImage: $(WINDOWSVMIMAGE)
        OS: windows
        ImageKey: image
        Variables: 
          BuildTarget: azd-windows-amd64.exe
          BuildOutputName: azd.exe
          BuildTestMsi: true
          AZURE_DEV_CI_OS: win
          Codeql.Enabled: true
          Codeql.SkipTaskAutoInjection: false
          Codeql.BuildIdentifier: cli_windows
      Linux:
        Pool: $(LINUXPOOL)
        OSVmImage: $(LINUXVMIMAGE)
        OS: linux
        ImageKey: image
        Variables: 
            BuildTarget: azd-linux-amd64
            BuildOutputName: azd
            SetExecutableBit: true
            SetShieldInfo: true
            BuildLinuxPackages: true
            AZURE_DEV_CI_OS: lin
            Codeql.Enabled: true
            Codeql.SkipTaskAutoInjection: false
            Codeql.BuildIdentifier: cli_linux
      Mac:
        Pool: Azure Pipelines
        OSVmImage: $(MACVMIMAGE)
        OS: macOS
        ImageKey: vmImage
        Variables: 
          BuildTarget: azd-darwin-amd64
          BuildOutputName: azd
          MacLocalSign: false
          SetExecutableBit: true
          AZURE_DEV_CI_OS: mac
          # CodeQL on macOS not supported by the Azure DevOps task as-of current.
          # Codeql.BuildIdentifier: cli_darwin
  - name: CrossBuildMatrix
    type: object
    default:
      # Compliant image name required
      LinuxARM64: 
        Pool: $(LINUXARMPOOL)
        OSVmImage: $(LINUXARMVMIMAGE)
        OS: linux
        ImageKey: image
        HostArchitecture: Arm64
        PreBuildSteps:
          - pwsh: sudo tdnf install -y build-essential
            displayName: Install build-essential
        Variables: 
          BuildTarget: azd-linux-arm64
          BuildOutputName: azd
          SetExecutableBit: true
          GOOS: linux
          GOARCH: arm64
          BuildLinuxPackages: true
      MacARM64:
        Pool: Azure Pipelines
        OSVmImage: $(MACVMIMAGE)
        OS: macOS
        ImageKey: vmImage
        HostArchitecture: x86_64
        PreBuildSteps: []
        Variables: 
          BuildTarget: azd-darwin-arm64
          BuildOutputName: azd
          SetExecutableBit: true
          GOOS: darwin
          GOARCH: arm64
          # CGO_ENABLED is required on MacOS to cross-compile pkg/outil/osversion
          CGO_ENABLED: 1

stages: 
  - stage: BuildAndTest
    variables:
      - template: /eng/pipelines/templates/variables/globals.yml
      - template: /eng/pipelines/templates/variables/image.yml
    jobs: 
      - ${{ each build in parameters.BuildMatrix }}:
        - template: /eng/pipelines/templates/jobs/build-cli.yml
          parameters:
            NameSuffix: ${{ build.key}}
            Pool: ${{ build.value.Pool }}
            ImageKey: ${{ build.value.ImageKey }}
            OSVmImage: ${{ build.value.OSVmImage }} 
            OS: ${{ build.value.OS }}
            Variables: ${{ build.value.Variables }}

      # This is separated today because Skip.LiveTest is a queue-time variable
      # and cannot be set in a matrix entry.       
      - ${{ each build in parameters.CrossBuildMatrix }}: 
        - template: /eng/pipelines/templates/jobs/cross-build-cli.yml
          parameters:
            NameSuffix: ${{ build.key}}
            Pool: ${{ build.value.Pool }}
            ImageKey: ${{ build.value.ImageKey }}
            OSVmImage: ${{ build.value.OSVmImage }} 
            OS: ${{ build.value.OS }}
            PreBuildSteps: ${{ build.value.PreBuildSteps }}
            HostArchitecture: ${{ build.value.HostArchitecture }}
            Variables: ${{ build.value.Variables }}

      - job: MergeLinuxPackages
        pool:
          name: $(LINUXPOOL)
          image: $(LINUXVMIMAGE)
          os: linux
        dependsOn:
          - ${{ each build in parameters.CrossBuildMatrix }}: 
            - CrossBuildCLI_${{ build.key }}
          - ${{ each build in parameters.BuildMatrix }}: 
            - BuildCLI_${{ build.key }}
        steps:
          - download: current
            artifact: linux-packages-amd64
            displayName: Download linux-packages-amd64

          - download: current
            artifact: linux-packages-arm64
            displayName: Download linux-packages-arm64

          # Merge the folders
          - pwsh: |
              New-Item -ItemType Directory -Path linux-packages
              Get-ChildItem $(Pipeline.Workspace)/linux-packages-amd64 -Exclude '_manifest' | ForEach-Object { Copy-Item $_ linux-packages }
              Get-ChildItem $(Pipeline.Workspace)/linux-packages-arm64 -Exclude '_manifest' | ForEach-Object { Copy-Item $_ linux-packages }
            displayName: Merge linux packages
        templateContext: 
          outputs: 
            - output: pipelineArtifact
              path: linux-packages
              artifact: linux-packages
              displayName: Publish merged linux packages

      - job: ValidateCrossCompile
        dependsOn: 
          - ${{ each build in parameters.CrossBuildMatrix }}: 
            - CrossBuildCLI_${{ build.key }}
        pool: 
          name: $(LINUXARMPOOL)
          image: $(LINUXARMVMIMAGE)
          os: linux
        timeoutInMinutes: 5
        steps: 
          - checkout: none 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: azd-linux-arm64
              targetPath: $(Build.SourcesDirectory)

          - bash: pwd && ls && chmod +x ./azd-linux-arm64 && ./azd-linux-arm64 version
            displayName: azd version

      - job: GenerateReleaseArtifacts
        pool:
          name: $(LINUXPOOL)
          image: $(LINUXVMIMAGE)
          os: linux

        steps:
          - checkout: self

          - template: /eng/pipelines/templates/steps/setup-go.yml

          # Install scripts
          - pwsh: |
              New-Item -ItemType Directory -Path installer
              Copy-Item cli/installer/*install-azd.ps1 installer/
            displayName: Copy installer scripts (*.ps1) for artifact upload

          # CLI ref docs
          - pwsh: New-Item -ItemType Directory -Path docs
            workingDirectory: $(Pipeline.Workspace)
            displayName: Create docs artifact folder

          - pwsh: go run docgen.go
            workingDirectory: cli/azd/docs
            displayName: Generate CLI documentation

          - pwsh: Copy-Item $(Build.SourcesDirectory)/cli/azd/docs/md/* docs/ -Recurse
            workingDirectory: $(Pipeline.Workspace)
            displayName: Copy CLI docs for pipeline artifact staging

          # azure.yaml.json schema docs
          - task: UsePythonVersion@0
            inputs:
              versionSpec: 3.x

          - pwsh: pip install jsonschema2md
            displayName: Install jsonschema2md

          - pwsh: jsonschema2md schemas/v1.0/azure.yaml.json $(Pipeline.Workspace)/docs/azure.yaml.schema.md
            displayName: Generate azure.yaml schema

          # Upload docs for CLI ref and azure.yaml schema
          - pwsh: Get-ChildItem .
            workingDirectory: $(Pipeline.Workspace)/docs
            displayName: Show doc artifacts to publish

        templateContext: 
          outputs: 
            - output: pipelineArtifact
              path: installer
              artifact: install-pwsh

            - output: pipelineArtifact
              path: $(Pipeline.Workspace)/docs/
              artifact: docs
              displayName: Upload generated documentation
