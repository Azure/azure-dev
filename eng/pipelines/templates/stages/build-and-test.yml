
stages: 
  - stage: BuildAndTest
    jobs: 
      - job: BuildCLI
        strategy:
          matrix:
            Windows:
              Pool: azsdk-pool-mms-win-2022-general
              OSVmImage: MMS2022
              BuildTarget: azd-windows-amd64.exe
              BuildOutputName: azd.exe
              BuildTestMsi: true
              AZURE_DEV_CI_OS: win
              Codeql.Enabled: true
              Codeql.SkipTaskAutoInjection: false
              Codeql.BuildIdentifier: cli_windows
            Linux:
              Pool: azsdk-pool-mms-ubuntu-2004-general
              OSVmImage:  MMSUbuntu20.04
              BuildTarget: azd-linux-amd64
              BuildOutputName: azd
              SetExecutableBit: true
              SetShieldInfo: true
              BuildLinuxPackages: true
              AZURE_DEV_CI_OS: lin
              Codeql.Enabled: true
              Codeql.SkipTaskAutoInjection: false
              Codeql.BuildIdentifier: cli_linux
            Mac:
              Pool: Azure Pipelines
              OSVmImage: macOS-11
              BuildTarget: azd-darwin-amd64
              BuildOutputName: azd
              MacLocalSign: false
              SetExecutableBit: true
              AZURE_DEV_CI_OS: mac
              # CodeQL on macOS not supported by the Azure DevOps task as-of current.
              # Codeql.BuildIdentifier: cli_darwin
        pool:
            name: $(Pool)
            vmImage: $(OSVmImage)
        timeoutInMinutes: 180
        steps:
          - checkout: self
          - template: /eng/pipelines/templates/steps/setup-go.yml
            parameters:
              Condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))

          - template: /eng/pipelines/templates/steps/set-cli-version-cd.yml

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-CliVersionVariable.ps1
            displayName: Set CLI_VERSION

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-CliBuildVariables.ps1
              arguments: -BuildReason $(Build.Reason)
            displayName: Set CLI build run variables

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: cli/azd/ci-build.ps1
              arguments: >-
                -Version $(CLI_VERSION)
                -SourceVersion $(Build.SourceVersion)
                -CodeCoverageEnabled
                -BuildRecordMode
              workingDirectory: cli/azd
            displayName: Build Go Binary (For tests)

          - template: /eng/pipelines/templates/steps/build-msi.yml
            parameters:
              Title: Build Test MSI
              Condition: and(succeeded(), eq(variables['BuildTestMsi'], 'true'))
              # Build the test MSI with the same configuration as the
              # release MSI (no special upgrade behavior)
              ShouldBuildForRelease: true

          - template: /eng/pipelines/templates/steps/install-terraform.yml
          - template: /eng/pipelines/templates/steps/install-kubectl.yml

          # Pinning DockerInstaller to 0.209.0 because 0.214.0 has failures.
          # Remove this pin when later versions succeed.
          - task: DockerInstaller@0.209.0
            displayName: Docker Installer
            condition: and(succeeded(), contains(variables['OSVmImage'], 'macOS'))
            inputs:
              dockerVersion: 17.09.0-ce
              releaseType: stable

          # Live testing uses dotnet 8.0.x in the WebApp project deployment
          - task: UseDotNet@2
            condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))
            inputs:
              version: 8.0.x

          - bash: dotnet nuget add source --name dotnet8 https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json
            displayName: Add internal dotnet nuget feed

          - template: /eng/pipelines/templates/steps/az-login.yml
            parameters:
              Condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))

          - template: /eng/pipelines/templates/steps/azd-login.yml
            parameters:
              AzdDirectory: cli/azd

          - task: PowerShell@2
            condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))
            inputs:
              pwsh: true
              targetType: filePath
              filePath: cli/azd/ci-test.ps1
              arguments: >-
                -UnitTestCoverageDir './cover-$(AZURE_DEV_CI_OS)/unit'
                -IntegrationTestCoverageDir './cover-$(AZURE_DEV_CI_OS)/int'
              workingDirectory: cli/azd
            displayName: Test Go Binary
            env:
              # AZD live test setup variables
              CI: true
              AZD_TEST_CLI_VERSION: $(CLI_VERSION)
              AZD_TEST_CLIENT_ID: $(arm-client-id)
              AZD_TEST_CLIENT_SECRET: $(arm-client-secret)
              AZD_TEST_TENANT_ID: $(arm-tenant-id)
              AZD_TEST_AZURE_SUBSCRIPTION_ID: $(SubscriptionId)
              AZD_TEST_AZURE_LOCATION: eastus2
              AZURE_RECORD_MODE: $(AZURE_RECORD_MODE)
              # AZD Live Test: Terraform service principal authentication
              ARM_CLIENT_ID: $(arm-client-id)
              ARM_CLIENT_SECRET: $(arm-client-secret)
              ARM_TENANT_ID: $(arm-tenant-id)
              # Code Coverage: Generate junit report to publish results
              GOTESTSUM_JUNITFILE: junitTestReport.xml

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: '**/junitTestReport.xml'
              testRunTitle: $(Agent.JobName)
              searchFolder: cli/azd
              publishRunAttachments: true
            displayName: Publish test results
            condition: succeededOrFailed()

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: cli/azd/ci-build.ps1
              arguments: >-
                -Version $(CLI_VERSION)
                -SourceVersion $(Build.SourceVersion)
              workingDirectory: cli/azd
            displayName: Build Go Binary

          - pwsh: Move-Item $(BuildOutputName) $(BuildTarget)
            workingDirectory: cli/azd
            displayName: Rename binaries

          - bash: chmod +x $(BuildTarget)
            condition: and(succeeded(), eq(variables['SetExecutableBit'], 'true'))
            workingDirectory: cli/azd
            displayName: Set executable bit for non-Windows binaries

          - template: /eng/pipelines/templates/steps/build-linux-packages.yml
            parameters:
              Condition: and(succeeded(), eq(variables['BuildLinuxPackages'], 'true'))

          - task: PowerShell@2
            condition: and(succeeded(), eq(variables['SetShieldInfo'], 'true'))
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-ShieldInfo.ps1
              arguments: >-
                -TemplatePath eng/shields/standalone.json
                -Version "$(CLI_VERSION)"
            displayName: Set shield info

          - publish: cli/azd/cover-$(AZURE_DEV_CI_OS)
            condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))
            artifact: cover-$(AZURE_DEV_CI_OS)
            displayName: Upload code coverage

          - publish: eng/shields/standalone.json
            condition: and(succeeded(), eq(variables['SetShieldInfo'], 'true'))
            artifact: shield-standalone
            displayName: Upload standalone shield json

          - publish: cli/azd/$(BuildTarget)
            artifact: $(BuildTarget)
            condition: always()
            displayName: Upload azd binary to artifact store

          - publish: cli/installer/windows/bin/Release
            artifact: test-msi
            condition: and(succeeded(), eq(variables['BuildTestMsi'], 'true'))
            displayName: Upload test MSI

          - publish: cli/installer/fpm/artifact
            artifact: linux-packages-amd64
            condition: and(succeeded(), eq(variables['BuildLinuxPackages'], 'true'))
            displayName: Upload linux packages to artifact store

      # This is separated today because Skip.LiveTest is a queue-time variable
      # and cannot be set in a matrix entry. 
      - job: CrossBuildCLI
        strategy: 
          matrix: 
            LinuxARM64: 
              Pool: azsdk-pool-mms-ubuntu-2004-general
              OSVmImage:  MMSUbuntu20.04
              BuildTarget: azd-linux-arm64
              BuildOutputName: azd
              SetExecutableBit: true
              GOOS: linux
              GOARCH: arm64
              BuildLinuxPackages: true
            MacARM64:
              Pool: Azure Pipelines
              OSVmImage: macOS-11
              BuildTarget: azd-darwin-arm64
              BuildOutputName: azd
              SetExecutableBit: true
              GOOS: darwin
              GOARCH: arm64
              # CGO_ENABLED is required on MacOS to cross-compile pkg/outil/osversion
              CGO_ENABLED: 1
        pool: 
          name: $(Pool)
          vmImage: $(OSVmImage)
        timeoutInMinutes: 20
        steps: 
          - checkout: self

          - template: /eng/pipelines/templates/steps/setup-go.yml
            parameters:
              Condition: false

          - template: /eng/pipelines/templates/steps/set-cli-version-cd.yml

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: eng/scripts/Set-CliVersionVariable.ps1
            displayName: Set CLI_VERSION

          - task: PowerShell@2
            inputs:
              pwsh: true
              targetType: filePath
              filePath: cli/azd/ci-build.ps1
              arguments: >-
                -Version $(CLI_VERSION)
                -SourceVersion $(Build.SourceVersion)
              workingDirectory: cli/azd
            displayName: Build Go Binary (cross compile)

          - pwsh: file azd
            workingDirectory: cli/azd
            displayName: Get file info

          - pwsh: Move-Item $(BuildOutputName) $(BuildTarget)
            workingDirectory: cli/azd
            displayName: Rename binaries

          - bash: chmod +x $(BuildTarget)
            condition: and(succeeded(), eq(variables['SetExecutableBit'], 'true'))
            workingDirectory: cli/azd
            displayName: Set executable bit for non-Windows binaries

          - template: /eng/pipelines/templates/steps/build-linux-packages.yml
            parameters:
              Architecture: arm64
              Condition: and(succeeded(), eq(variables['BuildLinuxPackages'], 'true'))

          - publish: cli/azd/$(BuildTarget)
            artifact: $(BuildTarget)
            condition: always()
            displayName: Upload azd binary to artifact store

          - publish: cli/installer/fpm/artifact
            artifact: linux-packages-arm64
            condition: and(succeeded(), eq(variables['BuildLinuxPackages'], 'true'))
            displayName: Upload linux packages to artifact store

      - job: MergeLinuxPackages
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
        dependsOn:
          - CrossBuildCLI
          - BuildCLI
        steps:
          - download: current
            artifact: linux-packages-amd64
            displayName: Download linux-packages-amd64

          - download: current
            artifact: linux-packages-arm64
            displayName: Download linux-packages-arm64

          # Merge the folders
          - pwsh: |
              New-Item -ItemType Directory -Path linux-packages
              Get-ChildItem $(Pipeline.Workspace)/linux-packages-amd64 | ForEach-Object { Copy-Item $_ linux-packages }
              Get-ChildItem $(Pipeline.Workspace)/linux-packages-arm64 | ForEach-Object { Copy-Item $_ linux-packages }
            displayName: Merge linux packages

          - publish: linux-packages
            artifact: linux-packages
            displayName: Publish merged linux packages

      - job: ValidateCrossCompile
        dependsOn: CrossBuildCLI
        pool: 
          name: azsdk-pool-mms-ubuntu-2004-arm
          vmImage: MMSUbuntu20.04ARM64
        timeoutInMinutes: 5
        steps: 
          - checkout: none 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: azd-linux-arm64
              targetPath: $(Build.SourcesDirectory)

          - bash: pwd && ls && chmod +x ./azd-linux-arm64 && ./azd-linux-arm64 version
            displayName: azd version

      - job: GenerateReleaseArtifacts
        pool:
          name: azsdk-pool-mms-ubuntu-2004-general
          vmImage: MMSUbuntu20.04

        steps:
          - checkout: self

          - template: /eng/pipelines/templates/steps/setup-go.yml

          # Install scripts
          - pwsh: |
              New-Item -ItemType Directory -Path installer
              Copy-Item cli/installer/*install-azd.ps1 installer/
            displayName: Copy installer scripts (*.ps1) for artifact upload

          - task: PublishPipelineArtifact@1
            displayName: Publish install scripts to artifacts for signing
            inputs:
              artifactName: install-pwsh
              targetPath: installer

          # CLI ref docs
          - pwsh: New-Item -ItemType Directory -Path docs
            workingDirectory: $(Pipeline.Workspace)
            displayName: Create docs artifact folder

          - pwsh: go run docgen.go
            workingDirectory: cli/azd/docs
            displayName: Generate CLI documentation

          - pwsh: Copy-Item $(Build.SourcesDirectory)/cli/azd/docs/md/* docs/ -Recurse
            workingDirectory: $(Pipeline.Workspace)
            displayName: Copy CLI docs for pipeline artifact staging

          # azure.yaml.json schema docs
          - task: UsePythonVersion@0
            inputs:
              versionSpec: 3.x

          - pwsh: pip install jsonschema2md
            displayName: Install jsonschema2md

          - pwsh: jsonschema2md schemas/v1.0/azure.yaml.json $(Pipeline.Workspace)/docs/azure.yaml.schema.md
            displayName: Generate azure.yaml schema

          # Upload docs for CLI ref and azure.yaml schema
          - pwsh: Get-ChildItem .
            workingDirectory: $(Pipeline.Workspace)/docs
            displayName: Show doc artifacts to publish

          - publish: $(Pipeline.Workspace)/docs/
            artifact: docs
            displayName: Upload generated documentation
