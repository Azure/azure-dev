parameters:
  - name: DownloadArtifacts
    type: object
    default:
      - cover-win
      - cover-lin
      - cover-mac
stages: 
- stage: CodeCoverage_Upload
  condition: and(succeeded(), ne(variables['Skip.LiveTest'], 'true'))
  dependsOn: BuildAndTest

  variables:
    - template: /eng/pipelines/templates/variables/globals.yml
    - template: /eng/pipelines/templates/variables/image.yml

  jobs:
  - job: Upload
    pool:
      name: $(LINUXPOOL)
      image: $(LINUXVMIMAGE)
      os: linux
    steps:
      - template: /eng/pipelines/templates/steps/setup-go.yml
      - template: /eng/pipelines/templates/steps/download-artifacts.yml
        parameters:
          Artifacts: ${{ parameters.DownloadArtifacts }}

      - pwsh: |
          New-Item -ItemType Directory -Force -Path merged-coverage
          
          # Find all coverage.out files from different platforms and test types
          $unitCoverageFiles = @()
          $integrationCoverageFiles = @()
          
          # Collect unit test coverage files from all platforms
          Get-ChildItem "cover-*/unit/coverage.out" -ErrorAction SilentlyContinue | ForEach-Object {
              $unitCoverageFiles += $_.FullName
              Write-Host "Found unit coverage file: $($_.FullName)"
          }
          
          # Collect integration test coverage files from all platforms  
          Get-ChildItem "cover-*/int/coverage.out" -ErrorAction SilentlyContinue | ForEach-Object {
              $integrationCoverageFiles += $_.FullName
              Write-Host "Found integration coverage file: $($_.FullName)"
          }
          
          # Merge unit test coverage files
          if ($unitCoverageFiles.Count -gt 0) {
              Write-Host "Merging $($unitCoverageFiles.Count) unit test coverage files..."
              $unitFilesParam = $unitCoverageFiles -join ","
              pwsh -File "$(Build.SourcesDirectory)/eng/scripts/Merge-GoCoverageProfiles.ps1" -InputFiles $unitFilesParam -OutputFile "merged-coverage/unit-coverage.out"
              if ($LASTEXITCODE -ne 0) { 
                  Write-Error "Failed to merge unit test coverage files"
                  exit $LASTEXITCODE 
              }
          } else {
              Write-Warning "No unit test coverage files found"
              New-Item -ItemType File -Path "merged-coverage/unit-coverage.out" -Value "mode: set`n"
          }
          
          # Merge integration test coverage files
          if ($integrationCoverageFiles.Count -gt 0) {
              Write-Host "Merging $($integrationCoverageFiles.Count) integration test coverage files..."
              $intFilesParam = $integrationCoverageFiles -join ","
              pwsh -File "$(Build.SourcesDirectory)/eng/scripts/Merge-GoCoverageProfiles.ps1" -InputFiles $intFilesParam -OutputFile "merged-coverage/int-coverage.out"
              if ($LASTEXITCODE -ne 0) { 
                  Write-Error "Failed to merge integration test coverage files"
                  exit $LASTEXITCODE 
              }
          } else {
              Write-Warning "No integration test coverage files found"
              New-Item -ItemType File -Path "merged-coverage/int-coverage.out" -Value "mode: set`n"
          }
          
          # Merge unit and integration coverage into final coverage file
          Write-Host "Merging unit and integration coverage into final coverage file..."
          $allCoverageFiles = @("merged-coverage/unit-coverage.out", "merged-coverage/int-coverage.out")
          $allFilesParam = $allCoverageFiles -join ","
          pwsh -File "$(Build.SourcesDirectory)/eng/scripts/Merge-GoCoverageProfiles.ps1" -InputFiles $allFilesParam -OutputFile "cover.out"
          if ($LASTEXITCODE -ne 0) { 
              Write-Error "Failed to merge final coverage files"
              exit $LASTEXITCODE 
          }

          # Convert Go coverage to Cobertura XML format using custom script
          Write-Host "Converting coverage to Cobertura XML format..."
          pwsh -File "$(Build.SourcesDirectory)/eng/scripts/Convert-GoCoverageToCobertura.ps1" -CoverageFile cover.out -OutputFile coverage.xml -SourceRoot "$(Build.SourcesDirectory)"
          if ($LASTEXITCODE -ne 0) { 
              Write-Error "Failed to convert coverage to XML"
              exit $LASTEXITCODE 
          }
        displayName: Merge code coverage files

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.xml'
        displayName: Publish Code Coverage to DevOps
    
    templateContext: 
      outputs: 
        - output: pipelineArtifact
          path: merged-coverage
          artifact: merged-coverage
          displayName: Upload merged coverage profiles

        - output: pipelineArtifact
          path: coverage.xml
          artifact: coverage-xml
          displayName: Upload Cobertura XML coverage report
