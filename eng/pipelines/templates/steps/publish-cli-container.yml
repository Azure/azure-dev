parameters:
  - name: DockerImageTags
    type: string
  - name: ReleaseSyndicatedDockerContainer
    type: boolean
    default: false

  # Download artifacts if not already downloaded in a previous step
  - name: DownloadArtifacts
    type: boolean
    default: true

  # TODO: use service connection and az CLI auth
  - name: AcrHost
    type: string
    default: $(azdev-acr-host-test)
  - name: SyndicatedAcrHost
    type: string
    default: not-valid
    # TODO: Uncomment before merging
    # default: $(azdev-acr-syndicated-host)

steps: 
  # TODO: Docker stuff should be handled as per: https://github.com/Azure/azure-sdk-tools/commit/2623b00fc5b660d48e2301977602ddd8f934ac4a

  - ${{ if eq('true', parameters.DownloadArtifacts) }}:
    # Linux binary is not signed today so download from output artifacts
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: azd-linux-amd64
        # Copy the item from artifacts straight to where it will go
        path: release-staging

  - bash: chmod +x release-staging/azd-linux-amd64
    displayName: Set execute bit for the mac and linux release

  - task: AzureCLI@2
    displayName: Docker Auth
    inputs:
      azureSubscription: azdev-publishing_rg
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az acr login --name ${{ parameters.AcrHost}}
        # TODO: only if publishing to syndicated host
        # az acr login --name ${{ parameters.SyndicatedAcrHost }}

  - pwsh: |
      New-Item -ItemType Directory -Path cli/bin
      Copy-Item release-staging/azd-linux-amd64 cli/bin/
    displayName: Move binary to Docker build context

  - task: 1ES.BuildContainerImage@1
    displayName: Build release container
    inputs:
      image: release:latest
      path: $(Build.SourcesDirectory)
      dockerfile: cli/Dockerfile
      enableNetwork: true
      useBuildKit: true

  - pwsh: |
      $tags = "${{ parameters.DockerImageTags }}" -split ';'
      $items = @()
      foreach ($tag in $tags) {
        $items += "release:latest ${{ parameters.AcrHost }}/azure-dev:$tag"
      }
      $imageNames = $items -join ','
      Write-Host "Image Names: $imageNames"
      Write-Host "##vso[task.setvariable variable=ImageNames]$imageNames"

    displayName: Tag release container

  # - ${{ if eq('true', parameters.ReleaseSyndicatedDockerContainer) }}:
  #   - pwsh: |
  #       $tags = "${{ parameters.DockerImageTags }}" -split ';'
  #       foreach ($tag in $tags) {
  #         Write-Host "docker tag release:latest ${{ parameters.SyndicatedAcrHost }}/public/azure-dev-cli-apps:$tag"
  #         docker tag release:latest ${{ parameters.SyndicatedAcrHost }}/public/azure-dev-cli-apps:$tag
  #       }
  #     displayName: Tag release for syndication

  # - pwsh: |
  #     docker push ${{ parameters.AcrHost }}/azure-dev --all-tags
  #   displayName: Push container tags (latest)

  - task: 1ES.PushContainerImage@1
    displayName: Push container tags
    inputs:
      localImage: release:latest
      remoteImage: $(ImageNames)

  # - ${{ if eq('true', parameters.ReleaseSyndicatedDockerContainer) }}:
  #   - pwsh: |
  #       docker push ${{ parameters.SyndicatedAcrHost }}/public/azure-dev-cli-apps --all-tags
  #     displayName: Push container tags (syndicated release)
