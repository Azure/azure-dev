parameters:
  CreateGitHubRelease: true
  PublishUploadLocations:
  UploadInstaller: false
  StorageContainerName: '`$web'

steps:
  - ${{ if eq('true', parameters.CreateGitHubRelease) }}:
    # This step must run first because a duplicated tag means we don't need to
    # continue with any of the subsequent steps.
    - pwsh: |
        $tag = "azure-dev-cli_$(CLI_VERSION)"
        Write-Host "Releasing with tag: $tag"

        Write-Host "##vso[task.setvariable variable=GH_RELEASE_TAG;]$tag"
      displayName: Check for existing GitHub release
      env:
        GH_TOKEN: $(azuresdk-github-pat)

    - pwsh: |
        Write-Host "Would have created a release with $(GH_RELEASE_TAG) and notes-file changelog/CHANGELOG.md"
        Get-Content changelog/CHANGELOG.md | Write-host 
        Write-Host "Releasing files:"
        Get-ChildItem release/* | Write-Host

      displayName: Create GitHub Release and upload artifacts
      env:
        GH_TOKEN: $(azuresdk-github-pat)

  # TODO: Ensure this has files in proper locations
  - ${{ if eq('true', parameters.UploadInstaller) }}:
    - pwsh: |
        Copy-Item cli/installer/install-azd.sh release/
        Copy-Item cli/installer/install-azd-report.sh release/
        Copy-Item cli/installer/uninstall-azd.sh release/
        Copy-Item cli/installer/install-azd.ps1 release/
        Copy-Item cli/installer/uninstall-azd.ps1 release/
      displayName: Copy install scripts to release (PR only)

  - task: AzurePowerShell@5
    displayName: Upload release to storage account
    inputs:
      azureSubscription: 'Azure SDK Artifacts'
      azurePowerShellVersion: LatestVersion
      pwsh: true
      ScriptType: InlineScript
      Inline: |
        $uploadLocations = "${{ parameters.PublishUploadLocations }}" -split ';'

        Get-ChildItem release/
        foreach ($folder in $uploadLocations) {
            Write-Host "Upload to ${{ parameters.StorageContainerName }}/azd/standalone/$folder"
            Write-Host "Upload using the copy command: copy `"release/*`" `"$(publish-storage-location)/${{ parameters.StorageContainerName }}/azd/standalone/$folder`" --overwrite=true"
            if ($LASTEXITCODE) {
              Write-Error "Upload failed"
              exit 1
            }
        }
    env:
      AZCOPY_AUTO_LOGIN_TYPE: 'PSCRED'
