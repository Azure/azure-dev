parameters:
  CreateGitHubRelease: true
  PublishUploadLocations:
  UploadInstaller: false
  PublishShield: false
  StorageContainerName: '`$web'
  AllowPrerelease: false

steps:
  - ${{ if eq('true', parameters.CreateGitHubRelease) }}:
    # This step must run first because a duplicated tag means we don't need to
    # continue with any of the subsequent steps.

    # TODO: INLINE THIS
    - task: PowerShell@2
      inputs:
        pwsh: true
        targetType: filePath
        filePath: ./eng/scripts/Set-GitHubReleaseTag.ps1
        arguments: >-
          -Tag "azure-dev-cli_$(CLI_VERSION)"
          -OutputName "GH_RELEASE_TAG"
          -DevOpsOutputFormat
      displayName: Verify and set GitHub Release Tag

  # TODO: Ensure this has files in proper locations
  - ${{ if eq('true', parameters.UploadInstaller) }}:
    - pwsh: |
        Copy-Item cli/installer/install-azd.sh release/
        Copy-Item cli/installer/install-azd-report.sh release/
        Copy-Item cli/installer/uninstall-azd.sh release/
        Copy-Item cli/installer/install-azd.ps1 release/
        Copy-Item cli/installer/uninstall-azd.ps1 release/
      displayName: Copy install scripts to release (PR only)

  # Create release
  - ${{ if eq('true', parameters.CreateGitHubRelease ) }}:
    - pwsh: |
        gh release create `
          "$(GH_RELEASE_TAG)" `
          --title "$(GH_RELEASE_TAG)" `
          --notes-file changelog/CHANGELOG.md

        gh release upload $(GH_RELEASE_TAG) release/*
      displayName: Create GitHub Release and upload artifacts
      env:
        GH_TOKEN: $(azuresdk-github-pat)

  - task: AzurePowerShell@5
    displayName: Upload release to storage account
    inputs:
      azureSubscription: 'Azure SDK Artifacts'
      azurePowerShellVersion: LatestVersion
      pwsh: true
      ScriptType: InlineScript
      Inline: |
        $uploadLocations = "${{ parameters.PublishUploadLocations }}" -split ';'

        Get-ChildItem release/
        foreach ($folder in $uploadLocations) {
            Write-Host "Upload to ${{ parameters.StorageContainerName }}/azd/standalone/$folder"
            azcopy copy "release/*" "$(publish-storage-location)/${{ parameters.StorageContainerName }}/azd/standalone/$folder" --overwrite=true
            if ($LASTEXITCODE) {
              Write-Error "Upload failed"
              exit 1
            }
        }
    env:
      AZCOPY_AUTO_LOGIN_TYPE: 'PSCRED'
