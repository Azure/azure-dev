# Consumes the following variables from Set-TemplateTestMatrixVariable.ps1:
# - TemplateName
# - TEST_SCENARIO
# and additional variables specified by template-test-generate-jobs.yml

steps:
    - pwsh: |
          npm install -g @devcontainers/cli
      displayName: Install Devcontainer

    - template: /eng/pipelines/templates/steps/install-azd-live-sh.yml
      parameters:
          Version: $(AzdVersion)

    # Required to clone repos that are not yet public
    - template: /eng/pipelines/templates/steps/set-git-credentials.yml

    - template: /eng/pipelines/templates/steps/configure-oidc-auth.yml

    - pwsh: |
          # Get the name without any path
          $template = '$(TemplateName)'
          $lastSlash = $template.LastIndexOf('/')
          if ($lastSlash -ne -1) {
            $templateName = $template.Substring($lastSlash + 1)
          } else {
            $templateName = $template
          }
          $scenario = "$env:TEST_SCENARIO"
          $envPrefixName = "azd-template-test"
          if($scenario -ne '') {
            $envPrefixName += "-$scenario"
          } 
          $resourceGroupName = "rg-$envPrefixName-$templateName-$(Build.BuildId)-$(System.JobAttempt)"
          Write-Host "Resource group name: $resourceGroupName"
          Write-Host "##vso[task.setvariable variable=ResourceGroupName]$resourceGroupName"
          Write-Host "##vso[task.setvariable variable=EnvPrefixName]$envPrefixName"

          $SynchronousCleanup = 'true'
          if ('$(Build.Reason)' -eq 'PullRequest' || '$(CleanupHoursDelay)' -ne '0') {
            $SynchronousCleanup = 'false'
          }
          Write-Host "SynchronousCleanup: $SynchronousCleanup"
          Write-Host "##vso[task.setvariable variable=SynchronousCleanup]$SynchronousCleanup"

          $CleanupImmediate = 'true'
          if ('$(CleanupHoursDelay)' -ne '0') {
            $CleanupImmediate = 'false'
          }
          Write-Host "CleanupImmediate: $CleanupImmediate"
          Write-Host "##vso[task.setvariable variable=CleanupImmediate]$CleanupImmediate"
      displayName: Set test run parameters

    - pwsh: |
          git clone --branch $(TemplateBranchName) https://github.com/$(TemplateName).git/ temp
      displayName: Clone template repository

    - task: CopyFiles@2
      inputs:
          SourceFolder: "templates/tests"
          Contents: "test-templates.sh"
          TargetFolder: "$(Build.SourcesDirectory)/temp"
      displayName: Copy test-templates.sh

    - task: DevcontainersCI@0
      inputs:
          env: |
              # Service Connection Configuration
              AZURESUBSCRIPTION_CLIENT_ID=$(AzureSubscriptionClientId)
              AZURESUBSCRIPTION_TENANT_ID=$(AzureSubscriptionTenantId)
              AZURESUBSCRIPTION_SERVICE_CONNECTION_ID=$(AzureSubscriptionServiceConnectionId)
              SYSTEM_ACCESSTOKEN=$(System.AccessToken)
              SYSTEM_OIDCREQUESTURI=$(System.OidcRequestUri)

              # Pass in TemplateRunEnvironmentVariables
              $(VARIABLE_LIST)

              # Force no TTY in CI
              AZD_DEBUG_FORCE_NO_TTY=1
          subFolder: "$(Build.SourcesDirectory)/temp"
          runCmd: |
              # Uninstall azd version
              curl -fsSL https://aka.ms/uninstall-azd.sh | sudo bash

              # Install azd build
              if [[ $(AzdVersion) == pr/* ]];
              then
                curl -fsSL https://aka.ms/install-azd.sh | sudo bash -s -- --base-url "$(publish-storage-location)/azd/standalone/$(AzdVersion)" --skip-verify --version ''
              else
                curl -fsSL https://aka.ms/install-azd.sh | sudo bash -s -- --version $(AzdVersion) --verbose
              fi

              RUN_VALIDATION=true
              if [[ $TEMPLATE_NAME == *aks* ]]; then
                RUN_VALIDATION=false
              fi

              azd version

              # Login azd
              azd auth login --federated-credential-provider azure-pipelines

              # Install these packages for playwright tests. Otherwise, it will cause a error of playwright missing libraries
              sudo add-apt-repository ppa:gstreamer-developers/ppa
              sudo apt-get update
              sudo apt-get install -y gstreamer1.0*
              sudo apt-get install -y gstreamer1.0-libav libnss3-tools libatk-bridge2.0-0 libcups2-dev libxkbcommon-x11-0 libxcomposite-dev libxrandr2 libgbm-dev libgtk-3-0

              # Run template test bash script
              chmod u+x test-templates.sh
              ./test-templates.sh -d \
                -e '$(EnvPrefixName)' \
                -t '$(TemplateName)' \
                -b '$(TemplateBranchName)' \
                -s '$(SubscriptionId)' \
                -u '$(Build.BuildId)-$(System.JobAttempt)' \
                -l '$(AzureLocation)' \
                -p 'list' \
                -c '$(SynchronousCleanup)' \
                -v "$RUN_VALIDATION" \

      displayName: Run template-test.sh in Devcontainer

    # First tag the resource group (if exists) so that it can get cleaned up
    # by the cleanup pipeline. Then attempt to delete the resource group
    # directly. If the delete fails the cleanup pipeline will delete it.
    - task: AzureCLI@2
      inputs:
        azureSubscription: azd-service-connection
        keepAzSessionActive: true
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
            $errOutput = ($( $output = & az group show --resource-group '$(ResourceGroupName)' --query id ) 2>&1) -join [System.Environment]::NewLine
            if ($LASTEXITCODE) {
              if ($errOutput -match "ResourceGroupNotFound") {
                Write-Host "Resource group $(ResourceGroupName) has already been deleted."
                exit 0
              }

              Write-Error "Error querying for resource group. Exit code: $LASTEXITCODE, $errOutput"
              exit 1
            }

            $resourceGroupId = $output

            if ('$(CleanupImmediate)' -eq 'true') {
              # Tag the resource group so it gets cleaned up later if delete fails
              az tag create `
                --resource-id $resourceGroupId `
                --tags DeleteAfter="$((Get-Date -AsUTC).ToString('o'))"

              # Attempt to delete the resource group
              az group delete --resource-group $(ResourceGroupName) --yes --no-wait
            } else {
              $delayInHours = [int]'$(CleanupHoursDelay)'
              # Tag the resource group for delayed cleanup
              az tag create `
                --resource-id $resourceGroupId `
                --tags DeleteAfter="$((Get-Date -AsUTC).AddHours($delayInHours).ToString('o'))"
            }
      condition: always()
      displayName: Tag resource group for deletion
